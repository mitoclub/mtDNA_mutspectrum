df_syn = df_syn[,c(1,5,6,7)]
df_syn = df_syn[df_syn$Mut == 'T>C',]
df_syn = df_mutspec[df_mutspec$Label == 'syn',]
df_syn = df_syn[,c(1,5,6,7)]
df_syn = df_syn[df_syn$Mut == 'T>C',]
View(birds_ms_tree)
df_syn = df_syn[,c(1,5,7)]
df_syn = df_mutspec[df_mutspec$Label == 'syn',]
df_syn = df_syn[,c(1,5,7)]
df_syn = df_syn[df_syn$Mut == 'T>C',]
names(df_syn) = c('Mut', 'MutSpec', 'RefNode', 'species_name')
names(df_syn) = c('Mut', 'MutSpec', 'species_name')
df_for_color = merge(df_flight1, df_syn)
#Starting coloring tree
p <- ggtree(birds_ms_tree, color = df_syn$MutSpec) %<+% df_flight1 +
geom_tippoint(aes(color=ability_to_fly))
p
View(df_for_color)
#Starting coloring tree
p <- ggtree(birds_ms_tree, color = df_for_color$Mutation_AG_syn) %<+% df_flight1 +
geom_tippoint(aes(color=ability_to_fly))
p
a = birds_ms_tree$edge
a = birds_ms_tree$edge
a
a = as.data.frame(birds_ms_tree$edge)
a
View(a)
a = as.data.frame(birds_ms_tree$edge.length)
a = as.data.frame(birds_ms_tree$Nnode)
a = as.data.frame(birds_ms_tree$)
a = as.data.frame(birds_ms_tree$node.label)
a = as.data.frame(birds_ms_tree$edge)
list_all_tips <- c(prop.part(birds_ms_tree, check.labels = TRUE))
View(list_all_tips)
list_all_tips <- as.data.frame(prop.part(birds_ms_tree, check.labels = TRUE))
c
list_all_tips <- c(prop.part(birds_ms_tree, check.labels = TRUE))
View(df_syn)
View(df_syn1)
View(list_all_tips)
View(df_for_color)
View(df_syn)
df_syn = df_mutspec[df_mutspec$Label == 'syn',]
df_syn = df_syn[,c(1,5,7)]
df_syn = df_syn[df_syn$Mut == 'T>C',]
View(df_syn)
library('phylobase')
phylo4d()
install.packages("phylobase")
library(phylobase)
View(df_flight1)
df_syn$Mut = 'A>G'
df_syn_tips = df_syn[!grepl('Node', df_syn$AltNode),]
df_syn_nodes = df_syn[grepl('Node', df_syn$AltNode),]
View(df_syn_nodes)
df_syn = df_mutspec[df_mutspec$Label == 'syn',]
df_syn = df_syn[,c(5,7)]
1
df_syn = df_syn[,c(1,5,7)]
df_syn = df_mutspec[df_mutspec$Label == 'syn',]
df_syn = df_syn[,c(1,5,7)]
df_syn = df_syn[df_syn$Mut == 'T>C',]
df_syn = df_syn[,c(2,3)]
df_syn_tips = df_syn[!grepl('Node', df_syn$AltNode),]
df_syn_nodes = df_syn[grepl('Node', df_syn$AltNode),]
ab = phylo4d(birds_ms_tree, tip.data = df_syn_tips, node.data = df_syn_nodes)
View(df_syn_tips)
View(birds_ms_tree)
View(df_syn)
ab = phylo4d(birds_ms_tree, all.data = df_syn)
ab = phylo4d(birds_ms_tree, node.data = df_syn_nodes)
ab = phylo4d(birds_ms_tree, tip.data = df_syn_nodes, node.data = df_syn_tips)
ab = phylo4d(birds_ms_tree, tip.data = df_syn_nodes, node.data = df_syn_tips)
ab = phylo4d(birds_ms_tree, node.data = df_syn_nodes)
ab = phylo4d(birds_ms_tree)
View(ab)
rm(list = ls(all=TRUE))
library(phytools)
library(nlme)
library(geiger)
library(ggtree)
peng_data_tree = read.tree('peng_and_fly_all_data.tre')
peng_data_tree = read.tree('peng_and_fly_all_data.tre')
birds_tree = read.tree('anc_kg.treefile')
ggtree(birds_tree)
df_flight = read.csv('flight_and_gene.csv')
df_flight = df_flight[,c(2,3,4,5,6)]
df_flight$flight_num = 0
df_flight[df_flight$ability_to_fly != 'Flying',]$flight_num = 1
rownames(df_flight) = df_flight$species_name
flying_tree = read.tree('flying_birds_tree.tre')
name.check(flying_tree, df_flight)
df_flight$ability_to_fly = as.character(df_flight$ability_to_fly)
df_flight$GhAhSkew = as.numeric(as.character(df_flight$GhAhSkew))
df_flight$fAn = as.numeric(as.character(df_flight$fAn))
df_flight$fGn = as.numeric(as.character(df_flight$fGn))
df_flight$flight_num = as.numeric(as.character(df_flight$flight_num))
df_mutspec = read.table('C:/Users/User/Desktop/mutspec12.tsv', header = TRUE, fill = TRUE)
df_ff = df_mutspec[df_mutspec$Label == 'ff',]
df_syn = df_mutspec[df_mutspec$Label == 'syn',]
df_ff = df_ff[!grepl('Node', df_ff$AltNode),]
df_ff = df_ff[,c(1,5,7)]
df_ff1 = reshape(data = df_ff, idvar = 'AltNode',
timevar = 'Mut',
direction = 'wide')
names(df_ff1) = c('species_name', 'Mutation_TG', 'Mutation_TC', 'Mutation_TA', 'Mutation_GT', 'Mutation_GC',
'Mutation_GA', 'Mutation_CT', 'Mutation_CG', 'Mutation_CA', 'Mutation_AT', 'Mutation_AG', 'Mutation_AC')
df_syn = df_syn[!grepl('Node', df_syn$AltNode),]
df_syn = df_syn[,c(1,5,7)]
df_syn1 = reshape(data = df_syn, idvar = 'AltNode',
timevar = 'Mut',
direction = 'wide')
names(df_syn1) = c('species_name', 'Mutation_TG_syn', 'Mutation_TC_syn', 'Mutation_TA_syn', 'Mutation_GT_syn', 'Mutation_GC_syn',
'Mutation_GA_syn', 'Mutation_CT_syn', 'Mutation_CG_syn', 'Mutation_CA_syn', 'Mutation_AT_syn', 'Mutation_AG_syn', 'Mutation_AC_syn')
df_flight1 = merge(df_flight, df_ff1)
df_flight1 = merge(df_flight1, df_syn1)
need_species = setdiff(df_flight$species_name, df_flight1$species_name)
correct_need_species = setdiff(df_flight$species_name, need_species)
birds_ms_tree<-keep.tip(flying_tree,correct_need_species)
View(birds_ms_tree)
df_flight1$Mutation_AG = as.numeric(df_flight1$Mutation_AG)
df_flight1$Mutation_AG_syn = as.numeric(df_flight1$Mutation_AG_syn)
df_flight1$Mutation_CT = as.numeric(df_flight1$Mutation_CT)
df_flight1$Mutation_CT_syn = as.numeric(df_flight1$Mutation_CT_syn)
View(df_flight1)
rownames(df_flight1)= df_flight1$species_name
#Starting coloring tree
## extract total body length and log-transform
lnTL<-setNames(df_flight1$Mutation_AG_syn,rownames(eel.data))
#Starting coloring tree
## extract total body length and log-transform
lnTL<-setNames(df_flight1$Mutation_AG_syn,rownames(df_flight1))
head(lnTL)
## estimate ancestral states using fastAnc
fit.lnTL<-fastAnc(birds_ms_tree,lnTL,vars=TRUE,CI=TRUE)
print(fit.lnTL,printlen=10)
## plot eel phylogeny using plotTree
plotTree(birds_ms_tree,ftype="i",fsize=0.5,lwd=1)
## compute "contMap" object
birds_contMap<-contMap(birds_ms_tree,lnTL,
plot=FALSE,lims=c(2.7,5.8))
## change the color gradient to a custom gradient
birds_contMap<-setMap(birds_contMap,
c("white","orange","black"))
## plot "contMap" object
plot(birds_contMap,sig=2,fsize=c(0.4,0.7),
lwd=c(2,3),leg.txt="Mutation A>G syn")
## compute "contMap" object
birds_contMap<-contMap(birds_ms_tree,lnTL,
plot=FALSE)
## change the color gradient to a custom gradient
birds_contMap<-setMap(birds_contMap,
c("white","orange","black"))
## plot "contMap" object
plot(birds_contMap,sig=2,fsize=c(0.4,0.7),
lwd=c(2,3),leg.txt="Mutation A>G syn")
View(birds_ms_tree)
## identify the tips descended from node 102
tips<-extract.clade(birds_ms_tree,699)$tip.label
tips
View(peng_data_tree)
## identify the tips descended from node 102
write.tree(birds_ms_tree, 'flying_mt_data.tre')
tips<-extract.clade(birds_ms_tree,'Node699')$tip.label
tips
## prune "contMap" object to retain only these tips
pruned.contMap<-keep.tip.contMap(birds_contMap,tips)
## plot object
plot(pruned.contMap,xlim=c(-2,90),lwd=c(3,4),
fsize=c(0.7,0.8))
## plot object
plot(pruned.contMap)
## add error bars
errorbar.contMap(pruned.contMap,lwd=8)
## add error bars
errorbar.contMap(pruned.contMap)
tips<-extract.clade(birds_ms_tree,'Node690')$tip.label
tips
## prune "contMap" object to retain only these tips
pruned.contMap<-keep.tip.contMap(birds_contMap,tips)
## plot object
plot(pruned.contMap)
## compute "contMap" object
birds_contMap<-contMap(birds_ms_tree,lnTL,
plot=FALSE)
## plot "contMap" object
plot(birds_contMap,sig=2,fsize=c(0.4,0.7),
lwd=c(2,3),leg.txt="Mutation A>G syn")
## identify the tips descended from node 102
#write.tree(birds_ms_tree, 'flying_mt_data.tre')
tips<-extract.clade(birds_ms_tree,'Node699')$tip.label #699 - peng, 690 peng + ant
tips
## prune "contMap" object to retain only these tips
pruned.contMap<-keep.tip.contMap(birds_contMap,tips)
## plot object
plot(pruned.contMap)
rm(list = ls(all=TRUE))
peng_data_tree = read.tree('peng_and_fly_all_data.tre')
birds_tree = read.tree('anc_kg.treefile')
df_flight = read.csv('flight_and_gene.csv')
df_flight = df_flight[,c(2,3,4,5,6)]
df_flight$flight_num = 0
df_flight[df_flight$ability_to_fly != 'Flying',]$flight_num = 1
rownames(df_flight) = df_flight$species_name
flying_tree = read.tree('flying_birds_tree.tre')
name.check(flying_tree, df_flight)
df_flight$ability_to_fly = as.character(df_flight$ability_to_fly)
df_flight$GhAhSkew = as.numeric(as.character(df_flight$GhAhSkew))
df_flight$fAn = as.numeric(as.character(df_flight$fAn))
df_flight$fGn = as.numeric(as.character(df_flight$fGn))
df_flight$flight_num = as.numeric(as.character(df_flight$flight_num))
df_mutspec = read.table('C:/Users/User/Desktop/mutspec12.tsv', header = TRUE, fill = TRUE)
df_ff = df_mutspec[df_mutspec$Label == 'ff',]
df_syn = df_mutspec[df_mutspec$Label == 'syn',]
df_ff = df_ff[!grepl('Node', df_ff$AltNode),]
df_ff = df_ff[,c(1,5,7)]
df_ff1 = reshape(data = df_ff, idvar = 'AltNode',
timevar = 'Mut',
direction = 'wide')
names(df_ff1) = c('species_name', 'Mutation_TG', 'Mutation_TC', 'Mutation_TA', 'Mutation_GT', 'Mutation_GC',
'Mutation_GA', 'Mutation_CT', 'Mutation_CG', 'Mutation_CA', 'Mutation_AT', 'Mutation_AG', 'Mutation_AC')
df_syn = df_syn[!grepl('Node', df_syn$AltNode),]
df_syn = df_syn[,c(1,5,7)]
df_syn1 = reshape(data = df_syn, idvar = 'AltNode',
timevar = 'Mut',
direction = 'wide')
names(df_syn1) = c('species_name', 'Mutation_TG_syn', 'Mutation_TC_syn', 'Mutation_TA_syn', 'Mutation_GT_syn', 'Mutation_GC_syn',
'Mutation_GA_syn', 'Mutation_CT_syn', 'Mutation_CG_syn', 'Mutation_CA_syn', 'Mutation_AT_syn', 'Mutation_AG_syn', 'Mutation_AC_syn')
df_flight1 = merge(df_flight, df_ff1)
df_flight1 = merge(df_flight1, df_syn1)
need_species = setdiff(df_flight$species_name, df_flight1$species_name)
correct_need_species = setdiff(df_flight$species_name, need_species)
birds_ms_tree<-keep.tip(flying_tree,correct_need_species)
df_flight1$Mutation_AG = as.numeric(df_flight1$Mutation_AG)
df_flight1$Mutation_AG_syn = as.numeric(df_flight1$Mutation_AG_syn)
df_flight1$Mutation_CT = as.numeric(df_flight1$Mutation_CT)
df_flight1$GhAhSkew = as.numeric(df_flight1$GhAhSkew)
rownames(df_flight1)= df_flight1$species_name
#Starting coloring tree
## extract total body length and log-transform
lnTL<-setNames(df_flight1$GhAhSkew,rownames(df_flight1))
head(lnTL)
## estimate ancestral states using fastAnc
fit.lnTL<-fastAnc(birds_ms_tree,lnTL,vars=TRUE,CI=TRUE)
print(fit.lnTL,printlen=10)
## plot eel phylogeny using plotTree
plotTree(birds_ms_tree,ftype="i",fsize=0.5,lwd=1)
## compute "contMap" object
birds_contMap<-contMap(birds_ms_tree,lnTL,
plot=FALSE)
## plot "contMap" object
plot(birds_contMap,sig=2,fsize=c(0.4,0.7),
lwd=c(2,3),leg.txt="Mutation A>G syn")
## plot "contMap" object
plot(birds_contMap,leg.txt="Mutation A>G syn")
## plot "contMap" object
plot(birds_contMap,sig=2,fsize=c(0.4,0.7),
lwd=c(2,3),leg.txt="Mutation A>G syn")
## plot "contMap" object
plot(birds_contMap,sig=2,fsize=c(0.4,0.7),
lwd=c(2,3),leg.txt="GhAhSkew")
## identify the tips descended from node 102
#write.tree(birds_ms_tree, 'flying_mt_data.tre')
tips<-extract.clade(birds_ms_tree,'Node699')$tip.label #699 - peng, 690 peng + ant
tips
## prune "contMap" object to retain only these tips
pruned.contMap<-keep.tip.contMap(birds_contMap,tips)
## plot object
plot(pruned.contMap)
rm(list = ls(all=TRUE))
library(phytools)
library(nlme)
library(geiger)
library(ggtree)
peng_data_tree = read.tree('peng_and_fly_all_data.tre')
birds_tree = read.tree('anc_kg.treefile')
df_flight = read.csv('flight_and_gene.csv')
df_flight = df_flight[,c(2,3,4,5,6)]
df_flight$flight_num = 0
df_flight[df_flight$ability_to_fly != 'Flying',]$flight_num = 1
rownames(df_flight) = df_flight$species_name
flying_tree = read.tree('flying_birds_tree.tre')
name.check(flying_tree, df_flight)
df_flight$ability_to_fly = as.character(df_flight$ability_to_fly)
df_flight$GhAhSkew = as.numeric(as.character(df_flight$GhAhSkew))
df_flight$fAn = as.numeric(as.character(df_flight$fAn))
df_flight$fGn = as.numeric(as.character(df_flight$fGn))
df_flight$flight_num = as.numeric(as.character(df_flight$flight_num))
df_mutspec = read.table('C:/Users/User/Desktop/mutspec12.tsv', header = TRUE, fill = TRUE)
df_ff = df_mutspec[df_mutspec$Label == 'ff',]
df_syn = df_mutspec[df_mutspec$Label == 'syn',]
df_ff = df_ff[!grepl('Node', df_ff$AltNode),]
df_ff = df_ff[,c(1,5,7)]
df_ff1 = reshape(data = df_ff, idvar = 'AltNode',
timevar = 'Mut',
direction = 'wide')
names(df_ff1) = c('species_name', 'Mutation_TG', 'Mutation_TC', 'Mutation_TA', 'Mutation_GT', 'Mutation_GC',
'Mutation_GA', 'Mutation_CT', 'Mutation_CG', 'Mutation_CA', 'Mutation_AT', 'Mutation_AG', 'Mutation_AC')
df_syn = df_syn[!grepl('Node', df_syn$AltNode),]
df_syn = df_syn[,c(1,5,7)]
df_syn1 = reshape(data = df_syn, idvar = 'AltNode',
timevar = 'Mut',
direction = 'wide')
names(df_syn1) = c('species_name', 'Mutation_TG_syn', 'Mutation_TC_syn', 'Mutation_TA_syn', 'Mutation_GT_syn', 'Mutation_GC_syn',
'Mutation_GA_syn', 'Mutation_CT_syn', 'Mutation_CG_syn', 'Mutation_CA_syn', 'Mutation_AT_syn', 'Mutation_AG_syn', 'Mutation_AC_syn')
df_flight1 = merge(df_flight, df_ff1)
df_flight1 = merge(df_flight1, df_syn1)
need_species = setdiff(df_flight$species_name, df_flight1$species_name)
correct_need_species = setdiff(df_flight$species_name, need_species)
birds_ms_tree<-keep.tip(flying_tree,correct_need_species)
df_flight1$GhAhSkew = as.numeric(df_flight1$GhAhSkew)
df_flight1$Mutation_AG = as.numeric(df_flight1$Mutation_AG)
df_flight1$Mutation_AG_syn = as.numeric(df_flight1$Mutation_AG_syn)
df_flight1$Mutation_CT = as.numeric(df_flight1$Mutation_CT)
df_flight1$Mutation_CT_syn = as.numeric(df_flight1$Mutation_CT_syn)
rownames(df_flight1)= df_flight1$species_name
#Starting coloring tree
## extract total body length and log-transform
lnTL<-setNames(df_flight1$GhAhSkew,rownames(df_flight1))
head(lnTL)
## estimate ancestral states using fastAnc
fit.lnTL<-fastAnc(birds_ms_tree,lnTL,vars=TRUE,CI=TRUE)
print(fit.lnTL,printlen=10)
## plot eel phylogeny using plotTree
plotTree(birds_ms_tree,ftype="i",fsize=0.5,lwd=1)
## compute "contMap" object
birds_contMap<-contMap(birds_ms_tree,lnTL,
plot=FALSE)
## plot "contMap" object
plot(birds_contMap,sig=2,fsize=c(0.4,0.7),
lwd=c(2,3),leg.txt="GhAhSkew")
## plot "contMap" object
plot(birds_contMap,sig=2,fsize=c(1,0.7),
lwd=c(2,3),leg.txt="GhAhSkew")
## plot "contMap" object
plot(birds_contMap,sig=2,fsize=c(0.6,0.7),
lwd=c(2,3),leg.txt="GhAhSkew")
## plot "contMap" object
plot(birds_contMap,sig=2,fsize=c(0.6,0.9),
lwd=c(2,3),leg.txt="GhAhSkew")
## plot "contMap" object
plot(birds_contMap,sig=2,fsize=c(0.6,1.0),
lwd=c(2,3),leg.txt="GhAhSkew")
## plot "contMap" object
plot(birds_contMap,sig=2,fsize=c(0.6,0.9),
lwd=c(2,3),leg.txt="GhAhSkew")
## plot "contMap" object
plot(birds_contMap,sig=2,fsize=c(0.5,0.9),
lwd=c(2,3),leg.txt="GhAhSkew")
?plot
## plot "contMap" object
plot(birds_contMap,sig=2,fsize=c(0.4,0.9),
lwd=c(2,3),leg.txt="GhAhSkew")
ggtree(birds_contMap)
## plot "contMap" object
plot(birds_contMap,sig=2,fsize=c(0.4,0.9),
lwd=c(3,3),leg.txt="GhAhSkew")
## plot "contMap" object
plot(birds_contMap,sig=2,fsize=c(0.4,0.9),
lwd=c(2,3),leg.txt="GhAhSkew")
## plot "contMap" object
plot(birds_contMap,sig=2,fsize=c(0.4,0.9),
lwd=c(2,3),layout='circular', leg.txt="GhAhSkew")
View(df_flight1)
#Starting coloring tree
## extract total body length and log-transform
lnTL<-setNames(df_flight1$Mutation_AG,rownames(df_flight1))
head(lnTL)
## estimate ancestral states using fastAnc
fit.lnTL<-fastAnc(birds_ms_tree,lnTL,vars=TRUE,CI=TRUE)
print(fit.lnTL,printlen=10)
## plot eel phylogeny using plotTree
plotTree(birds_ms_tree,ftype="i",fsize=0.5,lwd=1)
## compute "contMap" object
birds_contMap<-contMap(birds_ms_tree,lnTL,
plot=FALSE)
## plot "contMap" object
plot(birds_contMap,sig=2,fsize=c(0.4,0.9),
lwd=c(2,3), leg.txt="GhAhSkew")
## identify the tips descended from node 102
#write.tree(birds_ms_tree, 'flying_mt_data.tre')
tips<-extract.clade(birds_ms_tree,'Node699')$tip.label #699 - peng, 690 peng + ant
tips
## prune "contMap" object to retain only these tips
pruned.contMap<-keep.tip.contMap(birds_contMap,tips)
## plot object
plot(pruned.contMap)
df_flight1$double_fly = 0
df_flight1[df_flight1$ability_to_fly == 'Flying',]$double_fly = 1
#Starting coloring tree
## extract total body length and log-transform
lnTL<-setNames(df_flight1$double_fly,rownames(df_flight1))
head(lnTL)
## estimate ancestral states using fastAnc
fit.lnTL<-fastAnc(birds_ms_tree,lnTL,vars=TRUE,CI=TRUE)
print(fit.lnTL,printlen=10)
## plot eel phylogeny using plotTree
plotTree(birds_ms_tree,ftype="i",fsize=0.5,lwd=1)
## compute "contMap" object
birds_contMap<-contMap(birds_ms_tree,lnTL,
plot=FALSE)
## plot "contMap" object
plot(birds_contMap,sig=2,fsize=c(0.4,0.9),
lwd=c(2,3), leg.txt="GhAhSkew")
## identify the tips descended from node 102
#write.tree(birds_ms_tree, 'flying_mt_data.tre')
tips<-extract.clade(birds_ms_tree,'Node699')$tip.label #699 - peng, 690 peng + ant
tips
## prune "contMap" object to retain only these tips
pruned.contMap<-keep.tip.contMap(birds_contMap,tips)
## plot object
plot(pruned.contMap)
## identify the tips descended from node 102
#write.tree(birds_ms_tree, 'flying_mt_data.tre')
tips<-extract.clade(birds_ms_tree,'Node690')$tip.label #699 - peng, 690 peng + ant
tips
## prune "contMap" object to retain only these tips
pruned.contMap<-keep.tip.contMap(birds_contMap,tips)
## plot object
plot(pruned.contMap)
df_temp_fly = read.csv('birds_metrics.csv')
View(df_temp_fly)
df_temp_fly = df_temp_fly[,c(2:17)]
View(df_temp_fly)
df_flight1 = merge(df_flight1, df_temp_fly)
View(df_flight1)
rm(list = ls(all=TRUE))
peng_data_tree = read.tree('peng_and_fly_all_data.tre')
birds_tree = read.tree('anc_kg.treefile')
df_flight = read.csv('flight_and_gene.csv')
df_flight = df_flight[,c(2,3,4,5,6)]
df_flight$flight_num = 0
df_flight[df_flight$ability_to_fly != 'Flying',]$flight_num = 1
rownames(df_flight) = df_flight$species_name
flying_tree = read.tree('flying_birds_tree.tre')
name.check(flying_tree, df_flight)
df_flight$ability_to_fly = as.character(df_flight$ability_to_fly)
df_flight$GhAhSkew = as.numeric(as.character(df_flight$GhAhSkew))
df_flight$fAn = as.numeric(as.character(df_flight$fAn))
df_flight$fGn = as.numeric(as.character(df_flight$fGn))
df_flight$flight_num = as.numeric(as.character(df_flight$flight_num))
df_mutspec = read.table('C:/Users/User/Desktop/mutspec12.tsv', header = TRUE, fill = TRUE)
df_ff = df_mutspec[df_mutspec$Label == 'ff',]
df_syn = df_mutspec[df_mutspec$Label == 'syn',]
df_ff = df_ff[!grepl('Node', df_ff$AltNode),]
df_ff = df_ff[,c(1,5,7)]
df_ff1 = reshape(data = df_ff, idvar = 'AltNode',
timevar = 'Mut',
direction = 'wide')
names(df_ff1) = c('species_name', 'Mutation_TG', 'Mutation_TC', 'Mutation_TA', 'Mutation_GT', 'Mutation_GC',
'Mutation_GA', 'Mutation_CT', 'Mutation_CG', 'Mutation_CA', 'Mutation_AT', 'Mutation_AG', 'Mutation_AC')
df_syn = df_syn[!grepl('Node', df_syn$AltNode),]
df_syn = df_syn[,c(1,5,7)]
df_syn1 = reshape(data = df_syn, idvar = 'AltNode',
timevar = 'Mut',
direction = 'wide')
names(df_syn1) = c('species_name', 'Mutation_TG_syn', 'Mutation_TC_syn', 'Mutation_TA_syn', 'Mutation_GT_syn', 'Mutation_GC_syn',
'Mutation_GA_syn', 'Mutation_CT_syn', 'Mutation_CG_syn', 'Mutation_CA_syn', 'Mutation_AT_syn', 'Mutation_AG_syn', 'Mutation_AC_syn')
df_flight1 = merge(df_flight, df_ff1)
df_flight1 = merge(df_flight1, df_syn1)
need_species = setdiff(df_flight$species_name, df_flight1$species_name)
correct_need_species = setdiff(df_flight$species_name, need_species)
birds_ms_tree<-keep.tip(flying_tree,correct_need_species)
df_flight1$GhAhSkew = as.numeric(df_flight1$GhAhSkew)
df_flight1$Mutation_AG = as.numeric(df_flight1$Mutation_AG)
df_flight1$Mutation_AG_syn = as.numeric(df_flight1$Mutation_AG_syn)
df_flight1$Mutation_CT = as.numeric(df_flight1$Mutation_CT)
df_flight1$Mutation_CT_syn = as.numeric(df_flight1$Mutation_CT_syn)
rownames(df_flight1)= df_flight1$species_name
df_flight1$double_fly = 0
df_flight1[df_flight1$ability_to_fly == 'Flying',]$double_fly = 1
df_temp_fly = read.csv('birds_metrics.csv')
df_temp_fly = df_temp_fly[,c(2:17)]
df_flight2 = merge(df_flight1, df_temp_fly)
need_species = setdiff(df_flight1$species_name, df_flight2$species_name)
correct_need_species = setdiff(df_flight1$species_name, need_species)
birds_ms_and_temp_tree<-keep.tip(birds_ms_tree,correct_need_species)
View(birds_ms_and_temp_tree)
View(df_flight2)
row.names(df_flight2) = df_flight2$species_name
#Starting coloring tree
## extract total body length and log-transform
lnTL<-setNames(df_flight2$AnnualTemp,rownames(df_flight2))
head(lnTL)
## estimate ancestral states using fastAnc
fit.lnTL<-fastAnc(birds_ms_and_temp_tree,lnTL,vars=TRUE,CI=TRUE)
df_flight2$AnnualTemp = gsub(',', '.', df_temp_fly$AnnualTemp)
df_flight2$AnnualTemp = gsub(',', '.', df_flight2$AnnualTemp)
df_flight2$AnnualTemp = as.numeric(as.character(df_flight2$AnnualTemp))
#Starting coloring tree
## extract total body length and log-transform
lnTL<-setNames(df_flight2$AnnualTemp,rownames(df_flight2))
head(lnTL)
## estimate ancestral states using fastAnc
fit.lnTL<-fastAnc(birds_ms_and_temp_tree,lnTL,vars=TRUE,CI=TRUE)
print(fit.lnTL,printlen=10)
## compute "contMap" object
birds_contMap<-contMap(birds_ms_and_temp_tree,lnTL,
plot=FALSE)
## plot "contMap" object
plot(birds_contMap,sig=2,fsize=c(0.4,0.9),
lwd=c(2,3), leg.txt="GhAhSkew")
## identify the tips descended from node 102
#write.tree(birds_ms_tree, 'flying_mt_data.tre')
tips<-extract.clade(birds_ms_tree,'Node690')$tip.label #699 - peng, 690 peng + ant
tips
## prune "contMap" object to retain only these tips
pruned.contMap<-keep.tip.contMap(birds_contMap,tips)
## plot object
plot(pruned.contMap)
rm(list = ls(all=TRUE))
