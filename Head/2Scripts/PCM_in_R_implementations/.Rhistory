df_ff = df_mutspec[df_mutspec$Label == 'ff',]
df_syn = df_mutspec[df_mutspec$Label == 'syn',]
df_ff = df_ff[!grepl('Node', df_ff$AltNode),]
df_ff = df_ff[,c(1,5,7)]
df_ff1 = reshape(data = df_ff, idvar = 'AltNode',
timevar = 'Mut',
direction = 'wide')
names(df_ff1) = c('species_name', 'T>G', 'T>C', 'T>A', 'G>T', 'G>C', 'G>A', 'C>T', 'C>G', 'C>A', 'A>T', 'A>G', 'A>C')
View(df_ff1)
df_fly_peng = merge(df_fly_peng, df_ff1)
View(df_fly_peng)
View(df_flight)
View(df_fly_peng)
df_fly_peng = df_flight[df_flight$ability_to_fly == 'Flying' | df_flight$ability_to_fly =='Sphenisciformes',]
df_fly_peng1 = merge(df_fly_peng, df_ff1)
need_species = setdiff(df_fly_peng$species_name, df_fly_peng1$species_name)
correct_need_species = setdiff(df_fly_peng$species_name, need_species)
peng_fly_tree1<-keep.tip(peng_fly_tree,correct_need_species)
peng_fly_tree1
spp = rownames(df_fly_peng1)
corBM = corBrownian(phy=peng_fly_tree1,form=~spp)
View(df_fly_peng1)
pgls_mt_peng = gls(A>G~ability_to_fly,
data=df_fly_peng1,correlation=corBM)
pgls_mt_peng = gls(`A>G`~ability_to_fly,
data=df_fly_peng1,correlation=corBM)
pgls_mt_peng = gls(df_fly_peng1$`A>G`~ability_to_fly,
data=df_fly_peng1,correlation=corBM)
df_fly_peng1$`A>G` = as.numeric(as.character(df_fly_peng1$`A>G`))
pgls_mt_peng = gls(df_fly_peng1$`A>G`~ability_to_fly,
data=df_fly_peng1,correlation=corBM)
pgls_mt_peng = gls(df_fly_peng1$`A>G`~ability_to_fly,
data=df_fly_peng1,correlation=corBM)
names(df_ff1) = c('species_name', 'Mutation_T>G', 'Mutation_T>C', 'Mutation_T>A', 'Mutation_G>T', 'Mutation_G>C',
'Mutation_G>A', 'Mutation_C>T', 'Mutation_C>G', 'Mutation_C>A', 'Mutation_A>T', 'Mutation_A>G', 'Mutation_A>C')
View(df_ff1)
df_fly_peng1 = merge(df_fly_peng, df_ff1)
View(df_fly_peng1)
need_species = setdiff(df_fly_peng$species_name, df_fly_peng1$species_name)
correct_need_species = setdiff(df_fly_peng$species_name, need_species)
peng_fly_tree1<-keep.tip(peng_fly_tree,correct_need_species)
spp = rownames(df_fly_peng1)
corBM = corBrownian(phy=peng_fly_tree1,form=~spp)
names(df_ff1) = c('species_name', 'Mutation_TG', 'Mutation_TC', 'Mutation_TA', 'Mutation_GT', 'Mutation_GC',
'Mutation_GA', 'Mutation_CT', 'Mutation_CG', 'Mutation_CA', 'Mutation_AT', 'Mutation_AG', 'Mutation_AC')
df_fly_peng1 = merge(df_fly_peng, df_ff1)
need_species = setdiff(df_fly_peng$species_name, df_fly_peng1$species_name)
correct_need_species = setdiff(df_fly_peng$species_name, need_species)
peng_fly_tree1<-keep.tip(peng_fly_tree,correct_need_species)
spp = rownames(df_fly_peng1)
corBM = corBrownian(phy=peng_fly_tree1,form=~spp)
df_fly_peng1$Mutation_AG = as.numeric(as.character(df_fly_peng1$Mutation_AG))
pgls_mt_peng = gls(Mutation_AG~ability_to_fly,
data=df_fly_peng1,correlation=corBM)
typeof(df_fly_peng1$Mutation_AG)
df_fly_peng1$Mutation_AG = as.numeric(as.character(df_fly_peng1$Mutation_AG))
typeof(df_fly_peng1$Mutation_AG)
df_fly_peng1$Mutation_AG = as.numeric(as.character(df_fly_peng1$Mutation_AG))
typeof(df_fly_peng1$Mutation_AG)
df_fly_peng1$Mutation_AG = as.numeric(df_fly_peng1$Mutation_AG)
typeof(df_fly_peng1$Mutation_AG)
#new PGLS for birds
rm(list = ls(all=TRUE))
library(phytools)
library(nlme)
library(geiger)
#flying birds
df_flight = read.csv('flight_and_gene.csv')
df_flight = df_flight[,c(2,3,4,5,6)]
df_flight$flight_num = 0
df_flight[df_flight$ability_to_fly != 'Flying',]$flight_num = 1
rownames(df_flight) = df_flight$species_name
flying_tree = read.tree('flying_birds_tree.tre')
name.check(flying_tree, df_flight)
df_flight$ability_to_fly = as.character(df_flight$ability_to_fly)
df_flight$GhAhSkew = as.numeric(as.character(df_flight$GhAhSkew))
df_flight$fAn = as.numeric(as.character(df_flight$fAn))
df_flight$fGn = as.numeric(as.character(df_flight$fGn))
df_flight$flight_num = as.numeric(as.character(df_flight$flight_num))
df_fly_peng = df_flight[df_flight$ability_to_fly == 'Flying' | df_flight$ability_to_fly =='Sphenisciformes',]
df_fly_not = df_flight[df_flight$ability_to_fly !='Sphenisciformes',]
peng_fly_tree = read.tree('flying_and_peng.tre')
no_peng_fly_tree = read.tree('flying_and_no_peng.tre')
spp = rownames(df_fly_peng)
corBM = corBrownian(phy=peng_fly_tree,form=~spp)
pgls_flying = gls(GhAhSkew~ability_to_fly,
data=df_fly_peng,correlation=corBM)
summary(pgls_flying)
anova(pgls_flying)
spp = rownames(df_fly_not)
corBM = corBrownian(phy=no_peng_fly_tree,form=~spp)
pgls_flying = gls(GhAhSkew~ability_to_fly,
data=df_fly_not,correlation=corBM)
summary(pgls_flying)
anova(pgls_flying)
#mutspec PGLS
df_mutspec = read.table('C:/Users/User/Desktop/Birds mutspec results from Bogdan/mutspec12.tsv', header = TRUE, fill = TRUE)
df_ff = df_mutspec[df_mutspec$Label == 'ff',]
#mutspec PGLS
df_mutspec = read.table('C:/Users/User/Desktop/mutspec12.tsv', header = TRUE, fill = TRUE)
df_ff = df_mutspec[df_mutspec$Label == 'ff',]
df_syn = df_mutspec[df_mutspec$Label == 'syn',]
df_ff = df_ff[!grepl('Node', df_ff$AltNode),]
df_ff = df_ff[,c(1,5,7)]
df_ff1 = reshape(data = df_ff, idvar = 'AltNode',
timevar = 'Mut',
direction = 'wide')
names(df_ff1) = c('species_name', 'Mutation_TG', 'Mutation_TC', 'Mutation_TA', 'Mutation_GT', 'Mutation_GC',
'Mutation_GA', 'Mutation_CT', 'Mutation_CG', 'Mutation_CA', 'Mutation_AT', 'Mutation_AG', 'Mutation_AC')
df_fly_peng1 = merge(df_fly_peng, df_ff1)
need_species = setdiff(df_fly_peng$species_name, df_fly_peng1$species_name)
correct_need_species = setdiff(df_fly_peng$species_name, need_species)
peng_fly_tree1<-keep.tip(peng_fly_tree,correct_need_species)
df_fly_peng1$Mutation_AG = as.numeric(df_fly_peng1$Mutation_AG)
typeof(df_fly_peng1$Mutation_AG)
View(df_fly_peng1)
df_fly_peng1$Mutation_AG = as.numeric(df_fly_peng1$Mutation_AG)
typeof(df_fly_peng1$Mutation_AG)
typeof(df_fly_peng1$Mutation_AG[,1])
typeof(df_fly_peng1$Mutation_AG)
round(df_fly_peng1$Mutation_AG,7)
typeof(df_fly_peng1$Mutation_AG)
spp = rownames(df_fly_peng1)
corBM = corBrownian(phy=peng_fly_tree1,form=~spp)
pgls_mt_peng = gls(Mutation_AG~ability_to_fly,
data=df_fly_peng1,correlation=corBM)
df_fly_peng1$ability_to_fly = as.factor(df_fly_peng1$ability_to_fly)
spp = rownames(df_fly_peng1)
corBM = corBrownian(phy=peng_fly_tree1,form=~spp)
pgls_mt_peng = gls(Mutation_AG~ability_to_fly,
data=df_fly_peng1,correlation=corBM)
View(peng_fly_tree1)
pgls_mt_peng = gls(GhAhSkew~ability_to_fly,
data=df_fly_peng1,correlation=corBM)
row.names(df_fly_peng1) = df_fly_peng1$species_name
spp1 = rownames(df_fly_peng1)
corBM1 = corBrownian(phy=peng_fly_tree1,form=~spp1)
pgls_mt_peng = gls(GhAhSkew~ability_to_fly,
data=df_fly_peng1,correlation=corBM1)
pgls_mt_peng = gls(Mutation_AG~ability_to_fly,
data=df_fly_peng1,correlation=corBM1)
summary(pgls_flying)
summary(pgls_mt_peng)
df_syn1 = reshape(data = df_syn, idvar = 'AltNode',
timevar = 'Mut',
direction = 'wide')
View(df_syn1)
View(df_syn)
df_syn = df_syn[!grepl('Node', df_syn$AltNode),]
df_syn1 = reshape(data = df_syn, idvar = 'AltNode',
timevar = 'Mut',
direction = 'wide')
View(df_syn1)
View(df_syn)
df_syn = df_syn[,c(1,5,7)]
df_syn1 = reshape(data = df_syn, idvar = 'AltNode',
timevar = 'Mut',
direction = 'wide')
View(df_syn1)
names(df_syn1) = c('species_name', 'Mutation_TG_syn', 'Mutation_TC_syn', 'Mutation_TA_syn', 'Mutation_GT_syn', 'Mutation_GC_syn',
'Mutation_GA_syn', 'Mutation_CT_syn', 'Mutation_CG_syn', 'Mutation_CA_syn', 'Mutation_AT_syn', 'Mutation_AG_syn', 'Mutation_AC_syn')
df_fly_peng1 = merge(df_fly_peng, df_ff1)
df_fly_peng1 = merge(df_fly_peng1, df_syn1)
need_species = setdiff(df_fly_peng$species_name, df_fly_peng1$species_name)
correct_need_species = setdiff(df_fly_peng$species_name, need_species)
peng_fly_tree1<-keep.tip(peng_fly_tree,correct_need_species)
df_fly_peng1$Mutation_AG = as.numeric(df_fly_peng1$Mutation_AG)
df_fly_peng1$ability_to_fly = as.factor(df_fly_peng1$ability_to_fly)
round(df_fly_peng1$Mutation_AG,7)
spp1 = rownames(df_fly_peng1)
corBM1 = corBrownian(phy=peng_fly_tree1,form=~spp1)
row.names(df_fly_peng1) = df_fly_peng1$species_name
spp1 = rownames(df_fly_peng1)
corBM1 = corBrownian(phy=peng_fly_tree1,form=~spp1)
pgls_mt_peng = gls(Mutation_AG~ability_to_fly,
data=df_fly_peng1,correlation=corBM1)
summary(pgls_mt_peng)
pgls_mt_peng = gls(Mutation_AG_syn~ability_to_fly,
data=df_fly_peng1,correlation=corBM1)
df_fly_peng1$Mutation_AG_syn = as.numeric(df_fly_peng1$Mutation_AG_syn)
pgls_mt_peng = gls(Mutation_AG_syn~ability_to_fly,
data=df_fly_peng1,correlation=corBM1)
summary(pgls_mt_peng)
pgls_mt_peng = gls(Mutation_CT_syn~ability_to_fly,
data=df_fly_peng1,correlation=corBM1)
df_fly_peng1$Mutation_CT = as.numeric(df_fly_peng1$Mutation_CT)
df_fly_peng1$Mutation_CT_syn = as.numeric(df_fly_peng1$Mutation_CT_syn)
spp1 = rownames(df_fly_peng1)
corBM1 = corBrownian(phy=peng_fly_tree1,form=~spp1)
pgls_mt_peng = gls(Mutation_CT_syn~ability_to_fly,
data=df_fly_peng1,correlation=corBM1)
summary(pgls_mt_peng)
pgls_mt_peng = gls(Mutation_CT~ability_to_fly,
data=df_fly_peng1,correlation=corBM1)
summary(pgls_mt_peng)
View(df_fly_not)
df_fly_not1 = merge(df_fly_not, df_ff1, df_syn1)
df_fly_not1 = merge(df_fly_not, df_ff1)
df_fly_not1 = merge(df_fly_not1, df_syn1)
need_species = setdiff(df_fly_not$species_name, df_fly_not1$species_name)
correct_need_species = setdiff(df_fly_not$species_name, need_species)
not_fly_tree = read.tree('flying_and_no_peng.tre')
View(not_fly_tree)
not_fly_tree1<-keep.tip(not_fly_tree,correct_need_species)
View(not_fly_tree1)
df_fly_not1$Mutation_AG = as.numeric(df_fly_not1$Mutation_AG)
df_fly_not1$Mutation_AG_syn = as.numeric(df_fly_not1$Mutation_AG_syn)
df_fly_not1$Mutation_CT = as.numeric(df_fly_not1$Mutation_CT)
df_fly_not1$Mutation_CT_syn = as.numeric(df_fly_not1$Mutation_CT_syn)
row.names(df_fly_not1) = df_fly_not1$species_name
spp2 = rownames(df_fly_not1)
corBM2 = corBrownian(phy=not_fly_tree1,form=~spp2)
pgls_mt_not_fly = gls(Mutation_AG~ability_to_fly,
data=df_fly_not1,correlation=corBM2)
summary(pgls_mt_not_fly)
pgls_mt_not_fly = gls(Mutation_AG_syn~ability_to_fly,
data=df_fly_not1,correlation=corBM2)
summary(pgls_mt_not_fly)
pgls_mt_not_fly = gls(Mutation_CT~ability_to_fly,
data=df_fly_not1,correlation=corBM2)
summary(pgls_mt_not_fly)
pgls_mt_not_fly = gls(Mutation_CT_syn~ability_to_fly,
data=df_fly_not1,correlation=corBM2)
summary(pgls_mt_not_fly)
rm(list = ls(all=TRUE))
library(ape)
library(phangorn)
library(phytools)
library(geiger)
#birds_tree<-read.tree(file="../../2Scripts/PCM_in_R_implementations/anc_kg.treefile")
df_mtdna = read.csv('Birds_dataset_paper.csv')
df_realms = unique(df_mtdna[,c('species_name', 'realm')])
df_realms$species_name = gsub(' ', '_', df_realms$species_name)
#df_char3 = merge(df_char1, df_char2)
#df_char1$species_name = gsub(' ', '_', df_char1$species_name)
#df_char3$species_name = gsub(' ', '_', df_char3$species_name)
#df_char3 = na.omit(df_char3)
#need_species = setdiff(df_char1$species_name, df_char3$species_name)
#correct_need_species = setdiff(df_char1$species_name, need_species)
#temp_tree<-keep.tip(birds_tree,correct_need_species)
#temp_tree
#write.tree(temp_tree ,file="temperature_birds_tree.tre")
#write.csv(df_char3, 'birds_metrics.csv')
df_temp_fly = read.csv('birds_metrics.csv')
rownames(df_temp_fly) = df_temp_fly$species_name
df_flight_names = read.csv('flight_and_gene.csv')
df_flight_names = df_flight_names[,c(2:3)]
df_flight_names = merge(df_flight_names, df_realms)
rownames(df_flight_names) = df_flight_names$species_name
df_temp_fly = df_temp_fly[,c(2:17)]
df_temp_fly = merge(df_temp_fly, df_flight_names)
rownames(df_temp_fly) = df_temp_fly$species_name
temp_tree = read.tree('flight_and_temp.tre')
df_temp_fly$Latitude = gsub(',', '.', df_temp_fly$Latitude)
df_temp_fly$AnnualTemp = gsub(',', '.', df_temp_fly$AnnualTemp)
df_temp_fly$TempRange = gsub(',', '.', df_temp_fly$TempRange)
df_temp_fly$AnnualPrecip = gsub(',', '.', df_temp_fly$AnnualPrecip)
df_temp_fly$PrecipRange= gsub(',', '.', df_temp_fly$PrecipRange)
df_temp_fly$Beak_length_Culmen = as.numeric(as.character(df_temp_fly$Beak_length_Culmen))
df_temp_fly$Beak_length_Nares = as.numeric(as.character(df_temp_fly$Beak_length_Nares))
df_temp_fly$Beak_width = as.numeric(as.character(df_temp_fly$Beak_width))
df_temp_fly$Beak_depth = as.numeric(as.character(df_temp_fly$Beak_depth))
df_temp_fly$Tarsus_length = as.numeric(as.character(df_temp_fly$Tarsus_length))
df_temp_fly$Wing_length = as.numeric(as.character(df_temp_fly$Wing_length))
df_temp_fly$Kipps_distance = as.numeric(as.character(df_temp_fly$Kipps_distance))
df_temp_fly$Hand_wing_index = as.numeric(as.character(df_temp_fly$Hand_wing_index))
df_temp_fly$Tail_length = as.numeric(as.character(df_temp_fly$Tail_length))
df_temp_fly$Mass = as.numeric(as.character(df_temp_fly$Mass))
df_temp_fly$Latitude = as.numeric(as.character(df_temp_fly$Latitude))
df_temp_fly$AnnualTemp = as.numeric(as.character(df_temp_fly$AnnualTemp))
df_temp_fly$TempRange = as.numeric(as.character(df_temp_fly$TempRange))
df_temp_fly$AnnualPrecip = as.numeric(as.character(df_temp_fly$AnnualPrecip))
df_temp_fly$PrecipRange = as.numeric(as.character(df_temp_fly$PrecipRange))
df_temp_fly$Beak_length_Culmen = log10(df_temp_fly$Beak_length_Culmen)
df_temp_fly$Beak_length_Nares = log10(df_temp_fly$Beak_length_Nares)
df_temp_fly$Beak_width = log10(df_temp_fly$Beak_width)
df_temp_fly$Beak_depth = log10(df_temp_fly$Beak_depth)
df_temp_fly$Tarsus_length = log10(df_temp_fly$Tarsus_length)
df_temp_fly$Wing_length = log10(df_temp_fly$Wing_length)
df_temp_fly$Kipps_distance = log10(df_temp_fly$Kipps_distance)
df_temp_fly$Hand_wing_index = log10(df_temp_fly$Hand_wing_index)
df_temp_fly$Tail_length = log10(df_temp_fly$Tail_length)
df_temp_fly$Mass = log10(df_temp_fly$Mass)
df_temp_fly$TempRange = log10(df_temp_fly$TempRange)
df_temp_fly$AnnualPrecip = log10(df_temp_fly$AnnualPrecip)
df_temp_fly$PrecipRange = log10(df_temp_fly$PrecipRange)
View(df_temp_fly)
#adding everything to PCA
df_flight = read.csv('flight_and_gene.csv')
View(df_flight)
View(df_flight_names)
View(df_flight_names)
View(df_flight_names)
View(df_flight)
df_flight = df_flight[,c(2,4,5,6)]
df_temp_fly = merge(df_temp_fly, df_flight)
View(df_temp_fly)
df_mutspec = read.table('C:/Users/User/Desktop/mutspec12.tsv', header = TRUE, fill = TRUE)
df_ff = df_mutspec[df_mutspec$Label == 'ff',]
df_syn = df_mutspec[df_mutspec$Label == 'syn',]
df_ff = df_ff[!grepl('Node', df_ff$AltNode),]
df_ff = df_ff[,c(1,5,7)]
df_ff1 = reshape(data = df_ff, idvar = 'AltNode',
timevar = 'Mut',
direction = 'wide')
names(df_ff1) = c('species_name', 'Mutation_TG', 'Mutation_TC', 'Mutation_TA', 'Mutation_GT', 'Mutation_GC',
'Mutation_GA', 'Mutation_CT', 'Mutation_CG', 'Mutation_CA', 'Mutation_AT', 'Mutation_AG', 'Mutation_AC')
df_syn = df_syn[!grepl('Node', df_syn$AltNode),]
df_syn = df_syn[,c(1,5,7)]
df_syn1 = reshape(data = df_syn, idvar = 'AltNode',
timevar = 'Mut',
direction = 'wide')
names(df_syn1) = c('species_name', 'Mutation_TG_syn', 'Mutation_TC_syn', 'Mutation_TA_syn', 'Mutation_GT_syn', 'Mutation_GC_syn',
'Mutation_GA_syn', 'Mutation_CT_syn', 'Mutation_CG_syn', 'Mutation_CA_syn', 'Mutation_AT_syn', 'Mutation_AG_syn', 'Mutation_AC_syn')
View(df_syn1)
df_temp_fly = merge(df_temp_fly, df_ff1)
df_temp_fly = merge(df_temp_fly, df_syn1)
rm(list = ls(all=TRUE))
#birds_tree<-read.tree(file="../../2Scripts/PCM_in_R_implementations/anc_kg.treefile")
df_mtdna = read.csv('Birds_dataset_paper.csv')
df_realms = unique(df_mtdna[,c('species_name', 'realm')])
df_realms$species_name = gsub(' ', '_', df_realms$species_name)
#df_char3 = merge(df_char1, df_char2)
#df_char1$species_name = gsub(' ', '_', df_char1$species_name)
#df_char3$species_name = gsub(' ', '_', df_char3$species_name)
#df_char3 = na.omit(df_char3)
#need_species = setdiff(df_char1$species_name, df_char3$species_name)
#correct_need_species = setdiff(df_char1$species_name, need_species)
#temp_tree<-keep.tip(birds_tree,correct_need_species)
#temp_tree
#write.tree(temp_tree ,file="temperature_birds_tree.tre")
#write.csv(df_char3, 'birds_metrics.csv')
df_temp_fly = read.csv('birds_metrics.csv')
rownames(df_temp_fly) = df_temp_fly$species_name
df_flight_names = read.csv('flight_and_gene.csv')
df_flight_names = df_flight_names[,c(2:3)]
df_flight_names = merge(df_flight_names, df_realms)
rownames(df_flight_names) = df_flight_names$species_name
df_temp_fly = df_temp_fly[,c(2:17)]
df_temp_fly = merge(df_temp_fly, df_flight_names)
rownames(df_temp_fly) = df_temp_fly$species_name
temp_tree = read.tree('flight_and_temp.tre')
df_temp_fly$Latitude = gsub(',', '.', df_temp_fly$Latitude)
df_temp_fly$AnnualTemp = gsub(',', '.', df_temp_fly$AnnualTemp)
df_temp_fly$TempRange = gsub(',', '.', df_temp_fly$TempRange)
df_temp_fly$AnnualPrecip = gsub(',', '.', df_temp_fly$AnnualPrecip)
df_temp_fly$PrecipRange= gsub(',', '.', df_temp_fly$PrecipRange)
df_temp_fly$Beak_length_Culmen = as.numeric(as.character(df_temp_fly$Beak_length_Culmen))
df_temp_fly$Beak_length_Nares = as.numeric(as.character(df_temp_fly$Beak_length_Nares))
df_temp_fly$Beak_width = as.numeric(as.character(df_temp_fly$Beak_width))
df_temp_fly$Beak_depth = as.numeric(as.character(df_temp_fly$Beak_depth))
df_temp_fly$Tarsus_length = as.numeric(as.character(df_temp_fly$Tarsus_length))
df_temp_fly$Wing_length = as.numeric(as.character(df_temp_fly$Wing_length))
df_temp_fly$Kipps_distance = as.numeric(as.character(df_temp_fly$Kipps_distance))
df_temp_fly$Hand_wing_index = as.numeric(as.character(df_temp_fly$Hand_wing_index))
df_temp_fly$Tail_length = as.numeric(as.character(df_temp_fly$Tail_length))
df_temp_fly$Mass = as.numeric(as.character(df_temp_fly$Mass))
df_temp_fly$Latitude = as.numeric(as.character(df_temp_fly$Latitude))
df_temp_fly$AnnualTemp = as.numeric(as.character(df_temp_fly$AnnualTemp))
df_temp_fly$TempRange = as.numeric(as.character(df_temp_fly$TempRange))
df_temp_fly$AnnualPrecip = as.numeric(as.character(df_temp_fly$AnnualPrecip))
df_temp_fly$PrecipRange = as.numeric(as.character(df_temp_fly$PrecipRange))
df_temp_fly$Beak_length_Culmen = log10(df_temp_fly$Beak_length_Culmen)
df_temp_fly$Beak_length_Nares = log10(df_temp_fly$Beak_length_Nares)
df_temp_fly$Beak_width = log10(df_temp_fly$Beak_width)
df_temp_fly$Beak_depth = log10(df_temp_fly$Beak_depth)
df_temp_fly$Tarsus_length = log10(df_temp_fly$Tarsus_length)
df_temp_fly$Wing_length = log10(df_temp_fly$Wing_length)
df_temp_fly$Kipps_distance = log10(df_temp_fly$Kipps_distance)
df_temp_fly$Hand_wing_index = log10(df_temp_fly$Hand_wing_index)
df_temp_fly$Tail_length = log10(df_temp_fly$Tail_length)
df_temp_fly$Mass = log10(df_temp_fly$Mass)
df_temp_fly$TempRange = log10(df_temp_fly$TempRange)
df_temp_fly$AnnualPrecip = log10(df_temp_fly$AnnualPrecip)
df_temp_fly$PrecipRange = log10(df_temp_fly$PrecipRange)
#adding everything to PCA
df_flight = read.csv('flight_and_gene.csv')
df_flight = df_flight[,c(2,4,5,6)]
df_temp_fly = merge(df_temp_fly, df_flight)
df_mutspec = read.table('C:/Users/User/Desktop/mutspec12.tsv', header = TRUE, fill = TRUE)
df_ff = df_mutspec[df_mutspec$Label == 'ff',]
df_syn = df_mutspec[df_mutspec$Label == 'syn',]
df_ff = df_ff[!grepl('Node', df_ff$AltNode),]
df_ff = df_ff[,c(1,5,7)]
df_ff1 = reshape(data = df_ff, idvar = 'AltNode',
timevar = 'Mut',
direction = 'wide')
names(df_ff1) = c('species_name', 'Mutation_TG', 'Mutation_TC', 'Mutation_TA', 'Mutation_GT', 'Mutation_GC',
'Mutation_GA', 'Mutation_CT', 'Mutation_CG', 'Mutation_CA', 'Mutation_AT', 'Mutation_AG', 'Mutation_AC')
df_syn = df_syn[!grepl('Node', df_syn$AltNode),]
df_syn = df_syn[,c(1,5,7)]
df_syn1 = reshape(data = df_syn, idvar = 'AltNode',
timevar = 'Mut',
direction = 'wide')
names(df_syn1) = c('species_name', 'Mutation_TG_syn', 'Mutation_TC_syn', 'Mutation_TA_syn', 'Mutation_GT_syn', 'Mutation_GC_syn',
'Mutation_GA_syn', 'Mutation_CT_syn', 'Mutation_CG_syn', 'Mutation_CA_syn', 'Mutation_AT_syn', 'Mutation_AG_syn', 'Mutation_AC_syn')
df_temp_fly1 = merge(df_temp_fly, df_ff1)
df_temp_fly1 = merge(df_temp_fly, df_syn1)
need_species = setdiff(df_fly_peng$species_name, df_fly_peng1$species_name)
correct_need_species = setdiff(df_fly_peng$species_name, need_species)
need_species = setdiff(df_temp_fly$species_name, df_temp_fly1$species_name)
correct_need_species = setdiff(df_temp_fly$species_name, need_species)
big_data_tree1<-keep.tip(temp_tree,correct_need_species)
View(big_data_tree1)
View(df_temp_fly1)
df_temp_fly1 = merge(df_temp_fly, df_ff1)
df_temp_fly1 = merge(df_temp_fly1, df_syn1)
df_temp_fly1$GhAhSkew = as.numeric(as.character(df_temp_fly1$GhAhSkew))
df_temp_fly1$fAn = as.numeric(as.character(df_temp_fly1$fAn))
df_temp_fly1$fGn = as.numeric(as.character(df_temp_fly1$fGn))
df_temp_fly1$Mutation_TG = as.numeric(as.character(df_temp_fly1$Mutation_TG))
df_temp_fly1$Mutation_TC = as.numeric(as.character(df_temp_fly1$Mutation_TC))
df_temp_fly1$Mutation_TA = as.numeric(as.character(df_temp_fly1$Mutation_TA))
df_temp_fly1$Mutation_GT = as.numeric(as.character(df_temp_fly1$Mutation_GT))
df_temp_fly1$Mutation_GA = as.numeric(as.character(df_temp_fly1$Mutation_GA))
df_temp_fly1$Mutation_GC = as.numeric(as.character(df_temp_fly1$Mutation_GC))
df_temp_fly1$Mutation_CT = as.numeric(as.character(df_temp_fly1$Mutation_CT))
df_temp_fly1$Mutation_CG = as.numeric(as.character(df_temp_fly1$Mutation_CG))
df_temp_fly1$Mutation_CA = as.numeric(as.character(df_temp_fly1$Mutation_CA))
df_temp_fly1$Mutation_AT = as.numeric(as.character(df_temp_fly1$Mutation_AT))
df_temp_fly1$Mutation_AG = as.numeric(as.character(df_temp_fly1$Mutation_AG))
df_temp_fly1$Mutation_AC = as.numeric(as.character(df_temp_fly1$Mutation_AC))
df_temp_fly1$Mutation_TG_syn = as.numeric(as.character(df_temp_fly1$Mutation_TG_syn))
df_temp_fly1$Mutation_TC_syn = as.numeric(as.character(df_temp_fly1$Mutation_TC_syn))
df_temp_fly1$Mutation_TA_syn = as.numeric(as.character(df_temp_fly1$Mutation_TA_syn))
df_temp_fly1$Mutation_GT_syn = as.numeric(as.character(df_temp_fly1$Mutation_GT_syn))
df_temp_fly1$Mutation_GA_syn = as.numeric(as.character(df_temp_fly1$Mutation_GA_syn))
df_temp_fly1$Mutation_GC_syn = as.numeric(as.character(df_temp_fly1$Mutation_GC_syn))
df_temp_fly1$Mutation_CT_syn = as.numeric(as.character(df_temp_fly1$Mutation_CT_syn))
df_temp_fly1$Mutation_CG_syn = as.numeric(as.character(df_temp_fly1$Mutation_CG_syn))
df_temp_fly1$Mutation_CA_syn = as.numeric(as.character(df_temp_fly1$Mutation_CA_syn))
df_temp_fly1$Mutation_AT_syn = as.numeric(as.character(df_temp_fly1$Mutation_AT_syn))
df_temp_fly1$Mutation_AG_syn = as.numeric(as.character(df_temp_fly1$Mutation_AG_syn))
df_temp_fly1$Mutation_AC_syn = as.numeric(as.character(df_temp_fly1$Mutation_AC_syn))
#SET ALMOST EVERYTHING TO LOG10
temp_birds_pca<-phyl.pca(big_data_tree1,df_temp_fly1[,c(2:16, 19:33)])
row.names(df_temp_fly1) = df_temp_fly1$species_name
#SET ALMOST EVERYTHING TO LOG10
temp_birds_pca<-phyl.pca(big_data_tree1,df_temp_fly1[,c(2:16, 19:33)])
warning()
warnings()
#SET ALMOST EVERYTHING TO LOG10
temp_birds_pca<-phyl.pca(big_data_tree1,df_temp_fly1[,c(2:16, 19:45)])
par(mar=c(4.1,4.1,2.1,1.1),las=1) ## set margins
plot(temp_birds_pca,main="")
par(cex.axis=0.8,mar=c(5.1,5.1,1.1,1.1))
phylomorphospace(big_data_tree1,
scores(temp_birds_pca)[,1:2],
ftype="off",node.size=c(0,1),bty="n",las=1,
xlab="PC1",
ylab="PC2")
View(temp_birds_pca)
#color legend!!!! do later
df_temp_fly1$ability_to_fly = as.factor(df_temp_fly1$ability_to_fly)
df_temp_fly1$species_name = as.factor(df_temp_fly1$species_name)
df_temp_fly1$realm = as.factor(df_temp_fly1$realm)
eco<-setNames(df_temp_fly1[,17],rownames(df_temp_fly1))
ECO<-to.matrix(eco,levels(eco))
tiplabels(pie=ECO[big_data_tree1$tip.label,],cex=0.3)
legend(x="topright",legend=levels(eco),cex=0.6,pch=21,
pt.bg=rainbow(n=length(levels(eco))),pt.cex=1.5)
legend(x="topright",legend=levels(eco),cex=0.5,pch=21,
pt.bg=rainbow(n=length(levels(eco))),pt.cex=1.5)
phylomorphospace(big_data_tree1,
scores(temp_birds_pca)[,1:2],
ftype="off",node.size=c(0,1),bty="n",las=1,
xlab="PC1",
ylab="PC2")
#color legend!!!! do later
df_temp_fly1$ability_to_fly = as.factor(df_temp_fly1$ability_to_fly)
df_temp_fly1$species_name = as.factor(df_temp_fly1$species_name)
df_temp_fly1$realm = as.factor(df_temp_fly1$realm)
eco<-setNames(df_temp_fly1[,17],rownames(df_temp_fly1))
ECO<-to.matrix(eco,levels(eco))
tiplabels(pie=ECO[big_data_tree1$tip.label,],cex=0.3)
legend(x="topright",legend=levels(eco),cex=0.5,pch=21,
pt.bg=rainbow(n=length(levels(eco))),pt.cex=1.5)
a = as.data.frame(temp_birds_pca$S)
View(a)
phylomorphospace(big_data_tree1,
scores(temp_birds_pca)[,3:4],
ftype="off",node.size=c(0,1),bty="n",las=1,
xlab="PC1",
ylab="PC2")
#color legend!!!! do later
df_temp_fly1$ability_to_fly = as.factor(df_temp_fly1$ability_to_fly)
df_temp_fly1$species_name = as.factor(df_temp_fly1$species_name)
df_temp_fly1$realm = as.factor(df_temp_fly1$realm)
eco<-setNames(df_temp_fly1[,17],rownames(df_temp_fly1))
ECO<-to.matrix(eco,levels(eco))
tiplabels(pie=ECO[big_data_tree1$tip.label,],cex=0.3)
View(df_temp_fly1)
#SET ALMOST EVERYTHING TO LOG10
temp_birds_pca<-phyl.pca(big_data_tree1,df_temp_fly1[,c(2:11, 13:16, 19:45)])
par(mar=c(4.1,4.1,2.1,1.1),las=1) ## set margins
plot(temp_birds_pca,main="")
par(cex.axis=0.8,mar=c(5.1,5.1,1.1,1.1))
phylomorphospace(big_data_tree1,
scores(temp_birds_pca)[,1:2],
ftype="off",node.size=c(0,1),bty="n",las=1,
xlab="PC1",
ylab="PC2")
#color legend!!!! do later
df_temp_fly1$ability_to_fly = as.factor(df_temp_fly1$ability_to_fly)
df_temp_fly1$species_name = as.factor(df_temp_fly1$species_name)
df_temp_fly1$realm = as.factor(df_temp_fly1$realm)
eco<-setNames(df_temp_fly1[,17],rownames(df_temp_fly1))
ECO<-to.matrix(eco,levels(eco))
tiplabels(pie=ECO[big_data_tree1$tip.label,],cex=0.3)
legend(x="topleft",legend=levels(eco),cex=0.5,pch=21,
pt.bg=rainbow(n=length(levels(eco))),pt.cex=1.5)
rm(list = ls(all=TRUE))
