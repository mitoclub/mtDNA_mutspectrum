df = read.table("../../Body/3Results/Birds codus + neutral.csv", header = TRUE, sep = ',') #opening dirty dataset
for (i in unique(nal$Species.name))
{
df = df[!(df$Species.name == i),]
}
unique(df$Gene.name)
rm(list = ls(all.names = TRUE))
gc()
df = read.table("../../Body/3Results/Birds codus + neutral.csv", header = TRUE, sep = ',') #opening dirty dataset
df1 = df[df$wrong.amino..==0,]
df1$temp = 1
df2 = aggregate(df1$temp,by = list(df1$Species.name), FUN = sum)
df3 = df2[df2$x != 13,] #checking wrong birds
df4 = df2[df2$x == 13,] #checking right birds
unique(df$Gene.name)#looking for wrong gene names
which(df == "[cytb]", arr.ind=TRUE) #looking for positions
df[11264, "Gene.name"] = "[CYTB]"
df[11277, "Gene.name"] = "[CYTB]"
df[11290, "Gene.name"] = "[CYTB]"
df[11303, "Gene.name"] = "[CYTB]"
df[11316, "Gene.name"] = "[CYTB]"
which(df == "[COXI]", arr.ind=TRUE) #looking for positions
df[10969, "Gene.name"] = "[COX1]"
which(df == "[COXII]", arr.ind=TRUE) #looking for positions
df[10970, "Gene.name"] = "[COX2]"
which(df == "[COXIII]", arr.ind=TRUE) #looking for positions
df[10973, "Gene.name"] = "[COX3]"
#NA deleting
nal = df[is.na(df$Gene.name),] #24 birds
for (i in unique(nal$Species.name))
{
df = df[!(df$Species.name == i),]
}
unique(df$Gene.name)
write.table(df, file = "../../Body/3Results/Golden birds dataset.csv", sep = ',', row.names = FALSE, quote = FALSE)
aaa = read.table("../../Body/3Results/Birds codus + neutral.csv", header = TRUE, sep = ',')
aaa = read.table("../../Body/3Results/Golden birds dataset.csv", header = TRUE, sep = ',')
View(df)
aaa = read.table("../../Body/3Results/Golden birds dataset.csv", header = TRUE, sep = ',')
View(df)
df$Wrong.nucl.num
aaa = read.csv("../../Body/3Results/Golden birds dataset.csv", header = TRUE, sep = ',')
rm(aaa)
aaa = read.csv("../../Body/3Results/Golden birds dataset.csv", header = TRUE, sep = ',')
aaa = read.table("../../Body/3Results/Golden birds dataset.csv", header = TRUE, sep = ',')
rm(list = ls(all.names = TRUE))
gc()
df = read.table("../../Body/3Results/Golden birds dataset.csv", header = TRUE, sep = ',') #supplements materials
rm(list = ls(all.names = TRUE))
gc()
df = read.table("../../Body/3Results/Birds codus + neutral.csv", header = TRUE, sep = ',') #opening dirty dataset
df1 = df[df$wrong.amino..==0,]
df1$temp = 1
df2 = aggregate(df1$temp,by = list(df1$Species.name), FUN = sum)
df3 = df2[df2$x != 13,] #checking wrong birds
df4 = df2[df2$x == 13,] #checking right birds
unique(df$Gene.name)#looking for wrong gene names
which(df == "[cytb]", arr.ind=TRUE) #looking for positions
df[11264, "Gene.name"] = "[CYTB]"
df[11277, "Gene.name"] = "[CYTB]"
df[11290, "Gene.name"] = "[CYTB]"
df[11303, "Gene.name"] = "[CYTB]"
df[11316, "Gene.name"] = "[CYTB]"
which(df == "[COXI]", arr.ind=TRUE) #looking for positions
df[10969, "Gene.name"] = "[COX1]"
which(df == "[COXII]", arr.ind=TRUE) #looking for positions
df[10970, "Gene.name"] = "[COX2]"
which(df == "[COXIII]", arr.ind=TRUE) #looking for positions
df[10973, "Gene.name"] = "[COX3]"
#NA deleting
nal = df[is.na(df$Gene.name),] #24 birds
for (i in unique(nal$Species.name)) #removing NA birds
{
df = df[!(df$Species.name == i),]
}
unique(df$Gene.name) #checking
View(df)
View(df)
View(df)
rm(list = ls(all.names = TRUE))
gc()
df = read.table("../../Body/3Results/Birds supplementary materials.csv", header = TRUE, sep = ',') #supplements materials
df = read.table("../../Body/3Results/Birds supplementary materials.xlsx", header = TRUE, sep = ',') #supplements materials
View(df)
df = read.table("../../Body/3Results/Birds supplementary materials - DatabaseS1.csv", header = TRUE, sep = ',') #supplements materials
View(df)
rm(list = ls(all.names = TRUE))
gc()
sup = read.table("../../Body/3Results/Birds supplementary materials - DatabaseS1.csv", header = TRUE, sep = ',') #supplements materials
rm(list = ls(all.names = TRUE))
gc()
df = read.table("../../Body/3Results/Birds codus + neutral.csv", header = TRUE, sep = ',') #opening dirty dataset
df1 = df[df$wrong.amino..==0,]
df1$temp = 1
df2 = aggregate(df1$temp,by = list(df1$Species.name), FUN = sum)
df3 = df2[df2$x != 13,] #checking wrong birds
df4 = df2[df2$x == 13,] #checking right birds
unique(df$Gene.name)#looking for wrong gene names
which(df == "[cytb]", arr.ind=TRUE) #looking for positions
df[11264, "Gene.name"] = "[CYTB]"
df[11277, "Gene.name"] = "[CYTB]"
df[11290, "Gene.name"] = "[CYTB]"
df[11303, "Gene.name"] = "[CYTB]"
df[11316, "Gene.name"] = "[CYTB]"
which(df == "[COXI]", arr.ind=TRUE) #looking for positions
df[10969, "Gene.name"] = "[COX1]"
which(df == "[COXII]", arr.ind=TRUE) #looking for positions
df[10970, "Gene.name"] = "[COX2]"
which(df == "[COXIII]", arr.ind=TRUE) #looking for positions
df[10973, "Gene.name"] = "[COX3]"
#NA deleting
nal = df[is.na(df$Gene.name),] #24 birds
for (i in unique(nal$Species.name)) #removing NA birds
{
df = df[!(df$Species.name == i),]
}
unique(df$Gene.name) #checking
View(df)
summary(df)
table(df)
df
write.csv(df, file = "../../Body/3Results/Golden birds dataset.csv", sep = ',', row.names = FALSE, quote = FALSE)
gold = read.table("../../Body/3Results/Golden birds dataset.csv", header = TRUE, sep = ',') #reading golden dataset
View(df)
df = read.table("../../Body/3Results/Birds codus + neutral.csv", header = TRUE, sep = ',') #opening dirty dataset
df1 = df[df$wrong.amino..==0,]
df1$temp = 1
df2 = aggregate(df1$temp,by = list(df1$Species.name), FUN = sum)
df3 = df2[df2$x != 13,] #checking wrong birds
df4 = df2[df2$x == 13,] #checking right birds
unique(df$Gene.name)#looking for wrong gene names
which(df == "[cytb]", arr.ind=TRUE) #looking for positions
df[11264, "Gene.name"] = "[CYTB]"
df[11277, "Gene.name"] = "[CYTB]"
df[11290, "Gene.name"] = "[CYTB]"
df[11303, "Gene.name"] = "[CYTB]"
df[11316, "Gene.name"] = "[CYTB]"
which(df == "[COXI]", arr.ind=TRUE) #looking for positions
df[10969, "Gene.name"] = "[COX1]"
which(df == "[COXII]", arr.ind=TRUE) #looking for positions
df[10970, "Gene.name"] = "[COX2]"
which(df == "[COXIII]", arr.ind=TRUE) #looking for positions
df[10973, "Gene.name"] = "[COX3]"
#NA deleting
nal = df[is.na(df$Gene.name),] #24 birds
View(df4)
View(nal)
which(is.na(df), arr.ind=TRUE)
View(df)
for (i in unique(nal$Species.name)) #removing NA birds
{
df = df[!(df$Species.name == i),]
}
gold = read.table("../../Body/3Results/Golden birds dataset.csv", header = TRUE, sep = ',') #reading golden dataset
View(nal)
write.csv(df, file = "../../Body/3Results/Golden birds dataset.csv", sep = ',', row.names = FALSE)
gold = read.table("../../Body/3Results/Golden birds dataset.csv", header = TRUE, sep = ',') #reading golden dataset
rm(list = ls(all.names = TRUE))
gc()
sup = read.table("../../Body/3Results/Birds supplementary materials - DatabaseS1.csv", header = TRUE, sep = ',') #supplements materials
gold = read.table("../../Body/3Results/Golden birds dataset.csv", header = TRUE, sep = ',') #reading golden dataset
View(sup)
clsup = table(sup$Binomial, sup$Realm, sup$TrophicLevel, sup$TrophicNiche, sup$ForagingNiche)
clsup = table(c(sup$Binomial, sup$Realm, sup$TrophicLevel, sup$TrophicNiche, sup$ForagingNiche))
clsup = data.frame(c(sup$Binomial, sup$Realm, sup$TrophicLevel, sup$TrophicNiche, sup$ForagingNiche))
View(clsup)
clsup = data.frame(sup$Binomial, sup$Realm, sup$TrophicLevel, sup$TrophicNiche, sup$ForagingNiche)
View(clsup)
brds = data.frame(gold$Species.name)
View(clsup)
View(brds)
View(brds)
View(gold)
View(sup)
names(clsup) = c('Species.name','Realm', 'TrophicLevel', 'TrophicNiche', 'ForagingNiche')
names(brds) = c('Species.name')
brds_clsup = merge(clsup, brds)
View(brds_clsup)
clsup$Species.name = gsub("_", " ", clsup$Species.name)
brds_clsup = merge(clsup, brds)
View(brds)
View(brds_clsup)
brds_clsup = merge(clsup, gold)
install.packages('ggplot2')
library('ggplot2')
ggplot(data = brds_clsup, aes(x = brds_clsup$TrophicLevel, y = brds_clsup$neutralA))+
geom_boxplot()
ggplot(data = brds_clsup, aes(x = TrophicLevel, y = neutralA))+
geom_boxplot()
ggplot(data = brds_clsup, aes(x = TrophicLevel, y = neutralG))+
geom_boxplot()
ggplot(data = brds_clsup, aes(x = Gene.name, y = neutralA))+
geom_boxplot()
ggplot(data = brds_clsup, aes(x = Gene.name, y = neutralG))+
geom_boxplot()
ggplot(data = brds_clsup, aes(x = Gene.name, y = neutralT))+
geom_boxplot()
ggplot(data = brds_clsup, aes(x = Gene.name, y = neutralC))+
geom_boxplot()
ggplot(data = brds_clsup, aes(x = Gene.name, y = neutralT))+
geom_boxplot()
big_gr = ggplot(data = brds_clsup, aes(x = Gene.name, y = neutralA))+
geom_boxplot()
View(big_gr)
big_gr
big_gr = ggplot(data = brds_clsup, aes(x = Gene.name, y = neutralA))+
geom_boxplot()
big_gr = big_gr +ggplot(data = brds_clsup, aes(x = Gene.name, y = neutralG))+
geom_boxplot()
big_gr = big_gr +ggplot(data = brds_clsup, aes(x = Gene.name, y = neutralC))+
geom_boxplot()
big_gr = big_gr + ggplot(data = brds_clsup, aes(x = Gene.name, y = neutralT))+
geom_boxplot()
big_gr
rm(big_gr)
#comparing neutral nucleotides in genes
ggplot(data = brds_clsup, aes(x = Gene.name, y = neutralA))+
geom_boxplot()
ggplot(data = brds_clsup, aes(x = Gene.name, y = neutralG))+
geom_boxplot()
ggplot(data = brds_clsup, aes(x = Gene.name, y = neutralC))+
geom_boxplot()
#comparing neutral nucleotides in genes
ggplot(data = brds_clsup, aes(x = Gene.name, y = neutralA))+
geom_boxplot()
ggplot(data = brds_clsup, aes(x = Gene.name, y = neutralG))+
geom_boxplot()
ggplot(data = brds_clsup, aes(x = Gene.name, y = neutralC))+
geom_boxplot()
ggplot(data = brds_clsup, aes(x = Gene.name, y = neutralT))+
geom_boxplot()
ggplot(data = brds_clsup, aes(x = Gene.name, y = neutralT))+
geom_boxplot(notch = TRUE)
#comparing neutral nucleotides in genes
ggplot(data = brds_clsup, aes(x = Gene.name, y = neutralA))+
geom_boxplot(notch = TRUE)
ggplot(data = brds_clsup, aes(x = Gene.name, y = neutralG))+
geom_boxplot(notch = TRUE)
ggplot(data = brds_clsup, aes(x = Gene.name, y = neutralC))+
geom_boxplot(notch = TRUE)
ggplot(data = brds_clsup, aes(x = Gene.name, y = neutralT))+
geom_boxplot(notch = TRUE)
library('ggplot2')
#comparing neutral nucleotides in genes
ggplot(data = brds_clsup, aes(x = Gene.name, y = neutralA))+
geom_boxplot(notch = TRUE)
ggplot(data = brds_clsup, aes(x = Gene.name, y = neutralG))+
geom_boxplot(notch = TRUE)
#comparing neutral nucleotides in genes
ggplot(data = brds_clsup, aes(x = Gene.name, y = neutralA))+
geom_boxplot(notch = TRUE)
ggplot(data = brds_clsup, aes(x = Gene.name, y = neutralG))+
geom_boxplot(notch = TRUE)
ggplot(data = brds_clsup, aes(x = Gene.name, y = neutralC))+
geom_boxplot(notch = TRUE)
ggplot(data = brds_clsup, aes(x = Gene.name, y = neutralT))+
geom_boxplot(notch = TRUE)
View(brds_clsup)
ggplot(data = brds_clsup, aes(x = Gene.name, y = neutralA))+
geom_boxplot(aes(fill = TrophicLevel), notch = TRUE)
brds_clsup$Gene.name
ggplot(data = brds_clsup, aes(x = c("[COX1]", "[COX2]", "[ATP8]", "[ATP6]", "[COX3]", "[ND3]", "[ND4L]",
"[ND4]", "[ND5]", "[CYTB]"), y = neutralA))+
geom_boxplot(aes(fill = TrophicLevel), notch = TRUE)
ggplot(data = brds_clsup, aes(x = c("[COX1]", "[COX2]", "[ATP8]", "[ATP6]", "[COX3]", "[ND3]", "[ND4L]","[ND4]", "[ND5]", "[CYTB]"), y = neutralA))+
geom_boxplot(aes(fill = TrophicLevel), notch = TRUE)
ggplot(data = brds_clsup, aes(x = Gene.name , y = neutralA))+
geom_boxplot(aes(fill = TrophicLevel), notch = TRUE)
library('ggplot2')
ggplot(data = brds_clsup, aes(x = Gene.name , y = neutralA))+
geom_boxplot(aes(fill = TrophicLevel), notch = TRUE)
work = c(brds_clsup$Gene.name)
order(work)
work = c(unique(brds_clsup$Gene.name))
order(work)
work
rm(work)
ggplot(data = brds_clsup, aes(x = Gene.name , y = neutralA))+
geom_boxplot(aes(fill = TrophicLevel), notch = TRUE, )+
scale_x_discrete(limits = c("[COX1]","[COX2]","[ATP8]","[ATP6]","[COX3]"), "[ND3]", "[ND4L]","[ND4]","[ND5]","[CYTB]","[ND6]")
ggplot(data = brds_clsup, aes(x = Gene.name , y = neutralA))+
geom_boxplot(aes(fill = TrophicLevel), notch = TRUE, )+
scale_x_binned(limits = c("[COX1]","[COX2]","[ATP8]","[ATP6]","[COX3]"), "[ND3]", "[ND4L]","[ND4]","[ND5]","[CYTB]","[ND6]")
ggplot(data = brds_clsup, aes(x = Gene.name , y = neutralA))+
geom_boxplot(aes(fill = TrophicLevel), notch = TRUE, )+
scale_x_continuous(limits = c("[COX1]","[COX2]","[ATP8]","[ATP6]","[COX3]"), "[ND3]", "[ND4L]","[ND4]","[ND5]","[CYTB]","[ND6]")
ggplot(data = brds_clsup, aes(x = Gene.name , y = neutralA))+
geom_boxplot(aes(fill = TrophicLevel), notch = TRUE, )+
scale_x_date(limits = c("[COX1]","[COX2]","[ATP8]","[ATP6]","[COX3]"), "[ND3]", "[ND4L]","[ND4]","[ND5]","[CYTB]","[ND6]")
ggplot(data = brds_clsup, aes(x = Gene.name , y = neutralA))+
geom_boxplot(aes(fill = TrophicLevel), notch = TRUE, )+
scale_x_reverse(limits = c("[COX1]","[COX2]","[ATP8]","[ATP6]","[COX3]"), "[ND3]", "[ND4L]","[ND4]","[ND5]","[CYTB]","[ND6]")
ggplot(data = brds_clsup, aes(x = order(Gene.name,c("[COX1]","[COX2]","[ATP8]","[ATP6]","[COX3]", "[ND3]", "[ND4L]","[ND4]","[ND5]","[CYTB]","[ND6]")), y = neutralA))+
geom_boxplot(aes(fill = TrophicLevel), notch = TRUE)
ggplot(data = brds_clsup, aes(x = Gene.name, y = neutralA))+
geom_boxplot(aes(fill = TrophicLevel, order(x, c("[COX1]","[COX2]","[ATP8]","[ATP6]","[COX3]", "[ND3]", "[ND4L]","[ND4]","[ND5]","[CYTB]","[ND6]"))), notch = TRUE)
ggplot(data = brds_clsup, aes(x = Gene.name, y = neutralA))+
geom_boxplot(aes(fill = TrophicLevel, order(Gene.name, c("[COX1]","[COX2]","[ATP8]","[ATP6]","[COX3]", "[ND3]", "[ND4L]","[ND4]","[ND5]","[CYTB]","[ND6]"))), notch = TRUE)
ggplot(data = brds_clsup, aes(x = Gene.name, y = neutralA))+
geom_boxplot(aes(fill = TrophicLevel), notch = TRUE)
graf = ggplot(data = brds_clsup, aes(x = Gene.name, y = neutralA))+
geom_boxplot(aes(fill = TrophicLevel), notch = TRUE)
graf
graf + xlim(c("[COX1]","[COX2]","[ATP8]","[ATP6]","[COX3]", "[ND3]", "[ND4L]","[ND4]","[ND5]","[CYTB]","[ND6]"))
brds_clsup$GhAhSkew = ((brds_clsup$neutralC - brds_clsup$neutralT)/(brds_clsup$neutralC - brds_clsup$neutralT))
View(brds_clsup)
brds_clsup$GhAhSkew = ((brds_clsup$neutralC - brds_clsup$neutralT)/(brds_clsup$neutralC + brds_clsup$neutralT))
GhAhgraf = ggplot(data = brds_clsup, aes(x = Gene.name, y = GhAhSkew))+
geom_boxplot(aes(fill = TrophicLevel), notch = TRUE)
GhAhgraf + xlim(c("[COX1]","[COX2]","[ATP8]","[ATP6]","[COX3]", "[ND3]", "[ND4L]","[ND4]","[ND5]","[CYTB]","[ND6]"))
rm(graf)
#comparing neutral nucleotides in genes
grafA = ggplot(data = brds_clsup, aes(x = Gene.name, y = neutralA))+
geom_boxplot(notch = TRUE)
grafA
#comparing neutral nucleotides in genes
grafA = ggplot(data = brds_clsup, aes(x = Gene.name, y = neutralA))+
geom_boxplot(aes(fill = TrophicLevel), notch = TRUE)
grafA
grafA + xlim(c("[COX1]","[COX2]","[ATP8]","[ATP6]","[COX3]", "[ND3]", "[ND4L]","[ND4]","[ND5]","[CYTB]","[ND6]"))
grafG = ggplot(data = brds_clsup, aes(x = Gene.name, y = neutralG))+
geom_boxplot(aes(fill = TrophicLevel), notch = TRUE)
grafG + xlim(c("[COX1]","[COX2]","[ATP8]","[ATP6]","[COX3]", "[ND3]", "[ND4L]","[ND4]","[ND5]","[CYTB]","[ND6]"))
#neutralC graph
grafC = ggplot(data = brds_clsup, aes(x = Gene.name, y = neutralC))+
geom_boxplot(aes(fill = TrophicLevel),notch = TRUE)
grafC + xlim(c("[COX1]","[COX2]","[ATP8]","[ATP6]","[COX3]", "[ND3]", "[ND4L]","[ND4]","[ND5]","[CYTB]","[ND6]"))
#neutralT graph
grafT = ggplot(data = brds_clsup, aes(x = Gene.name, y = neutralT))+
geom_boxplot(aes(fill = TrophicLevel),notch = TRUE)
grafT + xlim(c("[COX1]","[COX2]","[ATP8]","[ATP6]","[COX3]", "[ND3]", "[ND4L]","[ND4]","[ND5]","[CYTB]","[ND6]"))
#GhAhSkew for birds with different trophic niche
GhAhgrafTN = ggplot(data = brds_clsup, aes(x = Gene.name, y = GhAhSkew))+
geom_boxplot(aes(fill = TrophicNiche), notch = TRUE)
library('ggplot2')
#GhAhSkew for birds with different trophic niche
GhAhgrafTN = ggplot(data = brds_clsup, aes(x = Gene.name, y = GhAhSkew))+
geom_boxplot(aes(fill = TrophicNiche), notch = TRUE)
GhAhgrafTN + xlim(c("[COX1]","[COX2]","[ATP8]","[ATP6]","[COX3]", "[ND3]", "[ND4L]","[ND4]","[ND5]","[CYTB]","[ND6]"))
#GhAhSkew for birds with different foraging niche
GhAhgrafFN = ggplot(data = brds_clsup, aes(x = Gene.name, y = GhAhSkew))+
geom_boxplot(aes(fill = ForagingNiche), notch = TRUE)
GhAhgrafFN + xlim(c("[COX1]","[COX2]","[ATP8]","[ATP6]","[COX3]", "[ND3]", "[ND4L]","[ND4]","[ND5]","[CYTB]","[ND6]"))
#GhAhSkew for birds with different realm
GhAhgrafR = ggplot(data = brds_clsup, aes(x = Gene.name, y = GhAhSkew))+
geom_boxplot(aes(fill = Realm), notch = TRUE)
GhAhgrafR + xlim(c("[COX1]","[COX2]","[ATP8]","[ATP6]","[COX3]", "[ND3]", "[ND4L]","[ND4]","[ND5]","[CYTB]","[ND6]"))
library('ggplot2')
GhAhgraf = ggplot(data = brds_clsup, aes(x = Gene.name, y = GhAhSkew))+
geom_boxplot(aes(fill = TrophicLevel), notch = TRUE)
GhAhgraf + xlim(c("[COX1]","[COX2]","[ATP8]","[ATP6]","[COX3]", "[ND3]", "[ND4L]","[ND4]","[ND5]","[CYTB]","[ND6]"))
View(brds_clsup)
GhAhgraf = ggplot(data = brds_clsup, aes(x = Gene.name, y = GhAhSkew))+
geom_boxplot(aes(fill = TrophicLevel), notch = TRUE)
GhAhgraf
GhAhgraf + xlim(c("[COX1]","[COX2]","[ATP8]","[ATP6]","[COX3]", "[ND3]", "[ND4L]","[ND4]","[ND5]","[CYTB]","[ND6]"))
GhAhgraf + xlim(c("[COX1]","[COX2]","[ATP8]","[ATP6]","[COX3]", "[ND3]", "[ND4L]","[ND4]","[ND5]","[CYTB]","[ND6]","[ND1]","[ND2]"))
#GhAhSkew for birds with different trophic niche
GhAhgrafTN = ggplot(data = brds_clsup, aes(x = Gene.name, y = GhAhSkew))+
geom_boxplot(aes(fill = TrophicNiche), notch = TRUE)
GhAhgrafTN + xlim(c("[COX1]","[COX2]","[ATP8]","[ATP6]","[COX3]", "[ND3]", "[ND4L]","[ND4]","[ND5]","[CYTB]","[ND6]","[ND1]","[ND2]"))
#GhAhSkew for birds with different foraging niche
GhAhgrafFN = ggplot(data = brds_clsup, aes(x = Gene.name, y = GhAhSkew))+
geom_boxplot(aes(fill = ForagingNiche), notch = TRUE)
GhAhgrafFN + xlim(c("[COX1]","[COX2]","[ATP8]","[ATP6]","[COX3]", "[ND3]", "[ND4L]","[ND4]","[ND5]","[CYTB]","[ND6]","[ND1]","[ND2]"))
#GhAhSkew for birds with different realm
GhAhgrafR = ggplot(data = brds_clsup, aes(x = Gene.name, y = GhAhSkew))+
geom_boxplot(aes(fill = Realm), notch = TRUE)
GhAhgrafR + xlim(c("[COX1]","[COX2]","[ATP8]","[ATP6]","[COX3]", "[ND3]", "[ND4L]","[ND4]","[ND5]","[CYTB]","[ND6]","[ND1]","[ND2]"))
#Stg-Sac
brds_clsup$frneuA = brds_clsup$neutralA/brds_clsup$Neutral.count
brds_clsup$frneuG = brds_clsup$neutralG/brds_clsup$Neutral.count
brds_clsup$frneuC = brds_clsup$neutralC/brds_clsup$Neutral.count
brds_clsup$frneuT = brds_clsup$neutralT/brds_clsup$Neutral.count
brds_clsup$Stg = ((brds_clsup$frneuA + brds_clsup$frneuC)-(brds_clsup$frneuG+brds_clsup$frneuT))
library('ggplot2')
Stlgraph = ggplot(dfta = brds_clsup, aes(x = Gene.name, y = Stg))+
geom_boxplot(aes(fill = TrophicLevel), notch = TRUE)
Stlgraph = ggplot(data = brds_clsup, aes(x = Gene.name, y = Stg))+
geom_boxplot(aes(fill = TrophicLevel), notch = TRUE)
Stlgraph
Stlgraph + xlim(c("[COX1]","[COX2]","[ATP8]","[ATP6]","[COX3]", "[ND3]", "[ND4L]","[ND4]","[ND5]","[CYTB]","[ND6]","[ND1]","[ND2]"))
#trophicniche
Stngraph = ggplot(data = brds_clsup, aes(x = Gene.name, y = Stg))+
geom_boxplot(aes(fill = TrophicNiche), notch = TRUE)
Stngraph + xlim(c("[COX1]","[COX2]","[ATP8]","[ATP6]","[COX3]", "[ND3]", "[ND4L]","[ND4]","[ND5]","[CYTB]","[ND6]","[ND1]","[ND2]"))
#foragingniche
Sfngraph = ggplot(data = brds_clsup, aes(x = Gene.name, y = Stg))+
geom_boxplot(aes(fill = ForagingNiche), notch = TRUE)
Sfngraph + xlim(c("[COX1]","[COX2]","[ATP8]","[ATP6]","[COX3]", "[ND3]", "[ND4L]","[ND4]","[ND5]","[CYTB]","[ND6]","[ND1]","[ND2]"))
#realm
Srgraph = ggplot(data = brds_clsup, aes(x = Gene.name, y = Stg))+
geom_boxplot(aes(fill = Realm), notch = TRUE)
Srgraph + xlim(c("[COX1]","[COX2]","[ATP8]","[ATP6]","[COX3]", "[ND3]", "[ND4L]","[ND4]","[ND5]","[CYTB]","[ND6]","[ND1]","[ND2]"))
#lines
ggplot(data = brds_clsup, aes(x = Gene.name, y = frneuA))+
geom_dotplot()
#lines
ggplot(data = brds_clsup, aes(x = Gene.name, y = frneuA))+
geom_dotplot(binaxis = 'y')
#lines
ggplot(data = brds_clsup, aes(x = Gene.name, y = frneuA))+
geom_dotplot(binaxis = 'y', dotsize = 0.1)
#lines
ggplot(data = brds_clsup, aes(x = Gene.name, y = frneuA))+
geom_dotplot(binaxis = 'y', binwidth = 0.1)
#lines
ggplot(data = brds_clsup, aes(x = Gene.name, y = frneuA))+
geom_dotplot(binaxis = 'y', binwidth = 1)
#lines
ggplot(data = brds_clsup, aes(x = Gene.name, y = frneuA))+
geom_dotplot(binaxis = 'y', binwidth = 0.001)
#lines
ggplot(data = brds_clsup, aes(x = Gene.name, y = frneuA))+
geom_dotplot(binaxis = 'y', binwidth = 0.0001)
#lines
brds_clsup$neutralF = brds_clsup$Neutral.count/brds_clsup$mtDNA.length
ggplot(data = brds_clsup, aes(x = Gene.name, y = neutralF))+
geom_dotplot(binaxis = 'y', binwidth = 0.0001)
Stlgraph + xlim(c("[COX1]","[COX2]","[ATP8]","[ATP6]","[COX3]", "[ND3]", "[ND4L]","[ND4]","[ND5]","[CYTB]","[ND6]","[ND1]","[ND2]"))
Stngraph + xlim(c("[COX1]","[COX2]","[ATP8]","[ATP6]","[COX3]", "[ND3]", "[ND4L]","[ND4]","[ND5]","[CYTB]","[ND6]","[ND1]","[ND2]"))
Sfngraph + xlim(c("[COX1]","[COX2]","[ATP8]","[ATP6]","[COX3]", "[ND3]", "[ND4L]","[ND4]","[ND5]","[CYTB]","[ND6]","[ND1]","[ND2]"))
Srgraph + xlim(c("[COX1]","[COX2]","[ATP8]","[ATP6]","[COX3]", "[ND3]", "[ND4L]","[ND4]","[ND5]","[CYTB]","[ND6]","[ND1]","[ND2]"))
library('ggplot2')
ggplot(data = brds_clsup, aes(x = Gene.name, y = neutralF))+
geom_dotplot(binaxis = 'y', binwidth = 0.0001)
ggplot(data = brds_clsup, aes(x = Gene.name, y = neutralF))+
geom_dotplot(binaxis = 'y', binwidth = 0.0001, fill = (TrophicLevel))
ggplot(data = brds_clsup, aes(x = Gene.name, y = neutralF))+
geom_dotplot(binaxis = 'y', binwidth = 0.0001, fill = TrophicLevel)
ggplot(data = brds_clsup, aes(x = Gene.name, y = neutralF))+
geom_dotplot(binaxis = 'y', binwidth = 0.0001, aes(fill = TrophicLevel))
ggplot(data = brds_clsup)+
geom_point(mapping = aes(x = Gene.name, y = neutralF))
ggplot(data = brds_clsup)+
geom_point(mapping = aes(x = Gene.name, y = neutralF))
View(brds_clsup)
library('ggplot2')
#lines
ggplot(data = brds_clsup, x = Gene.name, y = frneuA)+
geom_point()
#lines
ggplot(data = brds_clsup, aes(x = Gene.name, y = frneuA))+
geom_point()
#lines
ggplot(data = brds_clsup, aes(x = Gene.name, y = frneuA))+
geom_point(fill = TrophicLevel)
#lines
ggplot(data = brds_clsup, aes(x = Gene.name, y = frneuA))+
geom_point(fill = brds_clsup$TrophicLevel)
#lines
ggplot(data = brds_clsup, aes(x = Gene.name, y = frneuA))+
geom_point(aes(fill = brds_clsup$TrophicLevel))
#lines
ggplot(data = brds_clsup, aes(x = Gene.name, y = frneuA))+
geom_point(aes(fill = TrophicLevel))
#lines
ggplot(data = brds_clsup, aes(x = Gene.name, y = frneuA))+
geom_boxplot(aes(fill = TrophicLevel))
#lines
A = ggplot(data = brds_clsup, aes(x = Gene.name, y = frneuA))+
geom_boxplot(aes(fill = TrophicLevel))
A = A + xlim(c("[COX1]","[COX2]","[ATP8]","[ATP6]","[COX3]", "[ND3]", "[ND4L]","[ND4]","[ND5]","[CYTB]","[ND6]","[ND1]","[ND2]"))
A
#lines
Atl = ggplot(data = brds_clsup, aes(x = Gene.name, y = frneuA))+
geom_boxplot()
Atl = Atl + xlim(c("[COX1]","[COX2]","[ATP8]","[ATP6]","[COX3]", "[ND3]", "[ND4L]","[ND4]","[ND5]","[CYTB]","[ND6]","[ND1]","[ND2]"))
Gtl = ggplot(data = brds_clsup, aes(x = Gene.name, y = frneuG))+
geom_boxplot()
Gtl = Gtl + xlim(c("[COX1]","[COX2]","[ATP8]","[ATP6]","[COX3]", "[ND3]", "[ND4L]","[ND4]","[ND5]","[CYTB]","[ND6]","[ND1]","[ND2]"))
Ctl = ggplot(data = brds_clsup, aes(x = Gene.name, y = frneuC))+
geom_boxplot()
Ctl = Ctl + xlim(c("[COX1]","[COX2]","[ATP8]","[ATP6]","[COX3]", "[ND3]", "[ND4L]","[ND4]","[ND5]","[CYTB]","[ND6]","[ND1]","[ND2]"))
Ttl = ggplot(data = brds_clsup, aes(x = Gene.name, y = frneuT))+
geom_boxplot()
Ttl = Ttl + xlim(c("[COX1]","[COX2]","[ATP8]","[ATP6]","[COX3]", "[ND3]", "[ND4L]","[ND4]","[ND5]","[CYTB]","[ND6]","[ND1]","[ND2]"))
ggarrange(Atl, Gtl, Ctl, Ttl ,
labels = c("A", "B", "C","D"),
ncol = 2, nrow = 2)
install.packages('ggpubr')
ggarrange(Atl, Gtl, Ctl, Ttl,
labels = c("A", "B", "C","D"),
ncol = 2, nrow = 2)
library('ggpubr')
ggarrange(Atl, Gtl, Ctl, Ttl,
labels = c("A", "B", "C","D"),
ncol = 2, nrow = 2)
View(brds_clsup)
View(brds_clsup)
brds_clsup$temp = 1
View(brds)
df2 = aggregate(brds_clsup$temp,by = list(brds_clsup$Species.name), FUN = sum)
View(df2)
brds_clsup$Species.name = 'Paradoxornis heudei'
sup = read.table("../../Body/3Results/Birds supplementary materials - DatabaseS1.csv", header = TRUE, sep = ',') #supplements materials
gold = read.table("../../Body/3Results/Golden birds dataset.csv", header = TRUE, sep = ',') #reading golden dataset
clsup = data.frame(sup$Binomial, sup$Realm, sup$TrophicLevel, sup$TrophicNiche, sup$ForagingNiche) #get rid of PC
names(clsup) = c('Species.name','Realm', 'TrophicLevel', 'TrophicNiche', 'ForagingNiche')
clsup$Species.name = gsub("_", " ", clsup$Species.name)
names(brds) = c('Species.name')
brds_clsup = merge(clsup, gold) #merge golden dataset and supplements materials
View(brds_clsup)
brds_clsup[brds_clsup$Species.name == 'Paradoxornis heudei',]
df3 = brds_clsup[brds_clsup$Species.name == 'Paradoxornis heudei',]
View(df3)
View(df2)
df3 = brds_clsup[brds_clsup$Species.name == 'Sarothrura ayresi',]
View(df3)
View(sup)
View(brds_clsup)
write.csv(brds_clsup, "birds_list.csv")
