if (as.numeric(as.character(unlist(org_gen[vec_all[codon]]))) + as.numeric(as.character(unlist(org_gen[anti_vec_all[codon]]))) == 0)
{
norm_cod = 0
df_out = cbind(df_out, norm_cod)
}
else
{
norm_cod = (as.numeric(as.character(unlist(org_gen[vec_all[codon]]))))/(as.numeric(as.character(unlist(org_gen[vec_all[codon]]))) + as.numeric(as.character(unlist(org_gen[anti_vec_all[codon]]))))
df_out = cbind(df_out, norm_cod)
}
}
df_aa = rbind(df_aa, df_out)
}
View(df_aa)
names(df_aa) = c('species_name', 'gene_name', vec_all)
write.csv(df_aa, file = 'Aminoacids_shift_birds')
write.csv(df_aa, file = 'Aminoacids_shift_birds.csv')
rm(list=ls(all=TRUE))
library(seqinr)
library(ggplot2)
############ Syn mut
df_mtdna = read.csv('../../Head/2Scripts/Birds_dataset_paper.csv')
df_shift = read.csv('../../Head/2Scripts/Aminoacids_shift_birds.csv')
View(df_shift)
VecOfSynFourFoldDegenerateSites <- c('CTT', 'CTC', 'CTA', 'CTG',
'GTT', 'GTC', 'GTA', 'GTG',
'TCT', 'TCC', 'TCA', 'TCG',
'CCT', 'CCC', 'CCA', 'CCG',
'ACT', 'ACC', 'ACA', 'ACG',
'GCT', 'GCC', 'GCA', 'GCG',
'CGT', 'CGC', 'CGA', 'CGG',
'GGT', 'GGC', 'GGA', 'GGG')
getVecOfThirdNucleotides4f = function(x){
codonsVec = splitseq(s2c(x))
codons4f = codonsVec[codonsVec %in% VecOfSynFourFoldDegenerateSites]
thirdPosList = gsub("CTA|GTA|TCA|CCA|ACA|GCA|CGA|GGA", 'A', codons4f)
thirdPosList = gsub("CTT|GTT|TCT|CCT|ACT|GCT|CGT|GGT", 'T', thirdPosList)
thirdPosList = gsub("CTG|GTG|TCG|CCG|ACG|GCG|CGG|GGG", 'G', thirdPosList)
thirdPosList = gsub("CTC|GTC|TCC|CCC|ACC|GCC|CGC|GGC", 'C', thirdPosList)
thirdPosVec = paste(as.vector(thirdPosList), collapse = '')
return(thirdPosVec)
}
df_shift$ThirdPos4f = lapply(as.character( getVecOfThirdNucleotides4f)
df_shift$ThirdPos4f = lapply(as.character(getVecOfThirdNucleotides4f))
df_shift$ThirdPos4f = lapply(as.character(getVecOfThirdNucleotides4f))
rm(list=ls(all=TRUE))
library(seqinr)
library(ggplot2)
############ Syn mut
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip")
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")){file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")}
names(SynNuc)
View(SynNuc)
SynNuc = SynNuc[!(SynNuc$Gene %in% c('ND1', 'ND2', 'ND6')),]
VecOfSynFourFoldDegenerateSites <- c('CTT', 'CTC', 'CTA', 'CTG',
'GTT', 'GTC', 'GTA', 'GTG',
'TCT', 'TCC', 'TCA', 'TCG',
'CCT', 'CCC', 'CCA', 'CCG',
'ACT', 'ACC', 'ACA', 'ACG',
'GCT', 'GCC', 'GCA', 'GCG',
'CGT', 'CGC', 'CGA', 'CGG',
'GGT', 'GGC', 'GGA', 'GGG')
getVecOfThirdNucleotides4f = function(x){
codonsVec = splitseq(s2c(x))
codons4f = codonsVec[codonsVec %in% VecOfSynFourFoldDegenerateSites]
thirdPosList = gsub("CTA|GTA|TCA|CCA|ACA|GCA|CGA|GGA", 'A', codons4f)
thirdPosList = gsub("CTT|GTT|TCT|CCT|ACT|GCT|CGT|GGT", 'T', thirdPosList)
thirdPosList = gsub("CTG|GTG|TCG|CCG|ACG|GCG|CGG|GGG", 'G', thirdPosList)
thirdPosList = gsub("CTC|GTC|TCC|CCC|ACC|GCC|CGC|GGC", 'C', thirdPosList)
thirdPosVec = paste(as.vector(thirdPosList), collapse = '')
return(thirdPosVec)
}
df_mtdna = read.csv('../../Head/2Scripts/Birds_dataset_paper.csv')
View(df_mtdna)
df_shift = read.csv('../../Head/2Scripts/Aminoacids_shift_birds.csv')
SynNuc$ThirdPos4f = lapply(as.character(SynNuc$CodonsNoOverlap), getVecOfThirdNucleotides4f) #CodonsNoOverlap -> sequence
df_mtdna$ThirdPos4f = lapply(as.character(df_mtdna$sequence), getVecOfThirdNucleotides4f)
df_need = df_mtdna[,c('species_name', "sequence", "ThirdPos4f")]
View(df_need)
df_need = df_mtdna[,c('species_name',"gene_name", "sequence", "ThirdPos4f")]
df_need = df_mtdna[,c('species_name',"gene_name", "sequence", "ThirdPos4f", "realm")]
df_need$gene_name =  ordered(df_need$gene_name, levels = c('COX1','COX2','ATP8','ATP6','COX3','ND3','ND4L','ND4','ND5','CytB', 'ND1', 'ND2'))
df_need = df_mtdna[,c('species_name',"gene_name", "sequence", "ThirdPos4f", "realm")]
df_need$gene_name
df_need$gene_name =  ordered(df_need$gene_name, levels = c('COX1','COX2','ATP8','ATP6','COX3','ND3','ND4L','ND4','ND5','CYTB', "ND1", "ND2"))
df_need = df_need[order(df_need$gene_name),]
nuclCount = function(seq, char){
cnt = nchar(as.character(seq)) - nchar(gsub(char, "", seq))
return(cnt)
}
tCount = sapply(df_need, nuclCount, char='T')
View(tCount)
View(df_shift)
#work from internet
df_shift = df_shift[,c(2:67)]
df_shift1 <- melt(df_shift ,  id.vars = 'gene_name', variable.name = 'gene')
#work from internet
install.packages(reshape2)
#work from internet
install.packages('reshape2')
library(reshape2)
df_shift1 <- melt(df_shift ,  id.vars = 'gene_name', variable.name = 'gene')
View(df_shift1)
df <- data.frame(index=c(1, 2, 3, 4, 5, 6),
var1=c(4, 4, 5, 4, 3, 2),
var2=c(1, 2, 4, 4, 6, 9),
var3=c(9, 9, 9, 5, 5, 3))
#melt data frame into long format
df <- melt(df ,  id.vars = 'index', variable.name = 'series')
View(df)
df <- data.frame(index=c(1, 2, 3, 4, 5, 6),
var1=c(4, 4, 5, 4, 3, 2),
var2=c(1, 2, 4, 4, 6, 9),
var3=c(9, 9, 9, 5, 5, 3))
View(df)
#melt data frame into long format
df1 <- melt(df ,  id.vars = 'index', variable.name = 'series')
View(df1)
View(df_shift)
df_shift2 = df_shift[,c(3:67)]
df_shift2 = df_shift[,c(2:66)]
View(df_shift2)
df_shift3 = melt(df_shift2, id.vars = 'gene_name')
View(df_shift3)
ggplot(df_shift3, aes(x = variable, y = value))+
geom_boxplot(fill = gene_name)
ggplot(df_shift3, aes(x = variable, y = value))+
geom_bar(fill = gene_name)
names(df_shift3)
ggplot(df_shift3, aes(x = variable, y = value))+
geom_bar(fill = 'gene_name')
rlang::last_error()
ggplot(df_shift3, aes(x = variable, y = value))+
geom_bar()
ggplot(df_shift3, aes(x = variable, y = value))+
geom_boxplot()
ggplot(df_shift3, aes(x = variable, y = value))+
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90))
ggplot(df_shift3, aes(x = variable, y = value))+
geom_boxplot(fill = gene_name)+
theme(axis.text.x = element_text(angle = 90))
ggplot(df_shift3, aes(x = variable, y = value))+
geom_boxplot(color = gene_name)+
theme(axis.text.x = element_text(angle = 90))
ggplot(df_shift3, aes(x = variable, y = value))+
geom_boxplot(color = df_shift3$gene_name)+
theme(axis.text.x = element_text(angle = 90))
ggplot(df_shift3, aes(x = variable, y = value))+
geom_boxplot(fill = df_shift3$gene_name)+
theme(axis.text.x = element_text(angle = 90))
ggplot(df_shift3, aes(x = variable, y = value, fill = df_shift3$gene_name))+
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90))
ggplot(df_shift3, aes(x = variable, y = value, fill = gene_name))+
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90))
#plotly work
library(plotly)
View(df_shift3)
plot_ly(
data = df_shift3,
y = ~value,
x = ~variable,
type = "box",
color = ~gene_name,
showlegend = FALSE
)
rm(list = ls(all=TRUE))
install.packages("ggbiplot")
install.packages("ggplot2")
library(ggbiplot)
library(ggplot2)
library(ggpubr)
df_mtdna = read.csv('../../Head/2Scripts/Birds_dataset_paper.csv')
#Dima's dat
df_all = read.table('../../Head/2Scripts/VertebratePolymorphisms.MutSpecData.txt')
unique(df_all$Class)
df_mammals = filter(df_all, df_all$Class == 'Mammalia')
#PCA coloring
library('ggbiplot')
library(plotly)
library(dplyr)
#library(carData)
library(gapminder)
library(babynames)
library(ape)
library(geiger)
library(caper)
library(phytools)
df_mammals = filter(df_all, df_all$Class == 'Mammalia')
unique(df_mammals$Species)
df_what = filter(df_all, df_all$Species == 'Abrothrix_longipilis')
unique(df_mammals$Class)
library(plyr)
#Alya's dataset
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip", exdir = "../../Body/3Results/")
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")) file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")
names(SynNuc)
SynNuc$ghahSkew = ((SynNuc$NeutralC - SynNuc$NeutralT))/((SynNuc$NeutralC + SynNuc$NeutralT))
SynNuc$chthSkew = ((SynNuc$NeutralA - SynNuc$NeutralG))/((SynNuc$NeutralA + SynNuc$NeutralG))
new_mam = SynNuc[, c(1, 2, 79, 81)]
View(SynNuc)
rm(list = ls(all=TRUE))
df_mtdna = read.csv('../../Head/2Scripts/Birds_dataset_paper.csv')
#Alya's dataset
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip", exdir = "../../Body/3Results/")
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")) file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")
names(SynNuc)
SynNuc$ghahSkew = ((SynNuc$NeutralC - SynNuc$NeutralT))/((SynNuc$NeutralC + SynNuc$NeutralT))
SynNuc$chthSkew = ((SynNuc$NeutralA - SynNuc$NeutralG))/((SynNuc$NeutralA + SynNuc$NeutralG))
View(SynNuc)
new_mam = SynNuc[, c(1, 2, 79, 80)]
View(new_mam)
new_mam = new_mam[new_mam$Gene != 'ND6',]
new_mam$class = 'Mammalia'
new_bird = df_mtdna[, c('species_name', 'gene_name', 'ghahSkew','chthSkew')]
new_bird$class = 'Aves'
new_bird$species_name = gsub(' ', '_', new_bird$species_name)
new_bird$gene_name[new_bird$gene_name == 'CYTB'] = 'CytB'
names(new_mam) = c('species_name', 'gene_name', 'ghahSkew', 'chthSkew', 'class')
new_big = rbind(new_mam, new_bird)
new_b_and_m = ggplot(new_big, aes(x = gene_name, y = ghahSkew, fill = class))+
geom_boxplot(notch = TRUE, outlier.alpha = FALSE)
new_b_and_m = new_b_and_m + xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CytB","ND1","ND2"))
new_b_and_m
View(new_b_and_m)
View(new_big)
View(SynNuc)
#Alya's dataset
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip", exdir = "../../Body/3Results/")
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")) file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")
names(SynNuc)
SynNuc$ghahSkew = ((SynNuc$NeutralC - SynNuc$NeutralT))/((SynNuc$NeutralC + SynNuc$NeutralT))
SynNuc$chthSkew = ((SynNuc$NeutralA - SynNuc$NeutralG))/((SynNuc$NeutralA + SynNuc$NeutralG))
for_article = SynNuc[, c(1, 2, 73, 74, 75, 76)]
View(for_article)
for_article = for_article[for_article$Gene != 'ND6',]
for_article$class = 'Mammalia'
View(df_mtdna)
new_bird1 = df_mtdna[, c('species_name', 'gene_name', 'neutral_A','neutral_g', 'neutral_c', 'neutrla_T')]
new_bird1 = df_mtdna[, c('species_name', 'gene_name', 'neutral_A','neutral_g', 'neutral_c', 'neutral_T')]
View(new_bird1)
new_bird1$class = 'Aves'
new_bird1$species_name = gsub(' ', '_', new_bird$species_name)
new_bird1$species_name = gsub(' ', '_', new_bird1$species_name)
new_bird1$gene_name[new_bird1$gene_name == 'CYTB'] = 'CytB'
names(for_article) = c('species_name', 'gene_name', 'neutral_A', 'neutral_T', 'neutral_g', 'neutral_c', 'class')
new_big1 = rbind(for_article, new_bird1)
View(new_big1)
new_b_and_m1 = ggplot(new_big1, aes(x = gene_name, y = neutral_A, fill = class))+
geom_histogram()
new_b_and_m1 = new_b_and_m1 + xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CytB","ND1","ND2"))
new_b_and_m1
new_b_and_m1 = ggplot(new_big1, aes(x = gene_name, y = neutral_A, fill = class))+
geom_boxplot()
new_b_and_m1 = new_b_and_m1 + xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CytB","ND1","ND2"))
new_b_and_m1
new_b_and_m1 = ggplot(new_big1, aes(x = gene_name, y = neutral_A, fill = class))+
geom_boxplot()+
xlab('Gene name')+
ylab('Neutral T')
new_b_and_m1 = new_b_and_m1 + xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CytB","ND1","ND2"))
new_b_and_m1
new_b_and_m2 = ggplot(new_big1, aes(x = gene_name, y = neutral_G, fill = class))+
geom_boxplot(notch = TRUE, outlier.alpha = FALSE)+
xlab('Gene name')+
ylab('Neutral C')
new_b_and_m2 = new_b_and_m2 + xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CytB","ND1","ND2"))
new_b_and_m2
new_b_and_m2 = ggplot(new_big1, aes(x = gene_name, y = neutral_g, fill = class))+
geom_boxplot(notch = TRUE, outlier.alpha = FALSE)+
xlab('Gene name')+
ylab('Neutral C')
new_b_and_m2 = new_b_and_m2 + xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CytB","ND1","ND2"))
new_b_and_m2
new_b_and_m3 = ggplot(new_big1, aes(x = gene_name, y = neutral_c, fill = class))+
geom_boxplot(notch = TRUE, outlier.alpha = FALSE)+
xlab('Gene name')+
ylab('Neutral G')
new_b_and_m3 = new_b_and_m2 + xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CytB","ND1","ND2"))
new_b_and_m3
new_b_and_m4 = ggplot(new_big1, aes(x = gene_name, y = neutral_T, fill = class))+
geom_boxplot(notch = TRUE, outlier.alpha = FALSE)+
xlab('Gene name')+
ylab('Neutral A')
new_b_and_m4 = new_b_and_m2 + xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CytB","ND1","ND2"))
new_b_and_m4
View(new_b_and_m4)
new_b_and_m1 = ggplot(new_big1, aes(x = gene_name, y = neutral_A, fill = class))+
geom_boxplot(notch = TRUE, outlier.alpha = FALSE)+
xlab('Gene name')+
ylab('Neutral T')
new_b_and_m1 = new_b_and_m1 + xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CytB","ND1","ND2"))
new_b_and_m1
new_b_and_m2 = ggplot(new_big1, aes(x = gene_name, y = neutral_g, fill = class))+
geom_boxplot(notch = TRUE, outlier.alpha = FALSE)+
xlab('Gene name')+
ylab('Neutral C')
new_b_and_m2 = new_b_and_m2 + xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CytB","ND1","ND2"))
new_b_and_m2
new_b_and_m3 = ggplot(new_big1, aes(x = gene_name, y = neutral_c, fill = class))+
geom_boxplot(notch = TRUE, outlier.alpha = FALSE)+
xlab('Gene name')+
ylab('Neutral G')
new_b_and_m3 = new_b_and_m3 + xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CytB","ND1","ND2"))
new_b_and_m3
new_b_and_m4 = ggplot(new_big1, aes(x = gene_name, y = neutral_T, fill = class))+
geom_boxplot(notch = TRUE, outlier.alpha = FALSE)+
xlab('Gene name')+
ylab('Neutral A')
new_b_and_m4 = new_b_and_m4 + xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CytB","ND1","ND2"))
new_b_and_m4
new_b_and_m1 = ggplot(new_big1, aes(x = gene_name, y = neutral_A, fill = class))+
geom_boxplot(notch = TRUE, outlier.alpha = FALSE)+
xlab('Gene name')+
ylab('Neutral T')
new_b_and_m1 = new_b_and_m1 + xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CytB","ND1","ND2"))
new_b_and_m1
new_b_and_m2 = ggplot(new_big1, aes(x = gene_name, y = neutral_g, fill = class))+
geom_boxplot(notch = TRUE, outlier.alpha = FALSE)+
xlab('Gene name')+
ylab('Neutral C')
new_b_and_m2 = new_b_and_m2 + xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CytB","ND1","ND2"))
new_b_and_m2
new_b_and_m3 = ggplot(new_big1, aes(x = gene_name, y = neutral_c, fill = class))+
geom_boxplot(notch = TRUE, outlier.alpha = FALSE)+
xlab('Gene name')+
ylab('Neutral G')
new_b_and_m3 = new_b_and_m3 + xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CytB","ND1","ND2"))
new_b_and_m3
new_b_and_m4 = ggplot(new_big1, aes(x = gene_name, y = neutral_T, fill = class))+
geom_boxplot(notch = TRUE, outlier.alpha = FALSE)+
xlab('Gene name')+
ylab('Neutral A')
new_b_and_m4 = new_b_and_m4 + xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CytB","ND1","ND2"))
new_b_and_m4
new_b_and_m1 = ggplot(new_big1, aes(x = gene_name, y = neutral_A, fill = class))+
geom_boxplot(notch = TRUE, outlier.alpha = FALSE)+
xlab('Gene name')+
ylab('Neutral T')+
ylim(0, 200)
new_b_and_m1 = new_b_and_m1 + xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CytB","ND1","ND2"))
new_b_and_m1
new_b_and_m2 = ggplot(new_big1, aes(x = gene_name, y = neutral_g, fill = class))+
geom_boxplot(notch = TRUE, outlier.alpha = FALSE)+
xlab('Gene name')+
ylab('Neutral C')+
ylim(0, 200)
new_b_and_m2 = new_b_and_m2 + xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CytB","ND1","ND2"))
new_b_and_m2
new_b_and_m3 = ggplot(new_big1, aes(x = gene_name, y = neutral_c, fill = class))+
geom_boxplot(notch = TRUE, outlier.alpha = FALSE)+
xlab('Gene name')+
ylab('Neutral G')+
ylim(0, 200)
new_b_and_m3 = new_b_and_m3 + xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CytB","ND1","ND2"))
new_b_and_m3
new_b_and_m4 = ggplot(new_big1, aes(x = gene_name, y = neutral_T, fill = class))+
geom_boxplot(notch = TRUE, outlier.alpha = FALSE)+
xlab('Gene name')+
ylab('Neutral A')+
ylim(0, 200)
new_b_and_m4 = new_b_and_m4 + xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CytB","ND1","ND2"))
new_b_and_m4
f1 = ggplot(data = df_mtdna, aes(x = gene_name, y = fTn))+
geom_boxplot(outlier.shape = NA)+
xlab('Mitochondrial genes')+
ylab('Thymine frequence')
f1 = f1 +xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CYTB","ND1","ND2"))
f1 = f1 + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
f1 = ggplot(data = df_mtdna, aes(x = gene_name, y = fTn))+
geom_boxplot(outlier.shape = NA)+
xlab('Mitochondrial genes')+
ylab('Thymine frequence')+
ylim(0, 0.7)
f1 = f1 +xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CYTB","ND1","ND2"))
f1 = f1 + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
f2 = ggplot(data = df_mtdna, aes(x = gene_name, y = fCn))+
geom_boxplot(outlier.shape = NA)+
xlab('Mitochondrial genes')+
ylab('Cytosine frequence')+
ylim(0, 0.7)
f2 = f2 +xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CYTB","ND1","ND2"))
f2 = f2 + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
f3 = ggplot(data = df_mtdna, aes(x = gene_name, y = fGn))+
geom_boxplot(outlier.shape = NA)+
xlab('Mitochondrial genes')+
ylab('Guanine frequence')+
ylim(0, 0.7)
f3 = f3 +xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CYTB","ND1","ND2"))
f3 = f3 + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
f4 = ggplot(data = df_mtdna, aes(x = gene_name, y = fAn))+
geom_boxplot(outlier.shape = NA)+
xlab('Mitochondrial genes')+
ylab('Adenine frequence')+
ylim(0, 0.7)
f4 = f4 +xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CYTB","ND1","ND2"))
f4 = f4 + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
f5 = ggarrange(f1, f3, f2, f4,
ncol = 2, nrow = 2)
f5
f51 = ggarrange(f1,f2,
ncol = 1, nrow = 2)
f51
f5
f10 = ggarrange(new_b_and_m1, new_b_and_m3, new_b_and_m2, new_b_and_m4,
ncol = 2, nrow = 2)
f10
new_b_and_m1 = ggplot(new_big1, aes(x = gene_name, y = neutral_A, fill = class))+
geom_boxplot(notch = TRUE, outlier.alpha = FALSE)+
xlab('Gene name')+
ylab('Neutral T')+
ylim(0, 200)
new_b_and_m1 = new_b_and_m1 + xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CytB","ND1","ND2"))
new_b_and_m1 = new_b_and_m1 + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
new_b_and_m1
new_b_and_m2 = ggplot(new_big1, aes(x = gene_name, y = neutral_g, fill = class))+
geom_boxplot(notch = TRUE, outlier.alpha = FALSE)+
xlab('Gene name')+
ylab('Neutral C')+
ylim(0, 200)
new_b_and_m2 = new_b_and_m2 + xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CytB","ND1","ND2"))
new_b_and_m2 = new_b_and_m2 + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
new_b_and_m3 = ggplot(new_big1, aes(x = gene_name, y = neutral_c, fill = class))+
geom_boxplot(notch = TRUE, outlier.alpha = FALSE)+
xlab('Gene name')+
ylab('Neutral G')+
ylim(0, 200)
new_b_and_m3 = new_b_and_m3 + xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CytB","ND1","ND2"))
new_b_and_m3 = new_b_and_m3 + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
new_b_and_m4 = ggplot(new_big1, aes(x = gene_name, y = neutral_T, fill = class))+
geom_boxplot(notch = TRUE, outlier.alpha = FALSE)+
xlab('Gene name')+
ylab('Neutral A')+
ylim(0, 200)
new_b_and_m4 = new_b_and_m4 + xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CytB","ND1","ND2"))
new_b_and_m4 = new_b_and_m4 + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
f10 = ggarrange(new_b_and_m1, new_b_and_m3, new_b_and_m2, new_b_and_m4,
ncol = 2, nrow = 2)
f10
View(SynNuc)
rm(list=ls(all=TRUE))
library(ggplot2)
df_mtdna = read.csv('../../Head/2Scripts/Birds_dataset_paper.csv')
df_shift = read.csv('../../Head/2Scripts/Aminoacids_shift_birds.csv')
library(reshape2)
df_shift = df_shift[,c(2:67)]
df_shift1 <- melt(df_shift ,  id.vars = 'gene_name', variable.name = 'gene')
df_shift2 = df_shift[,c(2:66)]
df_shift3 = melt(df_shift2, id.vars = 'gene_name')
View(df_shift)
View(df_shift2)
#preparing df for drawing
nd1 = df_shift2[df_shift2$gene_name == 'ND1',]
View(nd1)
#preparing df for drawing
nd1 = df_shift2[df_shift2$gene_name == 'ND1',]
nd2 = df_shift2[df_shift2$gene_name == 'ND2',]
nd3 = df_shift2[df_shift2$gene_name == 'ND3',]
nd4 = df_shift2[df_shift2$gene_name == 'ND4',]
nd4l = df_shift2[df_shift2$gene_name == 'ND4L',]
nd5 = df_shift2[df_shift2$gene_name == 'ND5',]
atp6 = df_shift2[df_shift2$gene_name == 'ATP6',]
atp8 = df_shift2[df_shift2$gene_name == 'ATP8',]
cox1 = df_shift2[df_shift2$gene_name == 'COX1',]
cox2 = df_shift2[df_shift2$gene_name == 'COX2',]
cox3 = df_shift2[df_shift2$gene_name == 'COX3',]
cytb = df_shift2[df_shift2$gene_name == 'CYTB',]
View(cytb)
try1 = (colSums(nd1[,1]))/766
try1 = (colSums(nd1[,-1]))/766
try1
try1 =  data.frame((colSums(nd1[,-1]))/766)
View(try1)
try1 =  data.frame(c((colSums(nd1[,-1]))/766))
View(try1)
a = ((colSums(nd1[,-1]))/766)
a
data.frame(a)
rm(a)
try1$codon = rownames(try1)
names(try1) = c('value', 'codon')
nd1 = data.frame((colSums(nd1[,-1]))/766)
View(nd1)
names(nd1) = c('value')
nd1$codon = rownames(nd1)
nd1$gene_name = 'ND1'
#preparing df for drawing
gene_vector = c('ND1', 'ND2', 'ND3', 'ND4', 'ND4L', 'ND5', 'ATP6', 'ATP8', 'COX1', 'COX2', 'COX3', 'CYTB')
codons_for_graph = data.frame()
for (i in gene_vector)
{
df = df_shift2[df_shift2$gene_name == i,]
df = data.frame((colSums(df[,-1]))/766)
names(df) = c('value')
df$codon = rownames(df)
df$gene_name = i
codons_for_graph = rbind(codons_for_graph, df)
df = data.frame()
}
View(codons_for_graph)
View(codons_for_graph)
View(df_shift)
View(codons_for_graph)
codons_for_graph[codons_for_graph]
codons_for_graph[codons_for_graph$gene_name == 'ND1',]
length(codons_for_graph[codons_for_graph$gene_name == 'ND1',])
