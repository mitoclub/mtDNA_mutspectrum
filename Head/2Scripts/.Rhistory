org_gen = as.vector(org_gen)
df_out= data.frame(sp_sum_gen[i,]$Species)
for (codon in seq(from = 2, to = 65, by = 2)){
if (org_gen[1,codon] == 0) {df_out = cbind(df_out, 0)}
else {
norm_cod = org_gen[1,codon] / (org_gen[1,codon+1] + org_gen[1,codon])
df_out = cbind(df_out, norm_cod)
}
}
names(df_out) = c('Species', needed_codons)
codon_norm = rbind(codon_norm,df_out)
}
names(codon_norm) = c('species_name', needed_codons)
codon_norm = codon_norm %>% select(-c('TAA','AGA'))
df_eco = df_codons_realm[,c(1,3)]
codon_norm = merge(codon_norm, df_eco)
df_try = data.frame(unique(codon_norm))
final = data.frame()
for (org in 1:nrow(df_try)){
sp_r = df_try[org,]
vec_of_c = sp_r %>% select(TTC, TCC, TAC, TGC, CTC, CCC, CAC, CGC,
ATC, ACC, AAC, AGC, GTC, GCC, GAC, GGC)
vec_of_a = sp_r %>% select(TTA, TCA, TGA, CTA, CCA, CAA, CGA,
ATA, ACA, AAA, GTA, GCA, GAA, GGA)
med_c = median(as.numeric(vec_of_c), na.rm = TRUE)
med_a = median(as.numeric(vec_of_a), na.rm = TRUE)
sp_out = data.frame(sp_r$species_name, med_c, med_a, sp_r$realm)
final = rbind(final,sp_out)
}
View(df)
rm(list=ls(all=T))
library(dplyr)
library(ggplot2)
df = read.csv('../../Body/3Results/For_Bogdan.csv') #reading file
df = df[df$gene_name != 'ND6',] #deleting ND6
df_sgc = df[,c(1,2,3,4,5,8, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97)] #getting codon usage
vec_all = c('TTC','TTT','TCC','TCT','TAC','TAT','TGC','TGT',
'TTA','TTG','TCA','TCG','TAA','TAG','TGA','TGG',
'CTC','CTT','CCC','CCT','CAC','CAT','CGC','CGT',
'CTA','CTG','CCA','CCG','CAA','CAG','CGA','CGG',
'ATC','ATT','ACC','ACT','AAC','AAT','AGC','AGT',
'ATA','ATG','ACA','ACG','AAA','AAG','AGA','AGG',
'GTC','GTT','GCC','GCT','GAC','GAT','GGC','GGT',
'GTA','GTG','GCA','GCG','GAA','GAG','GGA','GGG')
needed_codons = c('TTC','TCC','TAC','TGC',
'TTA','TCA','TAA','TGA',
'CTC','CCC','CAC','CGC',
'CTA','CCA','CAA','CGA',
'ATC','ACC','AAC','AGC',
'ATA','ACA','AAA','AGA',
'GTC','GCC','GAC','GGC',
'GTA','GCA','GAA','GGA')
df_codons_realm = df_sgc %>% select(species_name, gene_name, realm,all_of(vec_all))
sp_sum_gen = data.frame(unique(df_codons_realm$species_name))
for ( codon in vec_all){
sum_of_codon = aggregate(df_codons_realm[ ,codon], by = list(df_codons_realm$species_name), FUN = 'sum')[2]
sp_sum_gen = cbind(sp_sum_gen, sum_of_codon)
}
names(sp_sum_gen) = c('Species', vec_all)
codon_norm = data.frame()
for (i in 1:nrow(sp_sum_gen)){
org_gen = sp_sum_gen[i,]
org_gen = as.vector(org_gen)
df_out= data.frame(sp_sum_gen[i,]$Species)
for (codon in seq(from = 2, to = 65, by = 2)){
if (org_gen[1,codon] == 0) {df_out = cbind(df_out, 0)}
else {
norm_cod = org_gen[1,codon] / (org_gen[1,codon+1] + org_gen[1,codon])
df_out = cbind(df_out, norm_cod)
}
}
names(df_out) = c('Species', needed_codons)
codon_norm = rbind(codon_norm,df_out)
}
names(codon_norm) = c('species_name', needed_codons)
codon_norm = codon_norm %>% select(-c('TAA','AGA'))
df_eco = df_codons_realm[,c(1,3)]
codon_norm = merge(codon_norm, df_eco)
df_try = data.frame(unique(codon_norm))
final = data.frame()
for (org in 1:nrow(df_try)){
sp_r = df_try[org,]
vec_of_c = sp_r %>% select(TTC, TCC, TAC, TGC, CTC, CCC, CAC, CGC,
ATC, ACC, AAC, AGC, GTC, GCC, GAC, GGC)
vec_of_a = sp_r %>% select(TTA, TCA, TGA, CTA, CCA, CAA, CGA,
ATA, ACA, AAA, GTA, GCA, GAA, GGA)
med_c = median(as.numeric(vec_of_c), na.rm = TRUE)
med_a = median(as.numeric(vec_of_a), na.rm = TRUE)
sp_out = data.frame(sp_r$species_name, med_c, med_a, sp_r$realm)
final = rbind(final,sp_out)
}
names(final) = c('Species', 'med_c', 'med_a', 'realm')
View(final)
final = final[,c(1,2,3)]
#Genetics
df = read.csv('../../Body/3Results/For_Bogdan.csv') #reading file
View(df)
GhAh = df[,c(1,20,21)]
View(GhAh)
GhAh = df[,c(1,8,20,21)]
GhAh$Skew = ((GhAh$nC-GhAh$nT)/(GhAh$nC+GhAh$nT))
ggplot(GhAh, aes(x = gene_name, y = Skew))+
geom_boxplot()
GhAh = df[,c(1,8,20,21,26,27)]
GhAh = df[,c(1,8,20,21,26,27,31,32)]
GhAh = df[,c(1,8,31,32)]
GhAh$Skew = ((GhAh$neutral_c-GhAh$neutral_T)/(GhAh$neutral_c+GhAh$neutral_T))
ggplot(GhAh, aes(x = gene_name, y = Skew))+
geom_boxplot()
GhAh$Skew = (GhAh$neutral_c-GhAh$neutral_T)/(GhAh$neutral_c+GhAh$neutral_T)
ggplot(GhAh, aes(x = gene_name, y = Skew))+
geom_boxplot()
GhAh = df[,c(1,8,24,25,26,26,31,32)]
GhAh$Skew = (GhAh$neutral_c-GhAh$neutral_T)/(GhAh$neutral_c+GhAh$neutral_T)
GhAh = df[,c(1,8,24,25,26,27,31,32)]
GhAh$Skew = (GhAh$neutral_c-GhAh$neutral_T)/(GhAh$neutral_c+GhAh$neutral_T)
GhAh$Stg_Sac = (GhAh$A_fraction+GhAh$C_fraction)-(GhAh$T_fraction+GhAh$G_fraction)
ggplot(GhAh, aes(x = gene_name, y = Stg_Sac))+
geom_boxplot()
GhAh = df[,c(1,8,24,25,26,27,31,32,33)]
View(df)
GhAh = df[,c(1,8,24,25,26,27,29,30,31,32,33)]
GhAh = df[,c(1,8,29,30,31,32,33)]
GhAh$frA = GhAh$neutral_A/GhAh$neutral_amount
GhAh$frA = GhAh$neutral_A/GhAh$neutral_amount
GhAh$frG = GhAh$neutral_g/GhAh$neutral_amount
GhAh$frC = GhAh$neutral_c/GhAh$neutral_amount
GhAh$frT = GhAh$neutral_T/GhAh$neutral_amount
GhAh$Skew = (GhAh$neutral_c-GhAh$neutral_T)/(GhAh$neutral_c+GhAh$neutral_T)
GhAh$Stg_Sac = (GhAh$frA+GhAh$frC)-(GhAh$frT+GhAh$frG)
ggplot(GhAh, aes(x = gene_name, y = Stg_Sac))+
geom_boxplot()
View(codon_norm)
p = c(1,2,3,4,5)
aggregate(p)
rm(p)
GhAh = GhAh[GhAh$gene_name != 'ND6',]
View(codon_norm)
View(sp_sum_gen)
View(sp_sum_gen)
View(df_sgc)
View(df_codons_realm)
a = colnames(GhAh)
a
rm(a)
gene_vector = c('neutral_A', 'neutra;_g', 'neutral_c', 'neutral_T', 'frA', 'frG', 'frC', 'frT', 'Skew', 'Stg_Sac')
gene_stats = data.frame(unique(GhAh$species_name))
View(gene_stats)
for ( char in gene_vector){
stats1 = aggregate(GhAh[ ,char], by = list(GhAh$species_name), FUN = 'sum')
gene_stats = cbind(gene_stats, stats1)
}
gene_vector = c('neutral_A', 'neutra;\_g', 'neutral_c', 'neutral_T', 'frA', 'frG', 'frC', 'frT', 'Skew', 'Stg_Sac')
gene_stats = data.frame(unique(GhAh$species_name))
for ( char in gene_vector){
stats1 = aggregate(GhAh[ ,char], by = list(GhAh$species_name), FUN = 'sum')
gene_stats = cbind(gene_stats, stats1)
}
gene_vector = c('neutral_A', 'neutra_g', 'neutral_c', 'neutral_T', 'frA', 'frG', 'frC', 'frT', 'Skew', 'Stg_Sac')
gene_stats = data.frame(unique(GhAh$species_name))
for ( char in gene_vector){
stats1 = aggregate(GhAh[,char], by = list(GhAh$species_name), FUN = 'sum')
gene_stats = cbind(gene_stats, stats1)
}
gene_vector = c('neutral_A', 'neutral_g', 'neutral_c', 'neutral_T', 'frA', 'frG', 'frC', 'frT', 'Skew', 'Stg_Sac')
gene_stats = data.frame(unique(GhAh$species_name))
for ( char in gene_vector){
stats1 = aggregate(GhAh[,char], by = list(GhAh$species_name), FUN = 'sum')
gene_stats = cbind(gene_stats, stats1)
}
names(gene_stats) = c('Species', gene_vector)
gene_vector = c('neutral_A', 'neutral_g', 'neutral_c', 'neutral_T', 'frA', 'frG', 'frC', 'frT', 'Skew', 'Stg_Sac')
gene_stats = data.frame(unique(GhAh$species_name))
for ( char in gene_vector){
stats1 = aggregate(GhAh[,char], by = list(GhAh$species_name), FUN = 'sum')[2]
gene_stats = cbind(gene_stats, stats1)
}
names(gene_stats) = c('Species', gene_vector)
gene_vector = c('neutral_A', 'neutral_g', 'neutral_c', 'neutral_T', 'frA', 'frG', 'frC', 'frT', 'Skew', 'Stg_Sac')
gene_stats = data.frame(unique(GhAh$species_name))
for ( char in gene_vector){
stats1 = aggregate(GhAh[,char], by = list(GhAh$species_name), FUN = 'sum')[2]
stats1 = stats1/12
gene_stats = cbind(gene_stats, stats1)
}
names(gene_stats) = c('Species', gene_vector)
gene_vector = c('frA', 'frG', 'frC', 'frT', 'Skew', 'Stg_Sac')
gene_stats = data.frame(unique(GhAh$species_name))
for ( char in gene_vector){
stats1 = aggregate(GhAh[,char], by = list(GhAh$species_name), FUN = 'sum')[2]
stats1 = stats1/12
gene_stats = cbind(gene_stats, stats1)
}
names(gene_stats) = c('Species', gene_vector)
names(gene_stats) = c('Species', gene_vector)
final_stats = merge(final, gene_stats, by = 'Species')
View(final_stats)
#PCA analysis + biplot
install.packages('devtools')
library(devtools)
install_github("vqv/ggbiplot")
library(ggbiplot)
view(mtcars)
View(mtcars)
rownames(final_stats) = final_stats$Species
final_stats = final_stats[,c(2:9)]
final_stats.pca = prcomp(final_stats, center = TRUE, scale. = TRUE)
View(final_stats.pca)
Summary(final_stats.pca)
summary(final_stats.pca)
str(final_stats.pca)
ggbiplot(final_stats.pca)
rm(list=ls(all=T))
library(dplyr)
library(ggplot2)
df = read.csv('../../Body/3Results/For_Bogdan.csv') #reading file
df = df[df$gene_name != 'ND6',] #deleting ND6
df_sgc = df[,c(1,2,3,4,5,8, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97)] #getting codon usage
vec_all = c('TTC','TTT','TCC','TCT','TAC','TAT','TGC','TGT',
'TTA','TTG','TCA','TCG','TAA','TAG','TGA','TGG',
'CTC','CTT','CCC','CCT','CAC','CAT','CGC','CGT',
'CTA','CTG','CCA','CCG','CAA','CAG','CGA','CGG',
'ATC','ATT','ACC','ACT','AAC','AAT','AGC','AGT',
'ATA','ATG','ACA','ACG','AAA','AAG','AGA','AGG',
'GTC','GTT','GCC','GCT','GAC','GAT','GGC','GGT',
'GTA','GTG','GCA','GCG','GAA','GAG','GGA','GGG')
needed_codons = c('TTC','TCC','TAC','TGC',
'TTA','TCA','TAA','TGA',
'CTC','CCC','CAC','CGC',
'CTA','CCA','CAA','CGA',
'ATC','ACC','AAC','AGC',
'ATA','ACA','AAA','AGA',
'GTC','GCC','GAC','GGC',
'GTA','GCA','GAA','GGA')
df_codons_realm = df_sgc %>% select(species_name, gene_name, realm,all_of(vec_all))
sp_sum_gen = data.frame(unique(df_codons_realm$species_name))
for ( codon in vec_all){
sum_of_codon = aggregate(df_codons_realm[ ,codon], by = list(df_codons_realm$species_name), FUN = 'sum')[2]
sp_sum_gen = cbind(sp_sum_gen, sum_of_codon)
}
names(sp_sum_gen) = c('Species', vec_all)
codon_norm = data.frame()
for (i in 1:nrow(sp_sum_gen)){
org_gen = sp_sum_gen[i,]
org_gen = as.vector(org_gen)
df_out= data.frame(sp_sum_gen[i,]$Species)
for (codon in seq(from = 2, to = 65, by = 2)){
if (org_gen[1,codon] == 0) {df_out = cbind(df_out, 0)}
else {
norm_cod = org_gen[1,codon] / (org_gen[1,codon+1] + org_gen[1,codon])
df_out = cbind(df_out, norm_cod)
}
}
names(df_out) = c('Species', needed_codons)
codon_norm = rbind(codon_norm,df_out)
}
names(codon_norm) = c('species_name', needed_codons)
codon_norm = codon_norm %>% select(-c('TAA','AGA'))
df_eco = df_codons_realm[,c(1,3)]
codon_norm = merge(codon_norm, df_eco)
df_try = data.frame(unique(codon_norm))
final = data.frame()
for (org in 1:nrow(df_try)){
sp_r = df_try[org,]
vec_of_c = sp_r %>% select(TTC, TCC, TAC, TGC, CTC, CCC, CAC, CGC,
ATC, ACC, AAC, AGC, GTC, GCC, GAC, GGC)
vec_of_a = sp_r %>% select(TTA, TCA, TGA, CTA, CCA, CAA, CGA,
ATA, ACA, AAA, GTA, GCA, GAA, GGA)
med_c = median(as.numeric(vec_of_c), na.rm = TRUE)
med_a = median(as.numeric(vec_of_a), na.rm = TRUE)
sp_out = data.frame(sp_r$species_name, med_c, med_a, sp_r$realm)
final = rbind(final,sp_out)
}
names(final) = c('Species', 'med_c', 'med_a', 'realm')
#Making points with realms
df_antarctic = final[final$realm == 'Antarctic' | final$realm == 'Nearctic' | final$realm == 'Palearctic',]
df_every = final[final$realm != 'Antarctic' & final$realm != 'Nearctic' & final$realm != 'Palearctic',]
df_antarctic$point = 1
df_every$point = 0
df_all = data.frame()
df_all = rbind(df_antarctic, df_every)
df_all$Species = gsub(' ','_', df_all$Species)
df_all$Species = as.character(df_all$Species)
#Alya's script
library(ape)
library(geiger)
library(caper)
tree <- read.tree("../../Body/1Raw/mtalign.aln.treefile.rooted")
row.names(df_all) = df_all$Species
tree_w = treedata(tree, df_all, sort=T, warnings=T)$phy
data<-as.data.frame(treedata(tree_w, df_all, sort=T, warnings=T)$data)
data$med_c = as.numeric(as.character(data$med_c))
data$med_a = as.numeric(as.character(data$med_a))
data$point= as.numeric(as.character(data$point))
data$realm= as.character(data$realm)
table(data$point)
MutComp = comparative.data(tree_w, data, Species, vcv=TRUE)
model = pgls(point ~ med_a + med_c, MutComp, lambda="ML")
summary(model)
tree_w3 = treedata(tree1, df_all, sort=T, warnings=T)$phy
data3 = as.data.frame(treedata(tree_w3, df_all, sort=T, warnings=T)$data)
#Bogdan tree
tree1 = read.tree("../../Body/3Results/phylo.treefile")
#Bogdan tree
tree1 = read.tree("../../Body/3Results/phylo.treefile")
tree_w3 = treedata(tree1, df_all, sort=T, warnings=T)$phy
data3 = as.data.frame(treedata(tree_w3, df_all, sort=T, warnings=T)$data)
MutComp3 = comparative.data(tree_w3, data3, Species, vcv = TRUE)
#new birds data
avonet = read.csv2("../../Body/1Raw/Avonet_data.csv", header = TRUE, sep = ",")
names(avonet) = c('Species', 'Family', 'Order', 'Total_individuals', 'Female', 'Male', 'Unknown', 'Complete_measures',
'Beak_length_Culmen', 'Beak_length_Nares', 'Beak_width', 'Beak_depth', 'Tarsus_length', 'Wing_length',
'Kipps_distance', 'Secondary1', 'Hand_wing_index', 'Tail_length', 'Mass', 'Mass_source', 'Mass_refs_other',
'Inference', 'Treits_inferred', 'Reference_species', 'Habitat', 'Habitat_density', 'Migration', 'Trophic_level',
'Trophic_niche', 'Primary_lifestyle', 'Min_latitude', 'Max_latitude', 'Centroid_latitude', 'Centroid_longitude',
'Range_size', 'Species_status')
avonet$Species = gsub(' ','_', avonet$Species)
df_all1 = merge(df_all, avonet, by = 'Species')
#all ecology PGLS analysis
tree <- read.tree("../../Body/1Raw/mtalign.aln.treefile.rooted")
phy=multi2di(tree1)
row.names(df_all1) = df_all1$Species
tree_all = treedata(phy, df_all1, sort=T, warnings=T)$phy
data_all<-as.data.frame(treedata(tree_all, df_all1, sort=T, warnings=T)$data)
data_all[is.na(data_all)] <- 0
data_all$Beak_width = as.numeric(as.character(data_all$Beak_width))
data_all$med_c = as.numeric(as.character(data_all$med_c))
data_all$med_a = as.numeric(as.character(data_all$med_a))
data_all$point= as.numeric(as.character(data_all$point))
data_all$realm= as.character(data_all$realm)
data_all$Tail_length = as.numeric(as.character(data_all$Tail_length))
MutComp_all = comparative.data(tree_all, data_all, Species, vcv = TRUE)
model_all = pgls(med_c ~ Beak_width + Tail_length, MutComp_all, lambda = "ML")
summary(model_all)
View(data_all)
names(data_all)
pgls_eco = data.frame()
pgls_eco$ecology = eco_vec
#PGLS table
eco_vec = c('point', 'Beak_length_Culmen', 'Beak_length_Nares', 'Beak_width', 'Beak_depth', 'Tarsus_length',
'Wing_length', 'Kipps_distance', 'Hand_wing_index', 'Tail_length', 'Mass')
pgls_eco = data.frame()
pgls_eco$ecology = eco_vec
pgls_eco = data.frame(eco_vec)
View(pgls_eco)
names(pgls_eco) = 'Ecology'
pgls_eco$p_meda = ''
if (pgls_eco[pgls_eco$Ecology == 'point',])
{
pgls_eco$p_meda = 15
}
if (pgls_eco$Ecology == 'point')
{
pgls_eco$p_meda = 15
}
if (pgls_eco$Ecology == 'point',)
pgls_eco[pgls_eco$Ecology == 'point',]
pgls_eco$p_meda = ''
pgls_eco[pgls_eco$Ecology == 'point',]
pgls_eco[,pgls_eco$Ecology == 'point']
if (pgls_eco[pgls_eco$Ecology == 'point',])
{
pgls_eco$ pgls_eco$p_meda = 15
}
a = subset(pgls_eco, Ecology == 'point')
View(a)
ab = data.frame()
ab = rbind(ab, a)
View(ab)
rm(a)
rm(ab)
View(model_all)
summary(model_all)
#rm(ab)
#ab = data.frame()
#a = subset(pgls_eco, Ecology == 'point')
#ab = rbind(ab, a)
model_all$model
#rm(ab)
#ab = data.frame()
#a = subset(pgls_eco, Ecology == 'point')
#ab = rbind(ab, a)
model_all$formula
#rm(ab)
#ab = data.frame()
#a = subset(pgls_eco, Ecology == 'point')
#ab = rbind(ab, a)
model_all$call
#rm(ab)
#ab = data.frame()
#a = subset(pgls_eco, Ecology == 'point')
#ab = rbind(ab, a)
model_all$RMS
#rm(ab)
#ab = data.frame()
#a = subset(pgls_eco, Ecology == 'point')
#ab = rbind(ab, a)
model_all$NMS
#rm(ab)
#ab = data.frame()
#a = subset(pgls_eco, Ecology == 'point')
#ab = rbind(ab, a)
model_all$NSSQ
#rm(ab)
#ab = data.frame()
#a = subset(pgls_eco, Ecology == 'point')
#ab = rbind(ab, a)
model_all$RSSQ
#rm(ab)
#ab = data.frame()
#a = subset(pgls_eco, Ecology == 'point')
#ab = rbind(ab, a)
model_all$aic
#rm(ab)
#ab = data.frame()
#a = subset(pgls_eco, Ecology == 'point')
#ab = rbind(ab, a)
model_all$aicc
#rm(ab)
#ab = data.frame()
#a = subset(pgls_eco, Ecology == 'point')
#ab = rbind(ab, a)
model_all$n
#rm(ab)
#ab = data.frame()
#a = subset(pgls_eco, Ecology == 'point')
#ab = rbind(ab, a)
model_all$k
#rm(ab)
#ab = data.frame()
#a = subset(pgls_eco, Ecology == 'point')
#ab = rbind(ab, a)
model_all$sterr
#rm(ab)
#ab = data.frame()
#a = subset(pgls_eco, Ecology == 'point')
#ab = rbind(ab, a)
model_all$fitted
#rm(ab)
#ab = data.frame()
#a = subset(pgls_eco, Ecology == 'point')
#ab = rbind(ab, a)
model_all$residuals
#rm(ab)
#ab = data.frame()
#a = subset(pgls_eco, Ecology == 'point')
#ab = rbind(ab, a)
model_all$phyres
#rm(ab)
#ab = data.frame()
#a = subset(pgls_eco, Ecology == 'point')
#ab = rbind(ab, a)
model_all$x
#rm(ab)
#ab = data.frame()
#a = subset(pgls_eco, Ecology == 'point')
#ab = rbind(ab, a)
model_all$data
#rm(ab)
#ab = data.frame()
#a = subset(pgls_eco, Ecology == 'point')
#ab = rbind(ab, a)
model_all$varNames
#rm(ab)
#ab = data.frame()
#a = subset(pgls_eco, Ecology == 'point')
#ab = rbind(ab, a)
model_all$y
#rm(ab)
#ab = data.frame()
#a = subset(pgls_eco, Ecology == 'point')
#ab = rbind(ab, a)
model_all$param
#rm(ab)
#ab = data.frame()
#a = subset(pgls_eco, Ecology == 'point')
#ab = rbind(ab, a)
model_all$mlVals
#rm(ab)
#ab = data.frame()
#a = subset(pgls_eco, Ecology == 'point')
#ab = rbind(ab, a)
model_all$namey
#rm(ab)
#ab = data.frame()
#a = subset(pgls_eco, Ecology == 'point')
#ab = rbind(ab, a)
model_all$bounds
#rm(ab)
#ab = data.frame()
#a = subset(pgls_eco, Ecology == 'point')
#ab = rbind(ab, a)
model_all$Vt
#rm(ab)
#ab = data.frame()
#a = subset(pgls_eco, Ecology == 'point')
#ab = rbind(ab, a)
model_all$dname
#rm(ab)
#ab = data.frame()
#a = subset(pgls_eco, Ecology == 'point')
#ab = rbind(ab, a)
model_all$param.CI
#rm(ab)
#ab = data.frame()
#a = subset(pgls_eco, Ecology == 'point')
#ab = rbind(ab, a)
model_all$bounds
