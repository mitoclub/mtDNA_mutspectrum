fly_box3
fly_box4 = ggplot(valya_gene, aes(x = far_migration, y = ghahSkew))+
geom_boxplot(outlier.shape = NA, notch = T)+
xlab('Diving')+
ylab('GhAhSkew')
fly_box4 = ggplot(valya_gene, aes(x = far_migration, y = ghahSkew))+
geom_boxplot(outlier.shape = NA, notch = T)+
xlab('Far_migration')+
ylab('GhAhSkew')
fly_box4
fly_box5 = ggplot(valya_gene, aes(x = flying, y = chthSkew))+
geom_boxplot(outlier.shape = NA, notch = T)+
xlab('Ability to fly')+
ylab('ChThSkew')
fly_box5
fly_box6 = ggplot(valya_gene, aes(x = wintering, y = chthSkew))+
geom_boxplot(outlier.shape = NA, notch = T)+
xlab('Wintering')+
ylab('ChThSkew')
fly_box6
fly_box7 = ggplot(valya_gene, aes(x = diving, y = chthSkew))+
geom_boxplot(outlier.shape = NA, notch = T)+
xlab('Diving')+
ylab('ChThSkew')
fly_box7
fly_box8 = ggplot(valya_gene, aes(x = far_migration, y = chthSkew))+
geom_boxplot(outlier.shape = NA, notch = T)+
xlab('Far_migration')+
ylab('ChThSkew')
fly_box8
#Valya's data boxplots
fly_box1 = ggplot(valya_gene, aes(x = flying, y = ghahSkew))+
geom_boxplot(outlier.shape = NA, notch = T)+
xlab('Ability to fly')+
ylab('GhAhSkew')
fly_box1
fly_box2 = ggplot(valya_gene, aes(x = wintering, y = ghahSkew))+
geom_boxplot(outlier.shape = NA, notch = T)+
xlab('Wintering')+
ylab('GhAhSkew')
fly_box2
fly_box3 = ggplot(valya_gene, aes(x = diving, y = ghahSkew))+
geom_boxplot(outlier.shape = NA, notch = T)+
xlab('Diving')+
ylab('GhAhSkew')
fly_box3
fly_box4 = ggplot(valya_gene, aes(x = far_migration, y = ghahSkew))+
geom_boxplot(outlier.shape = NA, notch = T)+
xlab('Far_migration')+
ylab('GhAhSkew')
fly_box4
fly_box5 = ggplot(valya_gene, aes(x = flying, y = chthSkew))+
geom_boxplot(outlier.shape = NA, notch = T)+
xlab('Ability to fly')+
ylab('ChThSkew')
fly_box5
fly_box6 = ggplot(valya_gene, aes(x = wintering, y = chthSkew))+
geom_boxplot(outlier.shape = NA, notch = T)+
xlab('Wintering')+
ylab('ChThSkew')
fly_box6
fly_box7 = ggplot(valya_gene, aes(x = diving, y = chthSkew))+
geom_boxplot(outlier.shape = NA, notch = T)+
xlab('Diving')+
ylab('ChThSkew')
fly_box7
fly_box8 = ggplot(valya_gene, aes(x = far_migration, y = chthSkew))+
geom_boxplot(outlier.shape = NA, notch = T)+
xlab('Far_migration')+
ylab('ChThSkew')
fly_box8
install.packages("ggbiplot")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggpubr")
install.packages("ggpubr")
install.packages("ggpubr")
rm(list = ls(all=TRUE))
df_mtdna = read.csv('../../Head/2Scripts/Birds_dataset_paper.csv')
install.packages('plotly')
install.packages('dplyr')
install.packages('dplyr')
install.packages("dplyr")
#Work with Valya's data
valya_data = read.csv('../../Head/2Scripts/valyadata_final.csv')
valya_data = na.omit(valya_data)
gene_data = df_mtdna[,c('species_name', 'ghahSkew', 'chthSkew', 'fAn', 'fGn', 'fCn', 'fTn', 'Stg_Sac', 'med_G', 'med_T')]
gene_data$species_name = gsub(' ', '_', gene_data$species_name)
valya_data["species_name"][valya_data["species_name"] == "Strigops_habroptilus"] = "Strigops_habroptila"
valya_gene = merge(gene_data, valya_data, by = 'species_name')
View(valya_gene)
med1 = ggplot(valya_gene, aes(x = flying, y = med_G))+
geom_boxplot(outlier.shape = NA, notch = T)+
xlab('Ability to fly')+
ylab('med_G')
library(ggplot2)
med1 = ggplot(valya_gene, aes(x = flying, y = med_G))+
geom_boxplot(outlier.shape = NA, notch = T)+
xlab('Ability to fly')+
ylab('med_G')
med1
med2 = ggplot(valya_gene, aes(x = wintering, y = med_G))+
geom_boxplot(outlier.shape = NA, notch = T)+
xlab('Wintering')+
ylab('med_G')
med2
med3 = ggplot(valya_gene, aes(x = divers, y = med_G))+
geom_boxplot(outlier.shape = NA, notch = T)+
xlab('Divers')+
ylab('med_G')
med3
med3 = ggplot(valya_gene, aes(x = diving, y = med_G))+
geom_boxplot(outlier.shape = NA, notch = T)+
xlab('Divers')+
ylab('med_G')
med3
med4 = ggplot(valya_gene, aes(x = far_migration, y = med_G))+
geom_boxplot(outlier.shape = NA, notch = T)+
xlab('Far migration')+
ylab('med_G')
med4
med5 = ggplot(valya_gene, aes(x = flying, y = med_T))+
geom_boxplot(outlier.shape = NA, notch = T)+
xlab('Ability to fly')+
ylab('med_T')
med5
med6 = ggplot(valya_gene, aes(x = wintering, y = med_T))+
geom_boxplot(outlier.shape = NA, notch = T)+
xlab('Wintering')+
ylab('med_T')
med6
med7 = ggplot(valya_gene, aes(x = diving, y = med_T))+
geom_boxplot(outlier.shape = NA, notch = T)+
xlab('Divers')+
ylab('med_T')
med7
med8 = ggplot(valya_gene, aes(x = far_migration, y = med_T))+
geom_boxplot(outlier.shape = NA, notch = T)+
xlab('Far migration')+
ylab('med_T')
med8
med7
med1 = ggplot(valya_gene, aes(x = flying, y = med_G))+
geom_boxplot(outlier.shape = NA, notch = T)+
xlab('Ability to fly')+
ylab('med_G')
med1
med2 = ggplot(valya_gene, aes(x = wintering, y = med_G))+
geom_boxplot(outlier.shape = NA, notch = T)+
xlab('Wintering')+
ylab('med_G')
med2
med3 = ggplot(valya_gene, aes(x = diving, y = med_G))+
geom_boxplot(outlier.shape = NA, notch = T)+
xlab('Divers')+
ylab('med_G')
med3
med4 = ggplot(valya_gene, aes(x = far_migration, y = med_G))+
geom_boxplot(outlier.shape = NA, notch = T)+
xlab('Far migration')+
ylab('med_G')
med4
med5 = ggplot(valya_gene, aes(x = flying, y = med_T))+
geom_boxplot(outlier.shape = NA, notch = T)+
xlab('Ability to fly')+
ylab('med_T')
med5
med5 = ggplot(valya_gene, aes(x = flying, y = med_T))+
geom_boxplot(outlier.shape = NA, notch = T)+
xlab('Ability to fly')+
ylab('med_T')
med5
med6 = ggplot(valya_gene, aes(x = wintering, y = med_T))+
geom_boxplot(outlier.shape = NA, notch = T)+
xlab('Wintering')+
ylab('med_T')
med6
med7 = ggplot(valya_gene, aes(x = diving, y = med_T))+
geom_boxplot(outlier.shape = NA, notch = T)+
xlab('Divers')+
ylab('med_T')
med7
med8 = ggplot(valya_gene, aes(x = far_migration, y = med_T))+
geom_boxplot(outlier.shape = NA, notch = T)+
xlab('Far migration')+
ylab('med_T')
med8
library(ggbiplot)
library(ggplot2)
library(ggpubr)
df_mtdna = read.csv('../../Head/2Scripts/Birds_dataset_paper.csv')
rm(list = ls(all=TRUE))
df_mtdna = read.csv('../../Head/2Scripts/Birds_dataset_paper.csv')
View(df_mtdna)
df_sgc = df_mtdna[,c(1,2,3,4,5,8, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97)] #getting codon usage
View(df_sgc)
df_sgc = df_mtdna[,c(2, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95)] #getting codon usage
df_sgc = df_mtdna[,c(2, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95)] #getting codon usage
df_sgc = df_mtdna[,c(2, 6, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95)] #getting codon usage
vec_all = c('TTC','TTT','TCC','TCT','TAC','TAT','TGC','TGT',
'TTA','TTG','TCA','TCG','TAA','TAG','TGA','TGG',
'CTC','CTT','CCC','CCT','CAC','CAT','CGC','CGT',
'CTA','CTG','CCA','CCG','CAA','CAG','CGA','CGG',
'ATC','ATT','ACC','ACT','AAC','AAT','AGC','AGT',
'ATA','ATG','ACA','ACG','AAA','AAG','AGA','AGG',
'GTC','GTT','GCC','GCT','GAC','GAT','GGC','GGT',
'GTA','GTG','GCA','GCG','GAA','GAG','GGA','GGG')
needed_codons = c('TTC','TCC','TAC','TGC',
'TTA','TCA','TAA','TGA',
'CTC','CCC','CAC','CGC',
'CTA','CCA','CAA','CGA',
'ATC','ACC','AAC','AGC',
'ATA','ACA','AAA','AGA',
'GTC','GCC','GAC','GGC',
'GTA','GCA','GAA','GGA')
rm(needed_codons)
#df_out= data.frame(sp_sum_gen[i,]$Species)
#for (codon in seq(from = 2, to = 65, by = 2)){
#if (org_gen[1,codon] == 0) {df_out = cbind(df_out, 0)}
#else {
#norm_cod = org_gen[1,codon] / (org_gen[1,codon+1] + org_gen[1,codon])
#df_out = cbind(df_out, norm_cod)
#}
#}
#names(df_out) = c('Species', needed_codons)
#codon_norm = rbind(codon_norm,df_out)
}
for (i in 1:nrow(sp_sum_gen)){
org_gen = sp_sum_gen[i,]
#org_gen = as.vector(org_gen)
#df_out= data.frame(sp_sum_gen[i,]$Species)
#for (codon in seq(from = 2, to = 65, by = 2)){
#if (org_gen[1,codon] == 0) {df_out = cbind(df_out, 0)}
#else {
#norm_cod = org_gen[1,codon] / (org_gen[1,codon+1] + org_gen[1,codon])
#df_out = cbind(df_out, norm_cod)
#}
#}
#names(df_out) = c('Species', needed_codons)
#codon_norm = rbind(codon_norm,df_out)
}
for (i in 1:nrow(df_sgc)){
org_gen = df_sgc[i,]
#org_gen = as.vector(org_gen)
#df_out= data.frame(sp_sum_gen[i,]$Species)
#for (codon in seq(from = 2, to = 65, by = 2)){
#if (org_gen[1,codon] == 0) {df_out = cbind(df_out, 0)}
#else {
#norm_cod = org_gen[1,codon] / (org_gen[1,codon+1] + org_gen[1,codon])
#df_out = cbind(df_out, norm_cod)
#}
#}
#names(df_out) = c('Species', needed_codons)
#codon_norm = rbind(codon_norm,df_out)
}
View(org_gen)
org_gen = as.vector(org_gen)
for (i in 1:nrow(df_sgc)){
org_gen = df_sgc[i,]
org_gen = as.vector(org_gen)
#df_out= data.frame(sp_sum_gen[i,]$Species)
#for (codon in seq(from = 2, to = 65, by = 2)){
#if (org_gen[1,codon] == 0) {df_out = cbind(df_out, 0)}
#else {
#norm_cod = org_gen[1,codon] / (org_gen[1,codon+1] + org_gen[1,codon])
#df_out = cbind(df_out, norm_cod)
#}
#}
#names(df_out) = c('Species', needed_codons)
#codon_norm = rbind(codon_norm,df_out)
}
View(org_gen)
df_out= data.frame(df_sgc[i,]$species_name)
View(df_out)
View(df_out)
org_gen[1,4]
org_gen[1]
org_gen[1:4]
org_gen[1, 'TTT']
for (i in 1:nrow(df_sgc)){
org_gen = df_sgc[i,]
org_gen = as.vector(org_gen)
df_out= data.frame(df_sgc[i,]$species_name, df_sgc[i,]$gene_name)
for (codon in seq(from = 1, to = 65)){
if (org_gen[1,codon] == 0) {df_out = cbind(df_out, 0)}
else {
norm_cod = org_gen[1,codon] / (org_gen[1,codon+1] + org_gen[1,codon])
df_out = cbind(df_out, norm_cod)
}
}
names(df_out) = c('Species', needed_codons)
codon_norm = rbind(codon_norm,df_out)
}
View(df_out)
for (i in 1:nrow(df_sgc)){
org_gen = df_sgc[i,]
org_gen = as.vector(org_gen)
df_out= data.frame(df_sgc[i,]$species_name, df_sgc[i,]$gene_name)
for (codon in seq(from = 1, to = 65)){
if (org_gen[1,codon] == 0) {df_out = cbind(df_out, 0)}
else {
norm_cod = org_gen[1,codon] / (org_gen[1,codon+1] + org_gen[1,codon])
df_out = cbind(df_out, norm_cod)
}
}
names(df_out) = c('Species', needed_codons)
codon_norm = rbind(codon_norm,df_out)
}
rm(list = ls(all=TRUE))
df_mtdna = read.csv('../../Head/2Scripts/Birds_dataset_paper.csv')
df_sgc = df_mtdna[,c(2, 6, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95)] #getting codon usage
anti_vec_all = c('TTC','TTT','TCC','TCT','TAC','TAT','TGC','TGT',
'TTA','TTG','TCA','TCG','TAA','TAG','TGA','TGG',
'CTC','CTT','CCC','CCT','CAC','CAT','CGC','CGT',
'CTA','CTG','CCA','CCG','CAA','CAG','CGA','CGG',
'ATC','ATT','ACC','ACT','AAC','AAT','AGC','AGT',
'ATA','ATG','ACA','ACG','AAA','AAG','AGA','AGG',
'GTC','GTT','GCC','GCT','GAC','GAT','GGC','GGT',
'GTA','GTG','GCA','GCG','GAA','GAG','GGA','GGG')
vec_all = c('TTT','TTC','TCT','TCC','TAT','TAC','TGT','TGC',
'TTG','TTA','TCG','TCA','TAG','TAA','TGG','TGA',
'CTT','CTC','CCT','CCC','CAT','CAC','CGT','CGC',
'CTG','CTA','CCG','CCA','CAG','CAA','CGG','CGA',
'ATT','ATC','ACT','ACC','AAT','AAC','AGT','AGC',
'ATG','ATA','ACG','ACA','AAG','AAA','AGG','AGA',
'GTT','GTC','GCT','GCC','GAT','GAC','GGT','GGC',
'GTG','GTA','GCG','GCA','GAG','GAA','GGG','GGA')
df_aa = data.frame()
for (i in 1:nrow(df_sgc)){
org_gen = df_sgc[i,]
org_gen = as.vector(org_gen)
df_out= data.frame(df_sgc[i,]$species_name, df_sgc[i,]$gene_name)
for (codon in seq(from = 1, to = 64)){
if (as.numeric(as.character(unlist(org_gen[vec_all[codon]]))) + as.numeric(as.character(unlist(org_gen[anti_vec_all[codon]]))) == 0)
{
norm_cod = 0
df_out = cbind(df_out, norm_cod)
}
else
{
norm_cod = (as.numeric(as.character(unlist(org_gen[vec_all[codon]]))))/(as.numeric(as.character(unlist(org_gen[vec_all[codon]]))) + as.numeric(as.character(unlist(org_gen[anti_vec_all[codon]]))))
df_out = cbind(df_out, norm_cod)
}
}
df_aa = rbind(df_aa, df_out)
}
View(df_aa)
names(df_aa) = c('species_name', 'gene_name', vec_all)
write.csv(df_aa, file = 'Aminoacids_shift_birds')
write.csv(df_aa, file = 'Aminoacids_shift_birds.csv')
rm(list=ls(all=TRUE))
library(seqinr)
library(ggplot2)
############ Syn mut
df_mtdna = read.csv('../../Head/2Scripts/Birds_dataset_paper.csv')
df_shift = read.csv('../../Head/2Scripts/Aminoacids_shift_birds.csv')
View(df_shift)
VecOfSynFourFoldDegenerateSites <- c('CTT', 'CTC', 'CTA', 'CTG',
'GTT', 'GTC', 'GTA', 'GTG',
'TCT', 'TCC', 'TCA', 'TCG',
'CCT', 'CCC', 'CCA', 'CCG',
'ACT', 'ACC', 'ACA', 'ACG',
'GCT', 'GCC', 'GCA', 'GCG',
'CGT', 'CGC', 'CGA', 'CGG',
'GGT', 'GGC', 'GGA', 'GGG')
getVecOfThirdNucleotides4f = function(x){
codonsVec = splitseq(s2c(x))
codons4f = codonsVec[codonsVec %in% VecOfSynFourFoldDegenerateSites]
thirdPosList = gsub("CTA|GTA|TCA|CCA|ACA|GCA|CGA|GGA", 'A', codons4f)
thirdPosList = gsub("CTT|GTT|TCT|CCT|ACT|GCT|CGT|GGT", 'T', thirdPosList)
thirdPosList = gsub("CTG|GTG|TCG|CCG|ACG|GCG|CGG|GGG", 'G', thirdPosList)
thirdPosList = gsub("CTC|GTC|TCC|CCC|ACC|GCC|CGC|GGC", 'C', thirdPosList)
thirdPosVec = paste(as.vector(thirdPosList), collapse = '')
return(thirdPosVec)
}
df_shift$ThirdPos4f = lapply(as.character( getVecOfThirdNucleotides4f)
df_shift$ThirdPos4f = lapply(as.character(getVecOfThirdNucleotides4f))
df_shift$ThirdPos4f = lapply(as.character(getVecOfThirdNucleotides4f))
rm(list=ls(all=TRUE))
library(seqinr)
library(ggplot2)
############ Syn mut
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip")
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")){file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")}
names(SynNuc)
View(SynNuc)
SynNuc = SynNuc[!(SynNuc$Gene %in% c('ND1', 'ND2', 'ND6')),]
VecOfSynFourFoldDegenerateSites <- c('CTT', 'CTC', 'CTA', 'CTG',
'GTT', 'GTC', 'GTA', 'GTG',
'TCT', 'TCC', 'TCA', 'TCG',
'CCT', 'CCC', 'CCA', 'CCG',
'ACT', 'ACC', 'ACA', 'ACG',
'GCT', 'GCC', 'GCA', 'GCG',
'CGT', 'CGC', 'CGA', 'CGG',
'GGT', 'GGC', 'GGA', 'GGG')
getVecOfThirdNucleotides4f = function(x){
codonsVec = splitseq(s2c(x))
codons4f = codonsVec[codonsVec %in% VecOfSynFourFoldDegenerateSites]
thirdPosList = gsub("CTA|GTA|TCA|CCA|ACA|GCA|CGA|GGA", 'A', codons4f)
thirdPosList = gsub("CTT|GTT|TCT|CCT|ACT|GCT|CGT|GGT", 'T', thirdPosList)
thirdPosList = gsub("CTG|GTG|TCG|CCG|ACG|GCG|CGG|GGG", 'G', thirdPosList)
thirdPosList = gsub("CTC|GTC|TCC|CCC|ACC|GCC|CGC|GGC", 'C', thirdPosList)
thirdPosVec = paste(as.vector(thirdPosList), collapse = '')
return(thirdPosVec)
}
df_mtdna = read.csv('../../Head/2Scripts/Birds_dataset_paper.csv')
View(df_mtdna)
df_shift = read.csv('../../Head/2Scripts/Aminoacids_shift_birds.csv')
SynNuc$ThirdPos4f = lapply(as.character(SynNuc$CodonsNoOverlap), getVecOfThirdNucleotides4f) #CodonsNoOverlap -> sequence
df_mtdna$ThirdPos4f = lapply(as.character(df_mtdna$sequence), getVecOfThirdNucleotides4f)
df_need = df_mtdna[,c('species_name', "sequence", "ThirdPos4f")]
View(df_need)
df_need = df_mtdna[,c('species_name',"gene_name", "sequence", "ThirdPos4f")]
df_need = df_mtdna[,c('species_name',"gene_name", "sequence", "ThirdPos4f", "realm")]
df_need$gene_name =  ordered(df_need$gene_name, levels = c('COX1','COX2','ATP8','ATP6','COX3','ND3','ND4L','ND4','ND5','CytB', 'ND1', 'ND2'))
df_need = df_mtdna[,c('species_name',"gene_name", "sequence", "ThirdPos4f", "realm")]
df_need$gene_name
df_need$gene_name =  ordered(df_need$gene_name, levels = c('COX1','COX2','ATP8','ATP6','COX3','ND3','ND4L','ND4','ND5','CYTB', "ND1", "ND2"))
df_need = df_need[order(df_need$gene_name),]
nuclCount = function(seq, char){
cnt = nchar(as.character(seq)) - nchar(gsub(char, "", seq))
return(cnt)
}
tCount = sapply(df_need, nuclCount, char='T')
View(tCount)
View(df_shift)
#work from internet
df_shift = df_shift[,c(2:67)]
df_shift1 <- melt(df_shift ,  id.vars = 'gene_name', variable.name = 'gene')
#work from internet
install.packages(reshape2)
#work from internet
install.packages('reshape2')
library(reshape2)
df_shift1 <- melt(df_shift ,  id.vars = 'gene_name', variable.name = 'gene')
View(df_shift1)
df <- data.frame(index=c(1, 2, 3, 4, 5, 6),
var1=c(4, 4, 5, 4, 3, 2),
var2=c(1, 2, 4, 4, 6, 9),
var3=c(9, 9, 9, 5, 5, 3))
#melt data frame into long format
df <- melt(df ,  id.vars = 'index', variable.name = 'series')
View(df)
df <- data.frame(index=c(1, 2, 3, 4, 5, 6),
var1=c(4, 4, 5, 4, 3, 2),
var2=c(1, 2, 4, 4, 6, 9),
var3=c(9, 9, 9, 5, 5, 3))
View(df)
#melt data frame into long format
df1 <- melt(df ,  id.vars = 'index', variable.name = 'series')
View(df1)
View(df_shift)
df_shift2 = df_shift[,c(3:67)]
df_shift2 = df_shift[,c(2:66)]
View(df_shift2)
df_shift3 = melt(df_shift2, id.vars = 'gene_name')
View(df_shift3)
ggplot(df_shift3, aes(x = variable, y = value))+
geom_boxplot(fill = gene_name)
ggplot(df_shift3, aes(x = variable, y = value))+
geom_bar(fill = gene_name)
names(df_shift3)
ggplot(df_shift3, aes(x = variable, y = value))+
geom_bar(fill = 'gene_name')
rlang::last_error()
ggplot(df_shift3, aes(x = variable, y = value))+
geom_bar()
ggplot(df_shift3, aes(x = variable, y = value))+
geom_boxplot()
ggplot(df_shift3, aes(x = variable, y = value))+
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90))
ggplot(df_shift3, aes(x = variable, y = value))+
geom_boxplot(fill = gene_name)+
theme(axis.text.x = element_text(angle = 90))
ggplot(df_shift3, aes(x = variable, y = value))+
geom_boxplot(color = gene_name)+
theme(axis.text.x = element_text(angle = 90))
ggplot(df_shift3, aes(x = variable, y = value))+
geom_boxplot(color = df_shift3$gene_name)+
theme(axis.text.x = element_text(angle = 90))
ggplot(df_shift3, aes(x = variable, y = value))+
geom_boxplot(fill = df_shift3$gene_name)+
theme(axis.text.x = element_text(angle = 90))
ggplot(df_shift3, aes(x = variable, y = value, fill = df_shift3$gene_name))+
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90))
ggplot(df_shift3, aes(x = variable, y = value, fill = gene_name))+
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90))
#plotly work
library(plotly)
View(df_shift3)
plot_ly(
data = df_shift3,
y = ~value,
x = ~variable,
type = "box",
color = ~gene_name,
showlegend = FALSE
)
