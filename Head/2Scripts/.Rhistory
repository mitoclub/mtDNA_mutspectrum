model1 = pgls(med_c ~ coastal1, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(med_c ~ grassland, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(med_c ~ wetland, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(med_c ~ forest, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(med_c ~ shrubland, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(med_c ~ woodland1, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(med_c ~ rock1, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(med_c ~ human_modified1, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(med_c ~ desert, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
#Alya's script
library(ape)
library(geiger)
library(caper)
unique(data_all$Trophic_niche)
model1 = pgls(aquatic_predator1 ~ med_a, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(omnivoretn1 ~ med_a, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(invertivore1 ~ med_a, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(vertivore1 ~ med_a, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(herbivore_terrestrial1 ~ med_a, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(granivore1 ~ med_a, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(frugivore1 ~ med_a, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(nectarivore1 ~ med_a, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(herbivore_aquatic1 ~ med_a, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(scavenger1 ~ med_a, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(aquatic_predator1 ~ med_c, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(omnivoretn1 ~ med_c, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(invertivore1 ~ med_c, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(vertivore1 ~ med_c, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(herbivore_terrestrial1 ~ med_c, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(granivore1 ~ med_c, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(frugivore1 ~ med_c, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(nectarivore1 ~ med_c, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(herbivore_aquatic1 ~ med_c, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(scavenger1 ~ med_c, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(med_a ~ aquatic_predator1, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(med_a ~ omnivoretn1, MutComp_all, lambda = 'ML')
model1 = pgls(med_a ~ omnivoretn1, MutComp_all, lambda = 'ML')
#Alya's script
library(ape)
library(geiger)
library(caper)
model1 = pgls(med_a ~ omnivoretn1, MutComp_all, lambda = 'ML')
model1 = pgls(med_a ~ invertivore1, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(med_a ~ vertivore1, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(med_a ~ herbivore_terrestrial1, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(med_a ~ granivore1, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(med_a ~ frugivore1, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(med_a ~ nectarivore1, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(med_a ~ herbivore_aquatic1, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(med_a ~ scavenger1, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(med_c ~ aquatic_predator1, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(med_c ~ omnivoretn1, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(med_c ~ invertivore1, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(med_c ~ vertivore1, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(med_c ~ herbivore_terrestrial1, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(med_c ~ granivore, MutComp_all, lambda = 'ML')
model1 = pgls(med_c ~ granivore1, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(med_c ~ frugivore1, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(med_c ~ nectarivore1, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(med_c ~ herbivore_aquatic1, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(med_c ~ scavenger1, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(med_a ~ omnivoretn1, MutComp_all, lambda = 'ML')
unique(data_all$Primary_lifestyle)
model1 = pgls(med_a ~ generalist1, MutComp_all, lambda = 'ML')
model1 = pgls(generalist1 ~ med_a, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(aerial ~ med_a, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(aquatic ~ med_a, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(insessorial ~ med_a, MutComp_all, lambda = 'ML')
model1 = pgls(terrestrial ~ med_a, MutComp_all, lambda = 'ML')
model1 = pgls(generalist1 ~ med_c, MutComp_all, lambda = 'ML')
#Alya's script
library(ape)
library(geiger)
library(caper)
model1 = pgls(generalist1 ~ med_c, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(aerial ~ med_c, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(aquatic ~ med_c, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(insessorial ~ med_c, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(terrestrial ~ med_c, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
data_all$terrestrial = 0
View(df5)
df1 = subset(data_all, data_all$Primary_lifestyle == 'Terrestrial',)
df2 = subset(data_all, data_all$Primary_lifestyle != 'Terrestrial',)
df1$terrestrial = 1
View(df1)
View(df2)
data_all = rbind(df1, df2)
model1 = pgls(terrestrial ~ med_c, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
View(data_all)
model1 = pgls(insessorial ~ med_c, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
MutComp_all = comparative.data(tree_all, data_all, Species, vcv = TRUE)
model1 = pgls(terrestrial ~ med_c, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(med_a ~ generalist1, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(med_a ~ aerial, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(med_a ~ aquatic, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(med_a ~ insessorial, MutComp_all, lambda = 'ML')
model1 = pgls(med_a ~ terrestrial, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(med_c ~ generalist1, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(med_c ~ aerial, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(med_c ~ aquatic, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(med_c ~ insessorial, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(med_c ~ terrestrial, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(terrestrial ~ med_a, MutComp_all, lambda = 'ML')
summary(model1)$coefficients[,4][2]
summary(model1)$r.squared
summary(model1)$coefficients[,1][2]
model1 = pgls(insessorial ~ med_a, MutComp_all, lambda = 'ML')
#Alya's script
library(ape)
library(geiger)
library(caper)
model1 = pgls(med_a ~ wetland, MutComp_all, lambda = 'ML')
summary(model1)
model1 = pgls(wetland ~ med_a, MutComp_all, lambda = 'ML')
summary(model1)
a = pgls(med_a ~ Beak_width, MutComp_all, lamda = 'ML')
a = pgls(med_a ~ Beak_width, MutComp_all, lambda = 'ML')
b = pgls(data_all[,'med_a'] ~ data_all[,'Beak_width'], MutComp_all, lambda = 'ML')
summary(a)
summary(b)
head(data_all[,'med_a'])
head(data_all$med_a)
View(MutComp_all)
c = pgls(data_all$med_a ~ data_all$Beak_width, lambda = 'ML')
c = pgls(data_all$med_a ~ data_all$Beak_width,  MutComp_all, lambda = 'ML')
c = pgls(data_all$med_a ~ data_all$Beak_width,  MutComp_all, lambda = 'ML')
summary(c)
med_a
Beak_width
MutComp_all$med_a
d = pgls(med_a ~ data_all$Beak_width,  MutComp_all, lambda = 'ML')
summary(d)
f = pgls(data_all$med_a ~ Beak_width,  MutComp_all, lambda = 'ML')
summary(f)
Beak_width
b = pgls(data_all[,'med_a'] ~ data_all[,'Beak_width'], lambda = 'ML')
a = pgls(med_a ~ Beak_width, lambda = 'ML')
View(MutComp_all)
a = pgls(med_a ~ med_c, MutComp_all, lambda = 'ML')
MutComp_all$data[,med_a]
MutComp_all$data[med_a]
MutComp_all$data[med_a,]
MutComp_all$data
MutComp_all$data[1]
head(MutComp_all$data[2])
summary(a)
f = pgls(MutComp_all$data[2] ~ Beak_width,  MutComp_all, lambda = 'ML')
f = pgls(as.numeric(MutComp_all$data[2]) ~ Beak_width,  MutComp_all, lambda = 'ML')
f = pgls(as.numeric(as.character(MutComp_all$data[2])) ~ Beak_width,  MutComp_all, lambda = 'ML')
as.numeric(as.character(MutComp_all$data[2]))
as.numeric(as.character(MutComp_all$data[2,]))
as.numeric(as.character(MutComp_all$data[,2]))
as.numeric(as.character(MutComp_all$data[,'med_a']))
f = pgls(as.numeric(as.character(MutComp_all$data[,'med_a'])) ~ Beak_width,  MutComp_all, lambda = 'ML')
summary(f)
g = pgls(as.numeric(as.character(MutComp_all$data[,'med_a'])) ~ as.numeric(as.character(MutComp_all$data[,'Beak_width'])),  MutComp_all, lambda = 'ML')
summary(g)
View(data_all)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls(all=TRUE))
library(devtools)
library(ggbiplot)
library(ggplot2)
library(dplyr)
library(ape)
library(geiger)
library(caper)
#### 1.Preparing a birds + ecology dataset
***
```{r}
```
df_mtdna = read.csv('../../Body/3Results/Birds_mtDNA_data.csv')
View(df_mtdna)
df_mtdna = read.csv('../../Body/3Results/Birds_mtDNA_data.csv')
df_mtdna$realm = NA
df_mtdna$trophic_level = NA
df_mtdna$trophic_niche = NA
df_mtdna$foraging_niche = NA
rm.na(df_mtdna)
df_mtdna = na.omit(df_mtdna)
df_mtdna = read.csv('../../Body/3Results/Birds_mtDNA_data.csv')
df_mtdna = read.csv('../../Body/3Results/Birds_mtDNA_data.csv')
df_mtdna$realm = NA
df_mtdna$realm = NA
df_mtdna$trophic_level = NA
df_mtdna$trophic_niche = NA
df_mtdna$foraging_niche = NA
na.omit(df_mtdna)
df_mtdna = df_mtdna[, colSums(is.na(df_mtdna)) < nrow(df_mtdna)]
df_mtdna$ghahSkew = df_mtdna$neutral_c - df_mtdna$neutral_T
df_mtdna$fAn = df_mtdna$neutral_A/df_mtdna$neutral_amount
df_mtdna$fGn = df_mtdna$neutral_g/df_mtdna$neutral_amount
df_mtdna$fCn = df_mtdna$neutral_c/df_mtdna$neutral_amount
df_mtdna$fTn = df_mtdna$neutral_T/df_mtdna$neutral_amount
df_mtdna$Stg-Sac = (df_mtdna$fAn + df_mtdna$fCn) - (df_mtdna$fTn + df_mtdna$fGn)
df_mtdna$Stg-Sac = (df_mtdna$fAn + df_mtdna$fCn) - (df_mtdna$fTn + df_mtdna$fGn)
df_mtdna$Stg-Sac = ((df_mtdna$fAn + df_mtdna$fCn) - (df_mtdna$fTn + df_mtdna$fGn))
df_mtdna$Stg = ((df_mtdna$fAn + df_mtdna$fCn)
df_mtdna$Stg = df_mtdna$fAn + df_mtdna$fCn
df_mtdna$Stg = df_mtdna$fAn + df_mtdna$fCn
df_mtdna$Sac = df_mtdna$fTn + df_mtdna$fGn
View(df_mtdna)
df_mtdna$Stg_Sac = df_mtdna$Stg - df_mtdna$Sac
df_mtdna$Stg_Sac = df_mtdna$Stg - df_mtdna$Sac
df_norm = df_mtdna[df_mtdna$gene_name != 'ND6',] #deleting ND6
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls(all=TRUE))
library(devtools)
library(ggbiplot)
library(ggplot2)
library(dplyr)
library(ape)
library(geiger)
library(caper)
dfn = c(names(df_norm))
df_mtdna = read.csv('../../Body/3Results/Birds_mtDNA_data.csv')
df_mtdna$realm = NA
df_mtdna$trophic_level = NA
df_mtdna$trophic_niche = NA
df_mtdna$foraging_niche = NA
df_mtdna = df_mtdna[, colSums(is.na(df_mtdna)) < nrow(df_mtdna)]
df_mtdna = read.csv('../../Body/3Results/Birds_mtDNA_data.csv')
#### 1.Preparing a birds + ecology dataset
##### 1.1 Read birds mtDNA data and remove extra columns
***
```{r}
df_mtdna = read.csv('../../Body/3Results/Birds_mtDNA_data.csv')
df_mtdna$realm = NA
df_mtdna$trophic_level = NA
df_mtdna$trophic_niche = NA
df_mtdna$foraging_niche = NA
df_mtdna = df_mtdna[, colSums(is.na(df_mtdna)) < nrow(df_mtdna)]
```
<br>
##### 1.2. Calculate mtDNA describing metrics
###### All metrics are translated from light to heavy chain
***
```{r}
df_mtdna$ghahSkew = (df_mtdna$neutral_c - df_mtdna$neutral_T)/(df_mtdna$neutral_c + df_mtdna$neutral_T)
df_mtdna$fAn = df_mtdna$neutral_A/df_mtdna$neutral_amount
df_mtdna$fGn = df_mtdna$neutral_g/df_mtdna$neutral_amount
df_mtdna$fCn = df_mtdna$neutral_c/df_mtdna$neutral_amount
df_mtdna$fTn = df_mtdna$neutral_T/df_mtdna$neutral_amount
df_mtdna$Stg = df_mtdna$fAn + df_mtdna$fCn
df_mtdna$Sac = df_mtdna$fTn + df_mtdna$fGn
df_mtdna$Stg_Sac = df_mtdna$Stg - df_mtdna$Sac
```
<br>
##### 1.3 Codon normalisation
***
```{r}
df_norm = df_mtdna[df_mtdna$gene_name != 'ND6',] #deleting ND6
vec_all = c('TTC','TTT','TCC','TCT','TAC','TAT','TGC','TGT',
'TTA','TTG','TCA','TCG','TAA','TAG','TGA','TGG',
'CTC','CTT','CCC','CCT','CAC','CAT','CGC','CGT',
'CTA','CTG','CCA','CCG','CAA','CAG','CGA','CGG',
'ATC','ATT','ACC','ACT','AAC','AAT','AGC','AGT',
'ATA','ATG','ACA','ACG','AAA','AAG','AGA','AGG',
'GTC','GTT','GCC','GCT','GAC','GAT','GGC','GGT',
'GTA','GTG','GCA','GCG','GAA','GAG','GGA','GGG')
needed_codons = c('TTC','TCC','TAC','TGC',
'TTA','TCA','TAA','TGA',
'CTC','CCC','CAC','CGC',
'CTA','CCA','CAA','CGA',
'ATC','ACC','AAC','AGC',
'ATA','ACA','AAA','AGA',
'GTC','GCC','GAC','GGC',
'GTA','GCA','GAA','GGA')
dfn = c(names(df_norm))
sp_sum_gen = data.frame(unique(df_norm$species_name))
View(sp_sum_gen)
for ( codon in vec_all){
sum_of_codon = aggregate(df_norm[ ,codon], by = list(df_norm$species_name), FUN = 'sum')[2]
sp_sum_gen = cbind(sp_sum_gen, sum_of_codon)
}
View(sp_sum_gen)
names(sp_sum_gen) = c('Species', vec_all)
codon_norm = data.frame()
for (i in 1:nrow(sp_sum_gen)){
org_gen = sp_sum_gen[i,]
org_gen = as.vector(org_gen)
df_out= data.frame(sp_sum_gen[i,]$Species)
for (codon in seq(from = 2, to = 65, by = 2)){
if (org_gen[1,codon] == 0) {df_out = cbind(df_out, 0)}
else {
norm_cod = org_gen[1,codon] / (org_gen[1,codon+1] + org_gen[1,codon])
df_out = cbind(df_out, norm_cod)
}
}
names(df_out) = c('Species', needed_codons)
codon_norm = rbind(codon_norm,df_out)
}
codon_norm = data.frame()
for (i in 1:nrow(sp_sum_gen)){
org_gen = sp_sum_gen[i,]
org_gen = as.vector(org_gen)
df_out= data.frame(sp_sum_gen[i,]$Species)
for (codon in seq(from = 2, to = 65, by = 2)){
if (org_gen[1,codon] == 0) {df_out = cbind(df_out, 0)}
else {
norm_cod = org_gen[1,codon] / (org_gen[1,codon+1] + org_gen[1,codon])
df_out = cbind(df_out, norm_cod)
}
}
names(df_out) = c('Species', needed_codons)
codon_norm = rbind(codon_norm,df_out)
}
View(codon_norm)
