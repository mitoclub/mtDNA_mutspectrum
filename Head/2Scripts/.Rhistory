DataFrame$NucT[i] = FreqOfNuc[FreqOfNuc$Temp == 't',]$Freq
DataFrame$NucG[i] = FreqOfNuc[FreqOfNuc$Temp == 'g',]$Freq
DataFrame$NucC[i] = FreqOfNuc[FreqOfNuc$Temp == 'c',]$Freq
TempWithShift = c('ZERO',Temp[1:(length(Temp)-1)])
data = data.frame(cbind(Temp,TempWithShift))
data=data[-1,]
data$TwoNeighbors = paste(data$Temp,data$TempWithShift,sep='')
FreqOfDinucl = data.frame(table(data$TwoNeighbors))
DataFrame$DinucAA[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'aa',]$Freq
DataFrame$DinucTT[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'tt',]$Freq
DataFrame$DinucGG[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'gg',]$Freq
DataFrame$DinucCC[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'cc',]$Freq
}
DataFrame$FrOfDinucAA = DataFrame$DinucAA/(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC)
DataFrame$FrOfDinucTT = DataFrame$DinucTT/(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC)
DataFrame$FrOfDinucGG = DataFrame$DinucGG/(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC)
DataFrame$FrOfDinucCC = DataFrame$DinucCC/(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC)
DataFrame = DataFrame[order(DataFrame$FrOfDinucGG),]
View(DataFrame)
summary(DataFrame$DinucGG)
summary(DataFrame$FrOfDinucGG)
summary(DataFrame$FrOfDinucCC)
summary(DataFrame$FrOfDinucAA)
summary(DataFrame$FrOfDinucTT)
rm(list=ls(all=TRUE))
library(seqinr)
#### read fasta file
# MutSpec = read.fasta("../../Body/1Raw/AmphibiansMtDnaRefSeqs/sequence.fasta")  #
MutSpec = read.fasta("../../Body/1Raw/LepidosauriaMtDnaRefSeqs/sequence.fasta")  #
rm(list=ls(all=TRUE))
library(seqinr)
#### read fasta file
# MutSpec = read.fasta("../../Body/1Raw/AmphibiansMtDnaRefSeqs/sequence.fasta")  #
MutSpec = read.fasta("../../Body/1Raw/LepidosauriaMtDnaRefSeqs/sequence.fasta")  #
Seq = getSequence(MutSpec)
Names = getName(MutSpec)
#### make simple data-frame with RefSeqId and WholeGenome
DataFrame = c()
for (i in 1:length(Names))
{ # i = 1
seq=paste(unlist(Seq[i]), collapse = '')
name = Names[i]
DataFrame = rbind(DataFrame,c(name,seq))
}
DataFrame = data.frame(DataFrame)
names(DataFrame)=c('RefSeqId','WholeGenome')
#### looking for di-nucleotide patterns
for (i in 1:nrow(DataFrame))
{ # i = 1
Temp = unlist(strsplit(DataFrame$WholeGenome[i], split = ''))
FreqOfNuc=data.frame(table(Temp))
DataFrame$NucA[i] = FreqOfNuc[FreqOfNuc$Temp == 'a',]$Freq
DataFrame$NucT[i] = FreqOfNuc[FreqOfNuc$Temp == 't',]$Freq
DataFrame$NucG[i] = FreqOfNuc[FreqOfNuc$Temp == 'g',]$Freq
DataFrame$NucC[i] = FreqOfNuc[FreqOfNuc$Temp == 'c',]$Freq
TempWithShift = c('ZERO',Temp[1:(length(Temp)-1)])
data = data.frame(cbind(Temp,TempWithShift))
data=data[-1,]
data$TwoNeighbors = paste(data$Temp,data$TempWithShift,sep='')
FreqOfDinucl = data.frame(table(data$TwoNeighbors))
DataFrame$DinucAA[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'aa',]$Freq
DataFrame$DinucTT[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'tt',]$Freq
DataFrame$DinucGG[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'gg',]$Freq
DataFrame$DinucCC[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'cc',]$Freq
}
DataFrame$FrOfDinucAA = DataFrame$DinucAA/(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC)
DataFrame$FrOfDinucTT = DataFrame$DinucTT/(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC)
DataFrame$FrOfDinucGG = DataFrame$DinucGG/(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC)
DataFrame$FrOfDinucCC = DataFrame$DinucCC/(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC)
DataFrame = DataFrame[order(DataFrame$FrOfDinucGG),]
summary(DataFrame$FrOfDinucGG)
summary(DataFrame$FrOfDinucCC)
summary(DataFrame$FrOfDinucAA)
summary(DataFrame$FrOfDinucTT) #
rm(list=ls(all=TRUE))
library(seqinr)
#### read fasta file
MutSpec = read.fasta("../../Body/1Raw/AmphibiansMtDnaRefSeqs/sequence.fasta")  # Amphibians
# MutSpec = read.fasta("../../Body/1Raw/LepidosauriaMtDnaRefSeqs/sequence.fasta")  # Lepidosauria
Seq = getSequence(MutSpec)
Names = getName(MutSpec)
#### make simple data-frame with RefSeqId and WholeGenome
DataFrame = c()
for (i in 1:length(Names))
{ # i = 1
seq=paste(unlist(Seq[i]), collapse = '')
name = Names[i]
DataFrame = rbind(DataFrame,c(name,seq))
}
DataFrame = data.frame(DataFrame)
names(DataFrame)=c('RefSeqId','WholeGenome')
#### looking for di-nucleotide patterns
for (i in 1:nrow(DataFrame))
{ # i = 1
Temp = unlist(strsplit(DataFrame$WholeGenome[i], split = ''))
FreqOfNuc=data.frame(table(Temp))
DataFrame$NucA[i] = FreqOfNuc[FreqOfNuc$Temp == 'a',]$Freq
DataFrame$NucT[i] = FreqOfNuc[FreqOfNuc$Temp == 't',]$Freq
DataFrame$NucG[i] = FreqOfNuc[FreqOfNuc$Temp == 'g',]$Freq
DataFrame$NucC[i] = FreqOfNuc[FreqOfNuc$Temp == 'c',]$Freq
TempWithShift = c('ZERO',Temp[1:(length(Temp)-1)])
data = data.frame(cbind(Temp,TempWithShift))
data=data[-1,]
data$TwoNeighbors = paste(data$Temp,data$TempWithShift,sep='')
FreqOfDinucl = data.frame(table(data$TwoNeighbors))
DataFrame$DinucAA[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'aa',]$Freq
DataFrame$DinucTT[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'tt',]$Freq
DataFrame$DinucGG[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'gg',]$Freq
DataFrame$DinucCC[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'cc',]$Freq
}
DataFrame$FrOfDinucAA = DataFrame$DinucAA/(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC)
DataFrame$FrOfDinucTT = DataFrame$DinucTT/(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC)
DataFrame$FrOfDinucGG = DataFrame$DinucGG/(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC)
DataFrame$FrOfDinucCC = DataFrame$DinucCC/(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC)
DataFrame = DataFrame[order(DataFrame$FrOfDinucGG),]
summary(DataFrame$FrOfDinucGG) # 0.02    => 0.04125 (Lepidosauria);
summary(DataFrame$FrOfDinucCC) # 0.04923 => 0.12570 (Lepidosauria);
summary(DataFrame$FrOfDinucAA) # 0.07861 => 0.13623 (Lepidosauria);
summary(DataFrame$FrOfDinucTT) # 0.04084 => 0.11362 (Lepidosauria);
summary(DataFrame$FrOfDinucAA) # 0.07861 => 0.13623 (Lepidosauria);
summary(DataFrame$FrOfDinucTT) # 0.04084 => 0.11362 (Lepidosauria);
rm(list=ls(all=TRUE))
library(seqinr)
#### read fasta file
# MutSpec = read.fasta("../../Body/1Raw/AmphibiansMtDnaRefSeqs/sequence.fasta")  # Amphibians
MutSpec = read.fasta("../../Body/1Raw/LepidosauriaMtDnaRefSeqs/sequence.fasta")  # Lepidosauria
Seq = getSequence(MutSpec)
Names = getName(MutSpec)
#### make simple data-frame with RefSeqId and WholeGenome
DataFrame = c()
for (i in 1:length(Names))
{ # i = 1
seq=paste(unlist(Seq[i]), collapse = '')
name = Names[i]
DataFrame = rbind(DataFrame,c(name,seq))
}
DataFrame = data.frame(DataFrame)
names(DataFrame)=c('RefSeqId','WholeGenome')
#### looking for di-nucleotide patterns
for (i in 1:nrow(DataFrame))
{ # i = 1
Temp = unlist(strsplit(DataFrame$WholeGenome[i], split = ''))
FreqOfNuc=data.frame(table(Temp))
DataFrame$NucA[i] = FreqOfNuc[FreqOfNuc$Temp == 'a',]$Freq
DataFrame$NucT[i] = FreqOfNuc[FreqOfNuc$Temp == 't',]$Freq
DataFrame$NucG[i] = FreqOfNuc[FreqOfNuc$Temp == 'g',]$Freq
DataFrame$NucC[i] = FreqOfNuc[FreqOfNuc$Temp == 'c',]$Freq
TempWithShift = c('ZERO',Temp[1:(length(Temp)-1)])
data = data.frame(cbind(Temp,TempWithShift))
data=data[-1,]
data$TwoNeighbors = paste(data$Temp,data$TempWithShift,sep='')
FreqOfDinucl = data.frame(table(data$TwoNeighbors))
DataFrame$DinucAA[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'aa',]$Freq
DataFrame$DinucTT[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'tt',]$Freq
DataFrame$DinucGG[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'gg',]$Freq
DataFrame$DinucCC[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'cc',]$Freq
}
DataFrame$FrOfDinucAA = DataFrame$DinucAA/(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC)
DataFrame$FrOfDinucTT = DataFrame$DinucTT/(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC)
DataFrame$FrOfDinucGG = DataFrame$DinucGG/(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC)
DataFrame$FrOfDinucCC = DataFrame$DinucCC/(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC)
DataFrame = DataFrame[order(DataFrame$FrOfDinucGG),]
summary(DataFrame$FrOfDinucGG) # 0.02    => 0.04125 (Lepidosauria); 0.03044
summary(DataFrame$FrOfDinucCC) # 0.04923 => 0.12570 (Lepidosauria); 0.07322
summary(DataFrame$FrOfDinucAA) # 0.07861 => 0.13623 (Lepidosauria); 0.10181
summary(DataFrame$FrOfDinucTT) # 0.04084 => 0.11362 (Lepidosauria); 0.09926
DataFrame$ObsExpAA = DataFrame$DinucAA/((DataFrame$NucA/(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC))^2)
DataFrame$ObsExpAA
DataFrame$ObsExpAA = DataFrame$DinucAA/(((DataFrame$NucA/(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC))^2)*(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC))
DataFrame$ObsExpAA
DataFrame$ObsExpAA = DataFrame$DinucAA/(((DataFrame$NucA/(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC))^2)*(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC))
DataFrame$ObsExpTT = DataFrame$DinucTT/(((DataFrame$NucT/(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC))^2)*(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC))
DataFrame$ObsExpGG = DataFrame$DinucGG/(((DataFrame$NucG/(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC))^2)*(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC))
DataFrame$ObsExpCC = DataFrame$DinucCC/(((DataFrame$NucC/(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC))^2)*(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC))
rm(list=ls(all=TRUE))
library(seqinr)
#### read fasta file
# MutSpec = read.fasta("../../Body/1Raw/AmphibiansMtDnaRefSeqs/sequence.fasta")  # Amphibians
MutSpec = read.fasta("../../Body/1Raw/LepidosauriaMtDnaRefSeqs/sequence.fasta")  # Lepidosauria
Seq = getSequence(MutSpec)
Names = getName(MutSpec)
#### make simple data-frame with RefSeqId and WholeGenome
DataFrame = c()
for (i in 1:length(Names))
{ # i = 1
seq=paste(unlist(Seq[i]), collapse = '')
name = Names[i]
DataFrame = rbind(DataFrame,c(name,seq))
}
DataFrame = data.frame(DataFrame)
names(DataFrame)=c('RefSeqId','WholeGenome')
#### looking for di-nucleotide patterns
for (i in 1:nrow(DataFrame))
{ # i = 1
Temp = unlist(strsplit(DataFrame$WholeGenome[i], split = ''))
FreqOfNuc=data.frame(table(Temp))
DataFrame$NucA[i] = FreqOfNuc[FreqOfNuc$Temp == 'a',]$Freq
DataFrame$NucT[i] = FreqOfNuc[FreqOfNuc$Temp == 't',]$Freq
DataFrame$NucG[i] = FreqOfNuc[FreqOfNuc$Temp == 'g',]$Freq
DataFrame$NucC[i] = FreqOfNuc[FreqOfNuc$Temp == 'c',]$Freq
TempWithShift = c('ZERO',Temp[1:(length(Temp)-1)])
data = data.frame(cbind(Temp,TempWithShift))
data=data[-1,]
data$TwoNeighbors = paste(data$Temp,data$TempWithShift,sep='')
FreqOfDinucl = data.frame(table(data$TwoNeighbors))
DataFrame$DinucAA[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'aa',]$Freq
DataFrame$DinucTT[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'tt',]$Freq
DataFrame$DinucGG[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'gg',]$Freq
DataFrame$DinucCC[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'cc',]$Freq
}
# let's assume that ExpAA = fr(A)*fr(A)*GenomeLength
DataFrame$ObsExpAA = DataFrame$DinucAA/(((DataFrame$NucA/(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC))^2)*(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC))
DataFrame$ObsExpTT = DataFrame$DinucTT/(((DataFrame$NucT/(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC))^2)*(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC))
DataFrame$ObsExpGG = DataFrame$DinucGG/(((DataFrame$NucG/(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC))^2)*(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC))
DataFrame$ObsExpCC = DataFrame$DinucCC/(((DataFrame$NucC/(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC))^2)*(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC))
summary(DataFrame$ObsExpAA) #
summary(DataFrame$ObsExpTT) #
summary(DataFrame$ObsExpGG) #
summary(DataFrame$ObsExpCC) #
rm(list=ls(all=TRUE))
library(seqinr)
#### read fasta file
MutSpec = read.fasta("../../Body/1Raw/AmphibiansMtDnaRefSeqs/sequence.fasta")  # Amphibians
# MutSpec = read.fasta("../../Body/1Raw/LepidosauriaMtDnaRefSeqs/sequence.fasta")  # Lepidosauria
Seq = getSequence(MutSpec)
Names = getName(MutSpec)
#### make simple data-frame with RefSeqId and WholeGenome
DataFrame = c()
for (i in 1:length(Names))
{ # i = 1
seq=paste(unlist(Seq[i]), collapse = '')
name = Names[i]
DataFrame = rbind(DataFrame,c(name,seq))
}
DataFrame = data.frame(DataFrame)
names(DataFrame)=c('RefSeqId','WholeGenome')
#### looking for di-nucleotide patterns
for (i in 1:nrow(DataFrame))
{ # i = 1
Temp = unlist(strsplit(DataFrame$WholeGenome[i], split = ''))
FreqOfNuc=data.frame(table(Temp))
DataFrame$NucA[i] = FreqOfNuc[FreqOfNuc$Temp == 'a',]$Freq
DataFrame$NucT[i] = FreqOfNuc[FreqOfNuc$Temp == 't',]$Freq
DataFrame$NucG[i] = FreqOfNuc[FreqOfNuc$Temp == 'g',]$Freq
DataFrame$NucC[i] = FreqOfNuc[FreqOfNuc$Temp == 'c',]$Freq
TempWithShift = c('ZERO',Temp[1:(length(Temp)-1)])
data = data.frame(cbind(Temp,TempWithShift))
data=data[-1,]
data$TwoNeighbors = paste(data$Temp,data$TempWithShift,sep='')
FreqOfDinucl = data.frame(table(data$TwoNeighbors))
DataFrame$DinucAA[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'aa',]$Freq
DataFrame$DinucTT[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'tt',]$Freq
DataFrame$DinucGG[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'gg',]$Freq
DataFrame$DinucCC[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'cc',]$Freq
}
# let's assume that ExpAA = fr(A)*fr(A)*GenomeLength
DataFrame$ObsExpAA = DataFrame$DinucAA/(((DataFrame$NucA/(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC))^2)*(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC))
DataFrame$ObsExpTT = DataFrame$DinucTT/(((DataFrame$NucT/(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC))^2)*(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC))
DataFrame$ObsExpGG = DataFrame$DinucGG/(((DataFrame$NucG/(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC))^2)*(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC))
DataFrame$ObsExpCC = DataFrame$DinucCC/(((DataFrame$NucC/(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC))^2)*(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC))
summary(DataFrame$ObsExpAA) # 1.0068 (Lep)
summary(DataFrame$ObsExpTT) # 1.0861 (Lep)
summary(DataFrame$ObsExpGG) # 1.611 (Lep)
summary(DataFrame$ObsExpCC) # 1.1058 (Lep)
rm(list=ls(all=TRUE))
library(seqinr)
#### read fasta file
# MutSpec = read.fasta("../../Body/1Raw/AmphibiansMtDnaRefSeqs/sequence.fasta")  # Amphibians
# MutSpec = read.fasta("../../Body/1Raw/LepidosauriaMtDnaRefSeqs/sequence.fasta")  # Lepidosauria
MutSpec = read.fasta("../../Body/1Raw/PrimatesMtDnaRefSeqs/sequence.fasta")  # Primates
Seq = getSequence(MutSpec)
Names = getName(MutSpec)
#### make simple data-frame with RefSeqId and WholeGenome
DataFrame = c()
for (i in 1:length(Names))
{ # i = 1
seq=paste(unlist(Seq[i]), collapse = '')
name = Names[i]
DataFrame = rbind(DataFrame,c(name,seq))
}
DataFrame = data.frame(DataFrame)
names(DataFrame)=c('RefSeqId','WholeGenome')
#### looking for di-nucleotide patterns
for (i in 1:nrow(DataFrame))
{ # i = 1
Temp = unlist(strsplit(DataFrame$WholeGenome[i], split = ''))
FreqOfNuc=data.frame(table(Temp))
DataFrame$NucA[i] = FreqOfNuc[FreqOfNuc$Temp == 'a',]$Freq
DataFrame$NucT[i] = FreqOfNuc[FreqOfNuc$Temp == 't',]$Freq
DataFrame$NucG[i] = FreqOfNuc[FreqOfNuc$Temp == 'g',]$Freq
DataFrame$NucC[i] = FreqOfNuc[FreqOfNuc$Temp == 'c',]$Freq
TempWithShift = c('ZERO',Temp[1:(length(Temp)-1)])
data = data.frame(cbind(Temp,TempWithShift))
data=data[-1,]
data$TwoNeighbors = paste(data$Temp,data$TempWithShift,sep='')
FreqOfDinucl = data.frame(table(data$TwoNeighbors))
DataFrame$DinucAA[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'aa',]$Freq
DataFrame$DinucTT[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'tt',]$Freq
DataFrame$DinucGG[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'gg',]$Freq
DataFrame$DinucCC[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'cc',]$Freq
}
# let's assume that ExpAA = fr(A)*fr(A)*GenomeLength
DataFrame$ObsExpAA = DataFrame$DinucAA/(((DataFrame$NucA/(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC))^2)*(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC))
DataFrame$ObsExpTT = DataFrame$DinucTT/(((DataFrame$NucT/(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC))^2)*(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC))
DataFrame$ObsExpGG = DataFrame$DinucGG/(((DataFrame$NucG/(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC))^2)*(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC))
DataFrame$ObsExpCC = DataFrame$DinucCC/(((DataFrame$NucC/(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC))^2)*(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC))
summary(DataFrame$ObsExpAA) # 1.0068 (Lep); 1.0395 (Amp);
summary(DataFrame$ObsExpTT) # 1.0861 (Lep); 1.1196 (Amp);
summary(DataFrame$ObsExpGG) # 1.611 (Lep);  1.489  (Amp);
summary(DataFrame$ObsExpCC) # 1.1058 (Lep); 1.2041 (Amp);
rm(list=ls(all=TRUE))
library(seqinr)
#### read fasta file
# MutSpec = read.fasta("../../Body/1Raw/AmphibiansMtDnaRefSeqs/sequence.fasta")  # Amphibians
# MutSpec = read.fasta("../../Body/1Raw/LepidosauriaMtDnaRefSeqs/sequence.fasta")  # Lepidosauria
MutSpec = read.fasta("../../Body/1Raw/PrimatesMtDnaRefSeqs/sequence.fasta")  # Primates
Seq = getSequence(MutSpec)
Names = getName(MutSpec)
#### make simple data-frame with RefSeqId and WholeGenome
DataFrame = c()
for (i in 1:length(Names))
{ # i = 1
seq=paste(unlist(Seq[i]), collapse = '')
name = Names[i]
DataFrame = rbind(DataFrame,c(name,seq))
}
DataFrame = data.frame(DataFrame)
names(DataFrame)=c('RefSeqId','WholeGenome')
#### looking for di-nucleotide patterns
for (i in 1:nrow(DataFrame))
{ # i = 1
Temp = unlist(strsplit(DataFrame$WholeGenome[i], split = ''))
FreqOfNuc=data.frame(table(Temp))
DataFrame$NucA[i] = FreqOfNuc[FreqOfNuc$Temp == 'a',]$Freq
DataFrame$NucT[i] = FreqOfNuc[FreqOfNuc$Temp == 't',]$Freq
DataFrame$NucG[i] = FreqOfNuc[FreqOfNuc$Temp == 'g',]$Freq
DataFrame$NucC[i] = FreqOfNuc[FreqOfNuc$Temp == 'c',]$Freq
TempWithShift = c('ZERO',Temp[1:(length(Temp)-1)])
data = data.frame(cbind(Temp,TempWithShift))
data=data[-1,]
data$TwoNeighbors = paste(data$Temp,data$TempWithShift,sep='')
FreqOfDinucl = data.frame(table(data$TwoNeighbors))
DataFrame$DinucAA[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'aa',]$Freq
DataFrame$DinucAT[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'at',]$Freq
DataFrame$DinucTA[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'ta',]$Freq
DataFrame$DinucTT[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'tt',]$Freq
DataFrame$DinucTG[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'tg',]$Freq
DataFrame$DinucGT[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'gt',]$Freq
DataFrame$DinucGG[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'gg',]$Freq
DataFrame$DinucGC[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'gc',]$Freq
DataFrame$DinucCG[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'cg',]$Freq
DataFrame$DinucCC[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'cc',]$Freq
}
DataFrame$ObsExpAT = DataFrame$DinucAT/(((DataFrame$NucA/(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC))*(DataFrame$NucT/(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC))*(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC))
DataFrame$ObsExpAT = DataFrame$DinucAT/(((DataFrame$NucA/(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC))*(DataFrame$NucT/(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC))*(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC))
DataFrame$ObsExpAA = DataFrame$DinucAA/(((DataFrame$NucA/(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC))^2)*(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC))
DataFrame$ObsExpAA = DataFrame$DinucAA/(((DataFrame$NucA/(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC))^2)*(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC))
DataFrame$ObsExpAT = DataFrame$DinucAT/((DataFrame$NucA/(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC))*(DataFrame$NucT/(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC))*(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC))
DataFrame$FrA = DataFrame$NucA/(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC)
DataFrame$FrA = DataFrame$NucA/(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC)
DataFrame$FrT = DataFrame$NucT/(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC)
DataFrame$FrG = DataFrame$NucG/(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC)
DataFrame$FrC = DataFrame$NucC/(DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC)
DataFrame$GenomeLength = DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC
DataFrame$FrA = DataFrame$NucA/DataFrame$GenomeLength
DataFrame$FrT = DataFrame$NucT/DataFrame$GenomeLength
DataFrame$FrG = DataFrame$NucG/DataFrame$GenomeLength
DataFrame$FrC = DataFrame$NucC/DataFrame$GenomeLength
rm(list=ls(all=TRUE))
library(seqinr)
#### read fasta file
# MutSpec = read.fasta("../../Body/1Raw/AmphibiansMtDnaRefSeqs/sequence.fasta")  # Amphibians
# MutSpec = read.fasta("../../Body/1Raw/LepidosauriaMtDnaRefSeqs/sequence.fasta")  # Lepidosauria
MutSpec = read.fasta("../../Body/1Raw/PrimatesMtDnaRefSeqs/sequence.fasta")  # Primates
Seq = getSequence(MutSpec)
Names = getName(MutSpec)
#### make simple data-frame with RefSeqId and WholeGenome
DataFrame = c()
for (i in 1:length(Names))
{ # i = 1
seq=paste(unlist(Seq[i]), collapse = '')
name = Names[i]
DataFrame = rbind(DataFrame,c(name,seq))
}
DataFrame = data.frame(DataFrame)
names(DataFrame)=c('RefSeqId','WholeGenome')
#### looking for di-nucleotide patterns
for (i in 1:nrow(DataFrame))
{ # i = 1
Temp = unlist(strsplit(DataFrame$WholeGenome[i], split = ''))
FreqOfNuc=data.frame(table(Temp))
DataFrame$NucA[i] = FreqOfNuc[FreqOfNuc$Temp == 'a',]$Freq
DataFrame$NucT[i] = FreqOfNuc[FreqOfNuc$Temp == 't',]$Freq
DataFrame$NucG[i] = FreqOfNuc[FreqOfNuc$Temp == 'g',]$Freq
DataFrame$NucC[i] = FreqOfNuc[FreqOfNuc$Temp == 'c',]$Freq
TempWithShift = c('ZERO',Temp[1:(length(Temp)-1)])
data = data.frame(cbind(Temp,TempWithShift))
data=data[-1,]
data$TwoNeighbors = paste(data$Temp,data$TempWithShift,sep='')
FreqOfDinucl = data.frame(table(data$TwoNeighbors))
DataFrame$DinucAA[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'aa',]$Freq
DataFrame$DinucAT[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'at',]$Freq
DataFrame$DinucTA[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'ta',]$Freq
DataFrame$DinucTT[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'tt',]$Freq
DataFrame$DinucTG[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'tg',]$Freq
DataFrame$DinucGT[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'gt',]$Freq
DataFrame$DinucGG[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'gg',]$Freq
DataFrame$DinucGC[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'gc',]$Freq
DataFrame$DinucCG[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'cg',]$Freq
DataFrame$DinucCC[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'cc',]$Freq
}
# let's assume that ExpAA = fr(A)*fr(A)*GenomeLength etc..
DataFrame$GenomeLength = DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC
DataFrame$FrA = DataFrame$NucA/DataFrame$GenomeLength
DataFrame$FrT = DataFrame$NucT/DataFrame$GenomeLength
DataFrame$FrG = DataFrame$NucG/DataFrame$GenomeLength
DataFrame$FrC = DataFrame$NucC/DataFrame$GenomeLength
DataFrame$ObsExpAA = DataFrame$DinucAA/DataFrame$FrA*DataFrame$FrA*DataFrame$GenomeLength
DataFrame$ObsExpAT = DataFrame$DinucAT/DataFrame$FrA*DataFrame$FrT*DataFrame$GenomeLength
DataFrame$ObsExpTA = DataFrame$DinucTA/DataFrame$FrA*DataFrame$FrT*DataFrame$GenomeLength
DataFrame$ObsExpTT = DataFrame$DinucTT/DataFrame$FrT*DataFrame$FrT*DataFrame$GenomeLength
DataFrame$ObsExpTG = DataFrame$DinucTG/DataFrame$FrT*DataFrame$FrG*DataFrame$GenomeLength
DataFrame$ObsExpGT = DataFrame$DinucGT/DataFrame$FrT*DataFrame$FrG*DataFrame$GenomeLength
DataFrame$ObsExpGG = DataFrame$DinucGG/DataFrame$FrG*DataFrame$FrG*DataFrame$GenomeLength
DataFrame$ObsExpGC = DataFrame$DinucGC/DataFrame$FrG*DataFrame$FrC*DataFrame$GenomeLength
DataFrame$ObsExpCG = DataFrame$DinucCG/DataFrame$FrG*DataFrame$FrC*DataFrame$GenomeLength
DataFrame$ObsExpCC = DataFrame$DinucCC/DataFrame$FrC*DataFrame$FrC*DataFrame$GenomeLength
## Amphibia have excess of AA and TT  (as compared to Lepidosauria and Primates) which is the potential result of UV radiation
median(DataFrame$ObsExpAA) # 1.0068 (Lep); 1.0395 (Amp); 1.0076 (Primates)
median(DataFrame$ObsExpTT) # 1.0861 (Lep); 1.1196 (Amp); 1.0169 (Primates)
median(DataFrame$ObsExpGG) # 1.611 (Lep);  1.489  (Amp); 1.4848 (Primates)
median(DataFrame$ObsExpCC) # 1.1058 (Lep); 1.2041 (Amp); 1.1435 (Primates)
DataFrame$FrA
DataFrame$FrT
DataFrame$FrG
DataFrame$FrC
rm(list=ls(all=TRUE))
library(seqinr)
#### read fasta file
# MutSpec = read.fasta("../../Body/1Raw/AmphibiansMtDnaRefSeqs/sequence.fasta")  # Amphibians
# MutSpec = read.fasta("../../Body/1Raw/LepidosauriaMtDnaRefSeqs/sequence.fasta")  # Lepidosauria
MutSpec = read.fasta("../../Body/1Raw/PrimatesMtDnaRefSeqs/sequence.fasta")  # Primates
Seq = getSequence(MutSpec)
Names = getName(MutSpec)
#### make simple data-frame with RefSeqId and WholeGenome
DataFrame = c()
for (i in 1:length(Names))
{ # i = 1
seq=paste(unlist(Seq[i]), collapse = '')
name = Names[i]
DataFrame = rbind(DataFrame,c(name,seq))
}
DataFrame = data.frame(DataFrame)
names(DataFrame)=c('RefSeqId','WholeGenome')
#### looking for di-nucleotide patterns
for (i in 1:nrow(DataFrame))
{ # i = 1
Temp = unlist(strsplit(DataFrame$WholeGenome[i], split = ''))
FreqOfNuc=data.frame(table(Temp))
DataFrame$NucA[i] = FreqOfNuc[FreqOfNuc$Temp == 'a',]$Freq
DataFrame$NucT[i] = FreqOfNuc[FreqOfNuc$Temp == 't',]$Freq
DataFrame$NucG[i] = FreqOfNuc[FreqOfNuc$Temp == 'g',]$Freq
DataFrame$NucC[i] = FreqOfNuc[FreqOfNuc$Temp == 'c',]$Freq
TempWithShift = c('ZERO',Temp[1:(length(Temp)-1)])
data = data.frame(cbind(Temp,TempWithShift))
data=data[-1,]
data$TwoNeighbors = paste(data$Temp,data$TempWithShift,sep='')
FreqOfDinucl = data.frame(table(data$TwoNeighbors))
DataFrame$DinucAA[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'aa',]$Freq
DataFrame$DinucAT[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'at',]$Freq
DataFrame$DinucTA[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'ta',]$Freq
DataFrame$DinucTT[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'tt',]$Freq
DataFrame$DinucTG[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'tg',]$Freq
DataFrame$DinucGT[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'gt',]$Freq
DataFrame$DinucGG[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'gg',]$Freq
DataFrame$DinucGC[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'gc',]$Freq
DataFrame$DinucCG[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'cg',]$Freq
DataFrame$DinucCC[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'cc',]$Freq
}
# let's assume that ExpAA = fr(A)*fr(A)*GenomeLength etc..
DataFrame$GenomeLength = DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC
DataFrame$FrA = DataFrame$NucA/DataFrame$GenomeLength
DataFrame$FrT = DataFrame$NucT/DataFrame$GenomeLength
DataFrame$FrG = DataFrame$NucG/DataFrame$GenomeLength
DataFrame$FrC = DataFrame$NucC/DataFrame$GenomeLength
DataFrame$ObsExpAA = DataFrame$DinucAA/(DataFrame$FrA*DataFrame$FrA*DataFrame$GenomeLength)
DataFrame$ObsExpAT = DataFrame$DinucAT/(DataFrame$FrA*DataFrame$FrT*DataFrame$GenomeLength)
DataFrame$ObsExpTA = DataFrame$DinucTA/(DataFrame$FrA*DataFrame$FrT*DataFrame$GenomeLength)
DataFrame$ObsExpTT = DataFrame$DinucTT/(DataFrame$FrT*DataFrame$FrT*DataFrame$GenomeLength)
DataFrame$ObsExpTG = DataFrame$DinucTG/(DataFrame$FrT*DataFrame$FrG*DataFrame$GenomeLength)
DataFrame$ObsExpGT = DataFrame$DinucGT/(DataFrame$FrT*DataFrame$FrG*DataFrame$GenomeLength)
DataFrame$ObsExpGG = DataFrame$DinucGG/(DataFrame$FrG*DataFrame$FrG*DataFrame$GenomeLength)
DataFrame$ObsExpGC = DataFrame$DinucGC/(DataFrame$FrG*DataFrame$FrC*DataFrame$GenomeLength)
DataFrame$ObsExpCG = DataFrame$DinucCG/(DataFrame$FrG*DataFrame$FrC*DataFrame$GenomeLength)
DataFrame$ObsExpCC = DataFrame$DinucCC/(DataFrame$FrC*DataFrame$FrC*DataFrame$GenomeLength)
## Amphibia have excess of AA and TT  (as compared to Lepidosauria and Primates) which is the potential result of UV radiation
median(DataFrame$ObsExpAA) # 1.0068 (Lep); 1.0395 (Amp); 1.0076 (Primates)
median(DataFrame$ObsExpTT) # 1.0861 (Lep); 1.1196 (Amp); 1.0169 (Primates)
median(DataFrame$ObsExpGG) # 1.611 (Lep);  1.489  (Amp); 1.4848 (Primates)
median(DataFrame$ObsExpCC) # 1.1058 (Lep); 1.2041 (Amp); 1.1435 (Primates)
## Can UV light go through the egg skin?
median(DataFrame$ObsExpAT)
median(DataFrame$ObsExpTA)
median(DataFrame$ObsExpGC)
median(DataFrame$ObsExpCG)
median(DataFrame$ObsExpGT)
median(DataFrame$ObsExpTG)
median(DataFrame$ObsExpGC)
median(DataFrame$ObsExpCG)
median(DataFrame$ObsExpGC)
median(DataFrame$ObsExpGG)
median(DataFrame$ObsExpGT)
