Temp = unlist(strsplit(DataFrame$WholeGenome[i], split = ''))
FreqOfNuc=data.frame(table(Temp))
DataFrame$NucA[i] = FreqOfNuc[FreqOfNuc$Temp == 'a',]$Freq
DataFrame$NucT[i] = FreqOfNuc[FreqOfNuc$Temp == 't',]$Freq
DataFrame$NucG[i] = FreqOfNuc[FreqOfNuc$Temp == 'g',]$Freq
DataFrame$NucC[i] = FreqOfNuc[FreqOfNuc$Temp == 'c',]$Freq
TempWithShift = c('ZERO',Temp[1:(length(Temp)-1)])
data = data.frame(cbind(Temp,TempWithShift))
data=data[-1,]
data$TwoNeighbors = paste(data$Temp,data$TempWithShift,sep='')
FreqOfDinucl = data.frame(table(data$TwoNeighbors))
DataFrame$DinucAA[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'aa',]$Freq
DataFrame$DinucAT[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'at',]$Freq
DataFrame$DinucTA[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'ta',]$Freq
DataFrame$DinucTT[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'tt',]$Freq
DataFrame$DinucTG[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'tg',]$Freq
DataFrame$DinucGT[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'gt',]$Freq
DataFrame$DinucGG[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'gg',]$Freq
DataFrame$DinucGC[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'gc',]$Freq
DataFrame$DinucCG[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'cg',]$Freq
DataFrame$DinucCC[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'cc',]$Freq
}
# let's assume that ExpAA = fr(A)*fr(A)*GenomeLength etc..
DataFrame$GenomeLength = DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC
DataFrame$FrA = DataFrame$NucA/DataFrame$GenomeLength
DataFrame$FrT = DataFrame$NucT/DataFrame$GenomeLength
DataFrame$FrG = DataFrame$NucG/DataFrame$GenomeLength
DataFrame$FrC = DataFrame$NucC/DataFrame$GenomeLength
DataFrame$ObsExpAA = DataFrame$DinucAA/DataFrame$FrA*DataFrame$FrA*DataFrame$GenomeLength
DataFrame$ObsExpAT = DataFrame$DinucAT/DataFrame$FrA*DataFrame$FrT*DataFrame$GenomeLength
DataFrame$ObsExpTA = DataFrame$DinucTA/DataFrame$FrA*DataFrame$FrT*DataFrame$GenomeLength
DataFrame$ObsExpTT = DataFrame$DinucTT/DataFrame$FrT*DataFrame$FrT*DataFrame$GenomeLength
DataFrame$ObsExpTG = DataFrame$DinucTG/DataFrame$FrT*DataFrame$FrG*DataFrame$GenomeLength
DataFrame$ObsExpGT = DataFrame$DinucGT/DataFrame$FrT*DataFrame$FrG*DataFrame$GenomeLength
DataFrame$ObsExpGG = DataFrame$DinucGG/DataFrame$FrG*DataFrame$FrG*DataFrame$GenomeLength
DataFrame$ObsExpGC = DataFrame$DinucGC/DataFrame$FrG*DataFrame$FrC*DataFrame$GenomeLength
DataFrame$ObsExpCG = DataFrame$DinucCG/DataFrame$FrG*DataFrame$FrC*DataFrame$GenomeLength
DataFrame$ObsExpCC = DataFrame$DinucCC/DataFrame$FrC*DataFrame$FrC*DataFrame$GenomeLength
## Amphibia have excess of AA and TT  (as compared to Lepidosauria and Primates) which is the potential result of UV radiation
median(DataFrame$ObsExpAA) # 1.0068 (Lep); 1.0395 (Amp); 1.0076 (Primates)
median(DataFrame$ObsExpTT) # 1.0861 (Lep); 1.1196 (Amp); 1.0169 (Primates)
median(DataFrame$ObsExpGG) # 1.611 (Lep);  1.489  (Amp); 1.4848 (Primates)
median(DataFrame$ObsExpCC) # 1.1058 (Lep); 1.2041 (Amp); 1.1435 (Primates)
DataFrame$FrA
DataFrame$FrT
DataFrame$FrG
DataFrame$FrC
rm(list=ls(all=TRUE))
library(seqinr)
#### read fasta file
# MutSpec = read.fasta("../../Body/1Raw/AmphibiansMtDnaRefSeqs/sequence.fasta")  # Amphibians
# MutSpec = read.fasta("../../Body/1Raw/LepidosauriaMtDnaRefSeqs/sequence.fasta")  # Lepidosauria
MutSpec = read.fasta("../../Body/1Raw/PrimatesMtDnaRefSeqs/sequence.fasta")  # Primates
Seq = getSequence(MutSpec)
Names = getName(MutSpec)
#### make simple data-frame with RefSeqId and WholeGenome
DataFrame = c()
for (i in 1:length(Names))
{ # i = 1
seq=paste(unlist(Seq[i]), collapse = '')
name = Names[i]
DataFrame = rbind(DataFrame,c(name,seq))
}
DataFrame = data.frame(DataFrame)
names(DataFrame)=c('RefSeqId','WholeGenome')
#### looking for di-nucleotide patterns
for (i in 1:nrow(DataFrame))
{ # i = 1
Temp = unlist(strsplit(DataFrame$WholeGenome[i], split = ''))
FreqOfNuc=data.frame(table(Temp))
DataFrame$NucA[i] = FreqOfNuc[FreqOfNuc$Temp == 'a',]$Freq
DataFrame$NucT[i] = FreqOfNuc[FreqOfNuc$Temp == 't',]$Freq
DataFrame$NucG[i] = FreqOfNuc[FreqOfNuc$Temp == 'g',]$Freq
DataFrame$NucC[i] = FreqOfNuc[FreqOfNuc$Temp == 'c',]$Freq
TempWithShift = c('ZERO',Temp[1:(length(Temp)-1)])
data = data.frame(cbind(Temp,TempWithShift))
data=data[-1,]
data$TwoNeighbors = paste(data$Temp,data$TempWithShift,sep='')
FreqOfDinucl = data.frame(table(data$TwoNeighbors))
DataFrame$DinucAA[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'aa',]$Freq
DataFrame$DinucAT[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'at',]$Freq
DataFrame$DinucTA[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'ta',]$Freq
DataFrame$DinucTT[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'tt',]$Freq
DataFrame$DinucTG[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'tg',]$Freq
DataFrame$DinucGT[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'gt',]$Freq
DataFrame$DinucGG[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'gg',]$Freq
DataFrame$DinucGC[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'gc',]$Freq
DataFrame$DinucCG[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'cg',]$Freq
DataFrame$DinucCC[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'cc',]$Freq
}
# let's assume that ExpAA = fr(A)*fr(A)*GenomeLength etc..
DataFrame$GenomeLength = DataFrame$NucA + DataFrame$NucT + DataFrame$NucG + DataFrame$NucC
DataFrame$FrA = DataFrame$NucA/DataFrame$GenomeLength
DataFrame$FrT = DataFrame$NucT/DataFrame$GenomeLength
DataFrame$FrG = DataFrame$NucG/DataFrame$GenomeLength
DataFrame$FrC = DataFrame$NucC/DataFrame$GenomeLength
DataFrame$ObsExpAA = DataFrame$DinucAA/(DataFrame$FrA*DataFrame$FrA*DataFrame$GenomeLength)
DataFrame$ObsExpAT = DataFrame$DinucAT/(DataFrame$FrA*DataFrame$FrT*DataFrame$GenomeLength)
DataFrame$ObsExpTA = DataFrame$DinucTA/(DataFrame$FrA*DataFrame$FrT*DataFrame$GenomeLength)
DataFrame$ObsExpTT = DataFrame$DinucTT/(DataFrame$FrT*DataFrame$FrT*DataFrame$GenomeLength)
DataFrame$ObsExpTG = DataFrame$DinucTG/(DataFrame$FrT*DataFrame$FrG*DataFrame$GenomeLength)
DataFrame$ObsExpGT = DataFrame$DinucGT/(DataFrame$FrT*DataFrame$FrG*DataFrame$GenomeLength)
DataFrame$ObsExpGG = DataFrame$DinucGG/(DataFrame$FrG*DataFrame$FrG*DataFrame$GenomeLength)
DataFrame$ObsExpGC = DataFrame$DinucGC/(DataFrame$FrG*DataFrame$FrC*DataFrame$GenomeLength)
DataFrame$ObsExpCG = DataFrame$DinucCG/(DataFrame$FrG*DataFrame$FrC*DataFrame$GenomeLength)
DataFrame$ObsExpCC = DataFrame$DinucCC/(DataFrame$FrC*DataFrame$FrC*DataFrame$GenomeLength)
## Amphibia have excess of AA and TT  (as compared to Lepidosauria and Primates) which is the potential result of UV radiation
median(DataFrame$ObsExpAA) # 1.0068 (Lep); 1.0395 (Amp); 1.0076 (Primates)
median(DataFrame$ObsExpTT) # 1.0861 (Lep); 1.1196 (Amp); 1.0169 (Primates)
median(DataFrame$ObsExpGG) # 1.611 (Lep);  1.489  (Amp); 1.4848 (Primates)
median(DataFrame$ObsExpCC) # 1.1058 (Lep); 1.2041 (Amp); 1.1435 (Primates)
## Can UV light go through the egg skin?
median(DataFrame$ObsExpAT)
median(DataFrame$ObsExpTA)
median(DataFrame$ObsExpGC)
median(DataFrame$ObsExpCG)
median(DataFrame$ObsExpGT)
median(DataFrame$ObsExpTG)
median(DataFrame$ObsExpGC)
median(DataFrame$ObsExpCG)
median(DataFrame$ObsExpGC)
median(DataFrame$ObsExpGG)
median(DataFrame$ObsExpGT)
rm(list=ls(all=TRUE))
library(seqinr)
# MutSpec = read.fasta("../../Body/1Raw/AmphibiansMtDnaRefSeqs/sequence.fasta")  # Amphibians
MutSpec = read.fasta("../../Body/1Raw/LepidosauriaMtDnaRefSeqs/sequence.fasta")  # Lepidosauria
View(MutSpec)
Seq = getSequence(MutSpec)
View(Seq)
View(Seq)
Names = getName(MutSpec)
Names
#### make simple data-frame with RefSeqId and WholeGenome
DataFrame = c()
for (i in 1:length(Names))
{ # i = 1
seq=paste(unlist(Seq[i]), collapse = '')
name = Names[i]
DataFrame = rbind(DataFrame,c(name,seq))
}
seq
name
View(DataFrame)
names(DataFrame)=c('RefSeqId','WholeGenome')
names(DataFrame)=c('RefSeqId','WholeGenome')
#### looking for di-nucleotide patterns
for (i in 1:nrow(DataFrame))
{ # i = 1
Temp = unlist(strsplit(DataFrame$WholeGenome[i], split = ''))
FreqOfNuc=data.frame(table(Temp))
DataFrame$NucA[i] = FreqOfNuc[FreqOfNuc$Temp == 'a',]$Freq
DataFrame$NucT[i] = FreqOfNuc[FreqOfNuc$Temp == 't',]$Freq
DataFrame$NucG[i] = FreqOfNuc[FreqOfNuc$Temp == 'g',]$Freq
DataFrame$NucC[i] = FreqOfNuc[FreqOfNuc$Temp == 'c',]$Freq
TempWithShift = c('ZERO',Temp[1:(length(Temp)-1)])
data = data.frame(cbind(Temp,TempWithShift))
data=data[-1,]
data$TwoNeighbors = paste(data$TempWithShift,data$Temp,sep='')  # this order will make a sence for light strand (from start to end)
FreqOfDinucl = data.frame(table(data$TwoNeighbors))
DataFrame$DinucAA[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'aa',]$Freq
DataFrame$DinucAT[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'at',]$Freq
DataFrame$DinucTA[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'ta',]$Freq
DataFrame$DinucTT[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'tt',]$Freq
DataFrame$DinucTG[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'tg',]$Freq
DataFrame$DinucTC[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'tc',]$Freq
DataFrame$DinucGT[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'gt',]$Freq
DataFrame$DinucGG[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'gg',]$Freq
DataFrame$DinucGC[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'gc',]$Freq
DataFrame$DinucCG[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'cg',]$Freq
DataFrame$DinucCC[i] = FreqOfDinucl[FreqOfDinucl$Var1 == 'cc',]$Freq
}
library('ggplot2')
library('heatmaply')
rm(list=ls(all=TRUE))
#frog
codus = read.table('AllGenesCodonUsageNoOverlap.txt', header = TRUE, sep = '\t')
aves_pheno = read.table('.../.../Body/1Raw/DataFromValya/ALL_PHENOTYPES.txt')
aves_pheno = read.table('../../Body/1Raw/DataFromValya/ALL_PHENOTYPES.txt')
View(aves_pheno)
anage = read.table('../../Body/1Raw/anage_data.txt')
anage = read.table('../../Body/1Raw/anage_data.txt', header = TRUE, sep = '\t')
View(anage)
anage$Species = paste(anage$Genus, anage$Species, sep = '_')
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip")
codon_usage = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
View(codon_usage)
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")) {file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")}
{file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")}
codono_usage[codon_usage$Gene = 'ND6',] = NA
codono_usage[codon_usage$Gene == 'ND6',] = NA
codon_usage[codon_usage$Gene == 'ND6',] = NA
codon_usage = na.omit(codon_usage)
codon_usage$ratioA = codus$NeutralA/(codus$NeutralA+codus$NeutralG+codus$NeutralC+codus$NeutralT)
codon_usage$ratioA = codon_usage$NeutralA/(codon_usage$NeutralA+codon_usage$NeutralG+codon_usage$NeutralC+codon_usage$NeutralT)
unique_names = unique(codon_usage$Species)
unique_names
codon_usage[codon_usage$Species == 'Abbottina_obtusirostris',]
counter = 1
RatioA = c()
RatioC = c()
RatioG = c()
RatioT = c()
for (i in unique_names)
{
df = codon_usage[codon_usage$Species == i,]
Ad = (sum(df$NeutralA))/(sum(df$NeutralA)+sum(df$NeutralG)+sum(df$NeutralC)+sum(df$NeutralT))
Gu = (sum(df$NeutralG))/(sum(df$NeutralA)+sum(df$NeutralG)+sum(df$NeutralC)+sum(df$NeutralT))
Ci = (sum(df$NeutralC))/(sum(df$NeutralA)+sum(df$NeutralG)+sum(df$NeutralC)+sum(df$NeutralT))
Ti = (sum(df$NeutralT))/(sum(df$NeutralA)+sum(df$NeutralG)+sum(df$NeutralC)+sum(df$NeutralT))
RatioA[counter] = Ad
RatioG[counter] = Gu
RatioC[counter] = Ci
RatioT[counter] = Ti
counter = counter + 1
}
aves_ratio = data.frame(c(unique_names, RatioA, RatioC, RatioG, RatioT))
View(aves_ratio)
aves_ratio = data.frame(unique_names)
View(aves_ratio)
names(aves_ratio) = 'Species'
aves_ratio$RatioA = RatioA
aves_ratio$RatioC = RatioC
aves_ratio$RatioG = RatioG
aves_ratio$RatioT = RatioT
rm(aves_ratio)
all_ratio = data.frame(unique_names)
names(alls_ratio) = 'Species'
all_ratio$RatioA = RatioA
all_ratio$RatioC = RatioC
all_ratio = data.frame(unique_names)
names(all_ratio) = 'Species'
all_ratio$RatioA = RatioA
all_ratio$RatioC = RatioC
all_ratio$RatioG = RatioG
all_ratio$RatioT = RatioT
View(all_ratio)
names(aves_pheno) = c('Speceis', 'Phenotype')
aves_ratio_and_pheno = merge(aves_pheno, all_ratio, by = 'Species' )
names(aves_pheno) = c('Species', 'Phenotype')
aves_ratio_and_pheno = merge(aves_pheno, all_ratio, by = 'Species' )
View(aves_ratio_and_pheno)
aves_ratio_and_pheno_and_anage = merge(aves_ratio_and_pheno, anage, by = 'Species')
View(aves_ratio_and_pheno_and_anage)
#statistics for birds with pheno, mutspec and AnAge
mutspec = read.table('../../Body/3Results/VertebratePolymorphisms.MutSpecData.OnlyFourFoldDegAllGenes.txt')
View(mutspec)
#statistics for birds with pheno, mutspec and AnAge
mutspec = read.table('../../Body/3Results/VertebratePolymorphisms.MutSpecData.OnlyFourFoldDegAllGenes.txt', header = TRUE)
birds_mutspec_and_pheno = merge(mutspec, aves_pheno, by = 'Species')
View(birds_mutspec_and_pheno)
birds_mutspec_and_pheno_and_anage = merge(birds_mutspec_and_pheno, anage, by = 'Species')
View(birds_mutspec_and_pheno_and_anage)
cor.test(aves_ratio_and_pheno_and_anage$RatioA, aves_ratio_and_pheno_and_anage$Maximum.longevity..yrs., method = 'spearman')
cor.test(birds_mutspec_and_pheno_and_anage$G_A, birds_mutspec_and_pheno_and_anage$Maximum.longevity..yrs., method = 'spearman')
cor.test(aves_ratio_and_pheno_and_anage$RatioA, aves_ratio_and_pheno_and_anage$Maximum.longevity..yrs., method = 'spearman')
cor.test(aves_ratio_and_pheno_and_anage$RatioG, aves_ratio_and_pheno_and_anage$Maximum.longevity..yrs., method = 'spearman')
cor.test(aves_ratio_and_pheno_and_anage$RatioG, aves_ratio_and_pheno_and_anage$Adult.weight..g., method = 'spearman')
View(all_ratio)
View(codon_usage)
cor.test(birds_mutspec_and_pheno_and_anage$T_C, birds_mutspec_and_pheno_and_anage$Maximum.longevity..yrs., method = 'spearman')
#statistics for birds with ratio, mutspec and anage
aves_anage = anage[anage$Class == 'Aves',]
View(aves_anage)
aves_anage_and_ratio = merge(aves_anage, all_ratio, by = 'Species')
View(aves_anage_and_ratio)
View(mutspec)
aves_anage_and_ratio_and_mutspec = merge(aves_anage_and_ratio, mutspec, by = 'Species')
View(aves_anage_and_ratio_and_mutspec)
cor.test(aves_anage_and_ratio_and_mutspec$G_A, aves_anage_and_ratio_and_mutspec$Maximum.longevity..yrs., method = 'spearmen')
cor.test(aves_anage_and_ratio_and_mutspec$G_A, aves_anage_and_ratio_and_mutspec$Maximum.longevity..yrs., method = 'spearman')
cor.test(aves_anage_and_ratio_and_mutspec$T_C, aves_anage_and_ratio_and_mutspec$Maximum.longevity..yrs., method = 'spearman')
cor.test(aves_anage_and_ratio_and_mutspec$RatioA, aves_anage_and_ratio_and_mutspec$Maximum.longevity..yrs., method = 'spearman')
cor.test(aves_anage_and_ratio_and_mutspec$RatioC, aves_anage_and_ratio_and_mutspec$Maximum.longevity..yrs., method = 'spearman')
cor.test(aves_anage_and_ratio_and_mutspec$RatioG, aves_anage_and_ratio_and_mutspec$Maximum.longevity..yrs., method = 'spearman')
cor.test(aves_anage_and_ratio_and_mutspec$RatioT, aves_anage_and_ratio_and_mutspec$Maximum.longevity..yrs., method = 'spearman')
View(aves_anage_and_ratio_and_mutspec)
cor.test(aves_anage_and_ratio_and_mutspec$G_A, aves_anage_and_ratio_and_mutspec$Metabolic.rate..W., method = 'spearman')
cor.test(aves_anage_and_ratio_and_mutspec$T_C, aves_anage_and_ratio_and_mutspec$Metabolic.rate..W., method = 'spearman')
cor.test(aves_anage_and_ratio_and_mutspec$RatioA, aves_anage_and_ratio_and_mutspec$Metabolic.rate..W., method = 'spearman')
cor.test(aves_anage_and_ratio_and_mutspec$RatioC, aves_anage_and_ratio_and_mutspec$Metabolic.rate..W., method = 'spearman')
cor.test(aves_anage_and_ratio_and_mutspec$RatioG, aves_anage_and_ratio_and_mutspec$Metabolic.rate..W., method = 'spearman')
cor.test(aves_anage_and_ratio_and_mutspec$RatioG, aves_anage_and_ratio_and_mutspec$Metabolic.rate..W., method = 'spearman')
cor.test(aves_anage_and_ratio_and_mutspec$RatioT, aves_anage_and_ratio_and_mutspec$Metabolic.rate..W., method = 'spearman')
cor.test(aves_anage_and_ratio_and_mutspec$G_A, aves_anage_and_ratio_and_mutspec$Body.mass..g., method = 'spearman')
cor.test(aves_anage_and_ratio_and_mutspec$T_C, aves_anage_and_ratio_and_mutspec$Body.mass..g., method = 'spearman')
cor.test(aves_anage_and_ratio_and_mutspec$RatioA, aves_anage_and_ratio_and_mutspec$Body.mass..g., method = 'spearman')
cor.test(aves_anage_and_ratio_and_mutspec$RatioC, aves_anage_and_ratio_and_mutspec$Body.mass..g., method = 'spearman')
cor.test(aves_anage_and_ratio_and_mutspec$RatioG, aves_anage_and_ratio_and_mutspec$Body.mass..g., method = 'spearman')
cor.test(aves_anage_and_ratio_and_mutspec$RatioT, aves_anage_and_ratio_and_mutspec$Body.mass..g., method = 'spearman')
#statistics for birds with pheno, ratio and AnAge
rm(list=ls(all=TRUE))
aves_pheno = read.table('../../Body/1Raw/DataFromValya/ALL_PHENOTYPES.txt')
anage = read.table('../../Body/1Raw/anage_data.txt', header = TRUE, sep = '\t')
anage$Species = paste(anage$Genus, anage$Species, sep = '_')
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip")
codon_usage = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
rm(list=ls(all=TRUE))
MutSpec = read.table("../../Body/3Results/VertebratePolymorphisms.MutSpecData.OnlyFourFoldDegAllGenes.txt", header = TRUE)
anage = read.table('../../Body/1Raw/anage_data.txt', header = TRUE, sep = '\t')
anage$Species = paste(anage$Genus, anage$Species, sep = '_')
View(MutSpec)
View(anage)
table(anage$Class)
anage = anage[anage$Class == 'Aves',]
rm(list=ls(all=TRUE))
### unzip, keep in R memory and delete from folder
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip")
ALL = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")) {file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")}
### delete ND6
nrow(ALL)
ALL = ALL[ALL$Gene != 'ND6',]
nrow(ALL)
#### aggregate (summ up) neutral nucleotides for each species
SynNuc = aggregate(list(ALL$NeutralA,ALL$NeutralT,ALL$NeutralG,ALL$NeutralC), by = list(ALL$Species,ALL$Class,ALL$Taxonomy), FUN = sum)
names(SynNuc)=c('Species','Class','Taxonomy','NeutralA','NeutralT','NeutralG','NeutralC')
table(SynNuc$Class)
#### estimate fraction of each nucleotide
SynNuc$FrA = SynNuc$NeutralA / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrT = SynNuc$NeutralT / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrG = SynNuc$NeutralG / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrC = SynNuc$NeutralC / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
### estimate GhAhSkew
# from our BioRxiv with mammals:
# An excess of GH and deficit of AH in long-lived species determines the GHAH nucleotide skew which approximates the level of asymmetry in the distribution of these two nucleotides and is calculated as
# (GH-AH)/(GH+AH). As expected we observed positive correlation between GHAH skew and generation length of mammalian species
# in our case we have light chain notation =>
SynNuc$GhAhSkew = (SynNuc$NeutralC-SynNuc$NeutralT)/(SynNuc$NeutralC+SynNuc$NeutralT)
summary(SynNuc$GhAhSkew)
#### keep only Aves and order by GhAhSkew
table(SynNuc$Class) # 432 Aves
SynNuc = SynNuc[SynNuc$Class =='Aves',]
SynNuc=SynNuc[order(SynNuc$GhAhSkew),]
View(SynNuc)
View(ALL)
### derive Dummy Variable - Passeriformes
SynNuc$Passeriformes = 0
for (i in 1:nrow(SynNuc))
{ # i = 1
SynNuc$Passeriformes[i] = as.numeric(grepl('Passeriformes',SynNuc$Taxonomy[i]))
}
table(SynNuc$Passeriformes)
wilcox.test(SynNuc[SynNuc$Passeriformes == 0,]$GhAhSkew,SynNuc[SynNuc$Passeriformes == 1,]$GhAhSkew)
boxplot(SynNuc[SynNuc$Passeriformes == 0,]$GhAhSkew,SynNuc[SynNuc$Passeriformes == 1,]$GhAhSkew, notch = TRUE, outline = FALSE)
write.table(SynNuc, file = "../../Body/3Results/Aves.01B.WholeGenomeNeutralNuclFrVsAnAgeEcology.AllAvesForMeditation.csv", sep = ',', row.names = FALSE, quote = FALSE)
#### read Bird phenotypes from AnAge
anage = read.table('../../Body/1Raw/anage_data.txt', header = TRUE, sep = '\t')
anage$Species = paste(anage$Genus, anage$Species, sep = '_')
table(anage$Class)
anage = anage[anage$Class == 'Aves',]
### merge MutSpec with PHE by 'Species'
SynNucPhe = merge(SynNuc,anage, by = 'Species')
### descriptive analyses: go column by column and if there are many notNA run cor test:
names(SynNucPhe)
for (i in c(21:32,37:41))
{ # i = 32
if (length(SynNucPhe[!is.na(SynNucPhe[,i]),][,i]) > 10)
{
if (as.numeric(cor.test(SynNucPhe$GhAhSkew,SynNucPhe[,i], method = 'spearman')[3]) < 0.1)
{
print(names(SynNucPhe)[i])
print(length(SynNucPhe[!is.na(SynNucPhe[,i]),][,i]))
print(cor.test(SynNucPhe$GhAhSkew,SynNucPhe[,i], method = 'spearman'))
}
}
}
#Yury's part, merging ALL with data from Valya
phenotypes = read.table('../../Body/1Raw/DataFromValya/ALL_PHENOTYPES.txt')
View(phenotypes)
View(SynNuc)
names(phenotypes) = c('Species', 'Phenotype')
View(SynNucPhe)
synnuc_and_pheno = merge(phenotypes, SynNuc, by = 'Species')
View(synnuc_and_pheno)
synnuc_and_pheno$locomotive_type = NA
synnuc_and_pheno$locomotive_tools = NA
#saving to fill table by hands
write.table(synnuc_and_pheno, file = "../../Body/3Results/AvesPhenoRatioPlusLocomotiveSpeed.csv", sep = ',', row.names = FALSE, quote = FALSE)
#merging some phenotypes and life history traits to find some good correlations
pheno = read.table('../../Body/1Raw/DataFromValya/ALL_PHENOTYPES.txt')
rm(list=ls(all=TRUE))
#merging some phenotypes and life history traits to find some good correlations
pheno = read.table('../../Body/1Raw/DataFromValya/ALL_PHENOTYPES.txt')
anage = read.table('../../Body/1Raw/anage_data.txt')
anage = read.table('../../Body/1Raw/anage_data.txt',header = TRUE, sep = '\t')
View(anage)
View(pheno)
names(pheno) = c('Species', 'Phenotype')
only_tropical = pheno[pheno$Phenotype = 'TROPICAL',]
only_tropical = pheno[pheno$Phenotype == 'TROPICAL',]
View(only_tropical)
only_tropical = pheno[pheno$Phenotype == 'TROPIC',]
View(only_tropical)
only_tropical = pheno[pheno$Phenotype == 'TROPIC']
only_tropical = pheno[pheno$Phenotype == 'TROPIC',]
pheno$Phenotype
only_tropical = pheno[pheno$Phenotype == ",\"TROPIC\"",]
View(only_tropical)
only_altitude = pheno[pheno$Phenotype == ",\"HI\""]
only_altitude = pheno[pheno$Phenotype == ",\"HI\"",]
View(only_altitude)
gh = merge(only_altitude, only_tropical, by = 'Species')
View(gh)
rm(gh)
#reading codon usage
codus = read.table('../../Body/3Results/VertebratePolymorphisms.MutSpecData.OnlyFourFoldDegAllGenes.txt')
View(codus)
codus = codus[codus$Gene != 'ND6',]
#reading codon usage
codus = read.table('../../Body/3Results/VertebratePolymorphisms.MutSpecData.OnlyFourFoldDegAllGenes.txt')
#reading codon usage
codus = read.table('../../Body/3Results/VertebratePolymorphisms.MutSpecData.OnlyFourFoldDegAllGenes.txt', header = TRUE)
#reading codon usage
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip")
codus = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")) {file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")} codus = codus[codus$Gene != 'ND6',]
View(codus)
codus = codus[codus$Gene != 'ND6']
codus = codus[codus$Gene != 'ND6',]
#### aggregate (summ up) neutral nucleotides for each species
SynNuc = aggregate(list(codus$NeutralA,codus$NeutralT,codus$NeutralG,codus$NeutralC), by = list(codus$Species,codus$Class,codus$Taxonomy), FUN = sum)
View(SynNuc)
names(SynNuc)=c('Species','Class','Taxonomy','NeutralA','NeutralT','NeutralG','NeutralC')
table(SynNuc$Class)
#### estimate fraction of each nucleotide
SynNuc$FrA = SynNuc$NeutralA / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrT = SynNuc$NeutralT / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrG = SynNuc$NeutralG / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrC = SynNuc$NeutralC / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
tropical_and_fr = merge(SynNuc, and only_tropical, by = 'Species')
tropical_and_fr = merge(SynNuc, only_tropical, by = 'Species')
View(tropical_and_fr)
View(only_altitude)
altitude_and_fr = merge(SynNuc, only_altitude, by = 'Species')
x = sample(1:81, 18, replace = FALSE)
x
x = sample(1:81, 18, replace = FALSE)
x
altitude_and_fr[1,]
View(altitude_and_fr)
random_birds_from_tropical = data.frame()
rm(x)
random_rows = sample(1:81, 18, replace = FALSE)
random_birds_from_tropical[nrow] = altitude_and_fr[1,]
random_birds_from_tropical[nrow(random_birds_from_tropical)] = altitude_and_fr[1,]
random_birds_from_tropical[nrow(random_birds_from_tropical)+1] = altitude_and_fr[1,]
View(random_birds_from_tropical)
random_birds_from_tropical[nrow(random_birds_from_tropical)+1] = c(altitude_and_fr[1,])
View(random_birds_from_tropical)
random_birds_from_tropical[nrow(random_birds_from_tropical)+1,] = c(altitude_and_fr[1,])
random_birds_from_tropical[nrow(random_birds_from_tropical)+1,] = altitude_and_fr[1,]
random_birds_from_tropical[nrow(random_birds_from_tropical),] = altitude_and_fr[1,]
random_birds_from_tropical = data.frame()
random_birds_from_tropical[nrow(random_birds_from_tropical),] = altitude_and_fr[1,]
random_birds_from_tropical = data.frame()
random_rows = sample(1:81, 18, replace = FALSE)
random_birds_from_tropical = data.frame()
random_birds_from_tropical[nrow(random_birds_from_tropical),] = altitude_and_fr[1,]
random_birds_from_tropical[nrow(random_birds_from_tropical),] = c(altitude_and_fr[1,])
rbind(random_birds_from_tropical, altitude_and_fr[1,])
x = rbind(random_birds_from_tropical, altitude_and_fr[1,])
View(x)
rm(x)
random_birds_from_tropical = data.frame()
for (i in random_rows)
{
random_birds_from_tropical = rbind(random_birds_from_tropical, only_tropical[i,])
}
View(random_birds_from_tropical)
random_birds_from_tropical = rbind(random_birds_from_tropical, tropical_and_fr[i,])
random_birds_from_tropical = data.frame()
for (i in random_rows)
{
random_birds_from_tropical = rbind(random_birds_from_tropical, tropical_and_fr[i,])
}
View(random_birds_from_tropical)
library('ggplot2')
#
x = cbind(altitude_and_fr, random_birds_from_tropical)
View(x)
View(random_birds_from_tropical)
#graphics
x = cbind(altitude_and_fr, random_birds_from_tropical)
ggplot(data = x, aes(x = Species, y = FrA))+
geom_boxplot()
ggplot(data = altitude_and_fr, aes(x = Species, y = FrA))+
geom_boxplot()
ggplot(data = altitude_and_fr, aes(x = Species, y = FrA))+
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90))
ggplot(data = altitude_and_fr, aes(x = Phenotype, y = FrA))+
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90))
ggplot(data = x, aes(x = Phenotype, y = FrA))+
geom_boxplot()
ggplot(data = x, aes(x = Phenotype, y = FrA, FrT,FrC,FrG))+
geom_boxplot()
ggplot(data = altitude_and_fr, aes(x = Phenotype, y = FrA, FrT,FrC,FrG))+
geom_boxplot()
boxplot(altitude_and_fr)
boxplot(altitude_and_fr$FrA, random_birds_from_tropical$FrA)
boxplot(altitude_and_fr$FrA, random_birds_from_tropical$FrA, ylab(FrA))
boxplot(altitude_and_fr$FrA, random_birds_from_tropical$FrA)
#graphics
rm(x)
boxplot(altitude_and_fr$FrG, random_birds_from_tropical$FrG)
#graphics
boxplot(altitude_and_fr$FrA, random_birds_from_tropical$FrA)
boxplot(altitude_and_fr$FrG, random_birds_from_tropical$FrG)
boxplot(altitude_and_fr$FrC, random_birds_from_tropical$FrC)
boxplot(altitude_and_fr$FrT, random_birds_from_tropical$FrT)
