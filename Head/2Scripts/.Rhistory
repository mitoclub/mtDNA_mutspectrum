AC = replace(AC, 'A>C', 'T>G')
AC = AC[,c(1,3,4,5,6,7,8,9,10)]
names(AC) = c('species_name', 'ObsNum', 'ExpNum', 'RawMutSpec', 'MutSpec', 'Label', 'realm', 'Trophic_niche', 'Mut')
AG = replace(AG, 'A>G', 'T>C')
AG = AG[,c(1,3,4,5,6,7,8,9,10)]
names(AG) = c('species_name', 'ObsNum', 'ExpNum', 'RawMutSpec', 'MutSpec', 'Label', 'realm', 'Trophic_niche', 'Mut')
AT = replace(AT, 'A>T', 'T>A')
AT = AT[,c(1,3,4,5,6,7,8,9,10)]
names(AT) = c('species_name', 'ObsNum', 'ExpNum', 'RawMutSpec', 'MutSpec', 'Label', 'realm', 'Trophic_niche', 'Mut')
GC = replace(GC, 'G>C', 'C>G')
GC = GC[,c(1,3,4,5,6,7,8,9,10)]
names(GC) = c('species_name', 'ObsNum', 'ExpNum', 'RawMutSpec', 'MutSpec', 'Label', 'realm', 'Trophic_niche', 'Mut')
GT = replace(GT, 'G>T', 'C>A')
GT = GT[,c(1,3,4,5,6,7,8,9,10)]
names(GT) = c('species_name', 'ObsNum', 'ExpNum', 'RawMutSpec', 'MutSpec', 'Label', 'realm', 'Trophic_niche', 'Mut')
GA = replace(GA, 'G>A', 'C>T')
GA = GA[,c(1,3,4,5,6,7,8,9,10)]
names(GA) = c('species_name', 'ObsNum', 'ExpNum', 'RawMutSpec', 'MutSpec', 'Label', 'realm', 'Trophic_niche', 'Mut')
CG = replace(CG, 'C>G', 'G>C')
CG = CG[,c(1,3,4,5,6,7,8,9,10)]
names(CG) = c('species_name', 'ObsNum', 'ExpNum', 'RawMutSpec', 'MutSpec', 'Label', 'realm', 'Trophic_niche', 'Mut')
CT = replace(CT, 'C>T', 'G>A')
CT = CT[,c(1,3,4,5,6,7,8,9,10)]
names(CT) = c('species_name', 'ObsNum', 'ExpNum', 'RawMutSpec', 'MutSpec', 'Label', 'realm', 'Trophic_niche', 'Mut')
CA = replace(CA, 'C>A', 'G>T')
CA = CA[,c(1,3,4,5,6,7,8,9,10)]
names(CA) = c('species_name', 'ObsNum', 'ExpNum', 'RawMutSpec', 'MutSpec', 'Label', 'realm', 'Trophic_niche', 'Mut')
TG = replace(TG, 'T>G', 'A>C')
TG = TG[,c(1,3,4,5,6,7,8,9,10)]
names(TG) = c('species_name', 'ObsNum', 'ExpNum', 'RawMutSpec', 'MutSpec', 'Label', 'realm', 'Trophic_niche', 'Mut')
TC = replace(TC, 'T>C', 'A>G')
TC = TC[,c(1,3,4,5,6,7,8,9,10)]
names(TC) = c('species_name', 'ObsNum', 'ExpNum', 'RawMutSpec', 'MutSpec', 'Label', 'realm', 'Trophic_niche', 'Mut')
TA = replace(TA, 'T>A', 'A>T')
TA = TA[,c(1,3,4,5,6,7,8,9,10)]
names(TA) = c('species_name', 'ObsNum', 'ExpNum', 'RawMutSpec', 'MutSpec', 'Label', 'realm', 'Trophic_niche', 'Mut')
mut_data_ff1 = rbind(AC, AG, AT, GC, GT, GA, CT, CA, CG, TA, TG, TC)
library(data.table)
rm(pca_data, pca_data_shaped)
pca_data = mut_data_ff1[,c(1,5,7,8,9)]
pca_data_shaped = dcast.data.table(setDT(pca_data), species_name+realm+Trophic_niche~Mut,
value.var='MutSpec')
row.names(pca_data_shaped) = pca_data_shaped$species_name
View(pca_data_shaped)
row.names(pca_data_shaped)
View(gene_stats)
View(pca_data)
?cast
??cast
??cast
ex = cast()
install.packages('tidyr')
install.packages("tidyr")
library(tidyr)
ex = reshape(data = pca_data, idvar = 'species_name',
timevar = 'Mut',
direction = 'wide')
View(ex)
ex = reshape(data = pca_data, idvar = 'species_name',
timevar = 'Mut',
timevar = c('Mutspec', 'realm', 'Trophic_niche'),
direction = 'wide')
View(mut_data_ff1)
pca_data = mut_data_ff1[,c(1,5,9)]
ex = reshape(data = pca_data, idvar = 'species_name',
timevar = 'Mut',
timevar = 'Mutspec',
direction = 'wide')
ex = reshape(data = pca_data, idvar = 'species_name',
v.names  = 'Mut',
timevar = 'Mutspec',
direction = 'wide')
ex = reshape(data = pca_data, idvar = 'species_name',
timevar = 'Mut',
direction = 'wide')
row.names(ex) = ex$species_name
View(pca_data_shaped)
View(df_realm)
ex_eco = unique(df_realm)
View(ex_eco)
names(ex) = c('species_name', 'T>G', 'T>C', 'T>A', 'C>G', 'C>A', 'C>T', 'G>A','G>T','G>C', 'A>T', 'A>C', 'A>G',)
names(ex) = c('species_name', 'T>G', 'T>C', 'T>A', 'C>G', 'C>A', 'C>T', 'G>A','G>T','G>C', 'A>T', 'A>C', 'A>G')
ex = merge(ex, ex_eco, by = species_name)
ex = merge(ex, ex_eco, by = 'species_name')
names(ex) = c('species_name', 'T>G', 'T>C', 'T>A', 'C>G', 'C>A', 'C>T', 'G>A','G>T','G>C', 'A>T', 'A>C', 'A>G')
ex = reshape(data = pca_data, idvar = 'species_name',
timevar = 'Mut',
direction = 'wide')
row.names(ex) = ex$species_name
names(ex) = c('species_name', 'T>G', 'T>C', 'T>A', 'C>G', 'C>A', 'C>T', 'G>A','G>T','G>C', 'A>T', 'A>C', 'A>G')
ex_eco = unique(df_realm)
ex = merge(ex, ex_eco, by = 'species_name')
rm(pca_data_shaped)
pca_data = mut_data_ff1[,c(1,5,9)]
ex = reshape(data = pca_data, idvar = 'species_name',
timevar = 'Mut',
direction = 'wide')
names(ex) = c('species_name', 'T>G', 'T>C', 'T>A', 'C>G', 'C>A', 'C>T', 'G>A','G>T','G>C', 'A>T', 'A>C', 'A>G')
ex_eco = unique(df_realm)
ex = merge(ex, ex_eco, by = 'species_name')
ex = reshape(data = pca_data, idvar = 'species_name',
timevar = 'Mut',
direction = 'wide')
names(ex) = c('species_name', 'T>G', 'T>C', 'T>A', 'C>G', 'C>A', 'C>T', 'G>A','G>T','G>C', 'A>T', 'A>C', 'A>G')
ex_eco = unique(df_realm)
ex1 = merge(ex, ex_eco, by = 'species_name')
View(ex1)
View(ex_eco)
View(ecozone_data)
ex = merge(ex, ecozone_data, by = 'species_name')
row.names(ex) = ex$species_name
stats_pca1 = prcomp(ex[,c(2,3,4,5,6,7,8,9,10,11,12,13)], center = TRUE, scale. = TRUE)
summary(stats_pca1)
library(ggbiplot)
library(ggplot2)
library(ggpubr)
library(plotly)
g1 = ggplot(gene_stats, aes(x=PC1, color=realm)) +
geom_density(size = 1)+
theme_bw()+
theme(axis.title = element_text(size = 29), axis.text = element_text(size = 25))+
xlab('PC1 (48.0%)')
g1
bipl = ggbiplot(stats_pca1, groups = pca_data_shaped$realm, labels.size = 2)
bipl
bipl = ggbiplot(stats_pca1, groups = ex$realm, labels.size = 2)
bipl
pca_data_shaped = dcast.data.table(setDT(pca_data), species_name+realm+Trophic_niche~Mut,
value.var='MutSpec')
pca_data = mut_data_ff1[,c(1,5,7,8,9)]
pca_data_shaped = dcast.data.table(setDT(pca_data), species_name+realm+Trophic_niche~Mut,
value.var='MutSpec')
View(pca_data_shaped)
ex = ex[,c(1,14,15,12,13,11,6,5,7,8,10,9,4,3,2)]
row.names(ex) = ex$species_name
stats_pca1 = prcomp(ex[,c(4,5,6,7,8,9,10,11,12,13,14,15)], center = TRUE, scale. = TRUE)
summary(stats_pca1)
bipl = ggbiplot(stats_pca1, groups = ex$realm, labels.size = 2)
bipl
birds_ms_pca = data.frame(stats_pca1$x)
birds_ms_pca = birds_ms_pca[,c(1,2)]
View(birds_ms_pca)
i = merge(ex, birds_ms_pca, by = 'species_name')
View(ex)
View(birds_ms_pca)
birds_ms_pca = data.frame(stats_pca1$x)
birds_ms_pca = birds_ms_pca[,c(1,2)]
birds_ms_pca$species_name = row.names(birds_ms_pca)
ex2 = merge(ex, birds_ms_pca, by = 'species_name')
View(ex2)
g11 = ggplot(ex2, aes(x=PC1, color=realm)) +
geom_density(size = 1)+
theme_bw()+
theme(axis.title = element_text(size = 29), axis.text = element_text(size = 25))+
xlab('PC1 (37.9%)')
g11
g12 = ggplot(ex2, aes(x=PC2, color=realm)) +
geom_density(size = 1)+
theme_bw()+
theme(axis.title = element_text(size = 29), axis.text = element_text(size = 25))+
xlab('PC1 (10.0%)')
g12
g13 = ggplot(ex2, aes(x=PC1, color=Trophic_niche)) +
geom_density(size = 1)+
theme_bw()+
theme(axis.title = element_text(size = 29), axis.text = element_text(size = 25))+
xlab('PC1 (37.9%)')
g13
g14 = ggplot(ex2, aes(x=PC2, color=Trophic_niche)) +
geom_density(size = 1)+
theme_bw()+
theme(axis.title = element_text(size = 29), axis.text = element_text(size = 25))+
xlab('PC1 (10.0%)')
g14
g15 = ggplot(ex2, aes(x=PC1, color=realm)) +
geom_density(size = 1)+
theme_bw()+
theme(axis.title = element_text(size = 29), axis.text = element_text(size = 25))+
xlab('PC1 (37.9%)')+
scale_colour_manual(name="Origin", values= c("black", "red", "black", "black", "black", "black", "black", "black", "black"))
g15
g16 = ggplot(ex2, aes(x=PC2, color=realm)) +
geom_density(size = 1)+
theme_bw()+
theme(axis.title = element_text(size = 29), axis.text = element_text(size = 25))+
xlab('PC1 (10.0%)')+
scale_colour_manual(name="Origin", values= c("black", "red", "black", "black", "black", "black", "black", "black", "black"))
g16
g17 = ggplot(ex2, aes(x=PC1, color=Trophic_niche)) +
geom_density(size = 1)+
theme_bw()+
theme(axis.title = element_text(size = 29), axis.text = element_text(size = 25))+
xlab('PC1 (37.9%)')+
scale_colour_manual(name="Origin", values= c("black", "black", "black", "red", "black", "black", "black", "black", "black", 'black'))
g17
g18 = ggplot(ex2, aes(x=PC2, color=Trophic_niche)) +
geom_density(size = 1)+
theme_bw()+
theme(axis.title = element_text(size = 29), axis.text = element_text(size = 25))+
xlab('PC1 (10.0%)')+
scale_colour_manual(name="Origin", values= c("black", "black", "black", "red", "black", "black", "black", "black", "black", 'black'))
g18
rm(list = ls(all=TRUE))
library(ggbiplot)
library(ggplot2)
library(ggpubr)
df_mtdna = read.csv('../../Head/2Scripts/Birds_dataset_paper.csv')
#PCA coloring
library('ggbiplot')
df_pca = df_mtdna[c('species_name','gene_name','fAn', 'fGn', 'fCn', 'fTn', 'Stg_Sac','ghahSkew', 'chthSkew', 'med_T', 'med_G')]
gene_vector = c('fAn', 'fGn', 'fCn', 'fTn', 'Stg_Sac','ghahSkew', 'chthSkew', 'med_T', 'med_G')
gene_stats = data.frame(unique(df_pca$species_name))
for ( char in gene_vector){
stats1 = aggregate(df_pca[,char], by = list(df_pca$species_name), FUN = 'sum')[2]
stats1 = stats1/12
gene_stats = cbind(gene_stats, stats1)
}
names(gene_stats) = c('species_name', gene_vector)
df_realm = df_mtdna[c('species_name', 'realm', 'Trophic_niche')]
gene_stats = merge(gene_stats, df_realm, by = 'species_name')
gene_stats = unique(gene_stats)
row.names(gene_stats) = gene_stats$species_name
#gene_stats$species_name = NA
gene_stats = gene_stats[, colSums(is.na(gene_stats)) < nrow(gene_stats)]
stats_pca = prcomp(gene_stats[c(2,3,4,5,6,7,8,9,10)], center = TRUE, scale. = TRUE)
summary(stats_pca)
bipl = ggbiplot(stats_pca, groups = gene_stats$realm, labels = gene_stats$species_name, labels.size = 2)+
scale_colour_manual(name="Origin", values= c("black", "green", "black", "black", "black", "black", "black", "red", "black"))
bipl
ggplotly(bipl)
bipl = ggbiplot(stats_pca, groups = gene_stats$realm, labels = gene_stats$species_name, labels.size = 2)
bipl
library(plotly)
library(dplyr)
bipl_niche = ggbiplot(stats_pca, groups = gene_stats$Trophic_niche, labels = gene_stats$species_name, labels.size = 2)+
scale_colour_manual(name='Origin', values = c('black', 'black', 'black', 'red', 'black','black', 'black', 'black', 'black', 'black'))
bipl_niche
ggplotly(bipl_niche)
library(plotly)
install.packages('plotly')
library(plotly)
ggplotly(bipl_niche)
remove.packages('plotly')
install.packages('plotly')
library(devtools)
#install.packages('dplyr')
#install.packages("car")
#install.packages("babynames")
#install.packages("gapminder")
devtools::install_github("ropensci/plotly")
remove.packages('devtools')
install.packages('devtools')
library(devtools)
#install.packages('dplyr')
#install.packages("car")
#install.packages("babynames")
#install.packages("gapminder")
devtools::install_github("ropensci/plotly")
devtools::install_github("ropensci/plotly")
library(devtools)
install.packages("DBI")
install.packages("DBI")
install.packages("DBI")
install.packages("DBI")
install.packages("DBI")
install.packages('plotly')
ggplotly(bipl_niche)
library(plotly)
ggplotly(bipl_niche)
rm(list = ls(all=TRUE))
install.packages("ggbiplot")
install.packages("ggbiplot")
install.packages("ggplot2")
install.packages("ggpubr")
library(ggbiplot)
library(ggplot2)
df_mtdna = read.csv('../../Head/2Scripts/Birds_dataset_paper.csv')
f1 = ggplot(data = df_mtdna, aes(x = gene_name, y = fTn))+
geom_boxplot(outlier.shape = NA)+
xlab('Mitochondrial genes')+
ylab('Thymine frequence')+
ylim(0, 0.7)
library(ggplot2)
remove.packages('rlang')
remove.packages('ggplot2')
remove.packages('ggbiplot')
install.packages("rlang")
install.packages("rlang")
install.packages("ggplot2")
library(ggplot2)
install.packages("ggbiplot")
library(ggbiplot)
df_mtdna = read.csv('../../Head/2Scripts/Birds_dataset_paper.csv')
f1 = ggplot(data = df_mtdna, aes(x = gene_name, y = fTn))+
geom_boxplot(outlier.shape = NA)+
xlab('Mitochondrial genes')+
ylab('Thymine frequence')+
ylim(0, 0.7)
f1 = f1 +xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CYTB","ND1","ND2"))
f1 = f1 + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
f1 = f1 + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
f2 = ggplot(data = df_mtdna, aes(x = gene_name, y = fCn))+
geom_boxplot(outlier.shape = NA)+
xlab('Mitochondrial genes')+
ylab('Cytosine frequence')+
ylim(0, 0.7)
f2 = f2 +xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CYTB","ND1","ND2"))
f2 = f2 + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
f3 = ggplot(data = df_mtdna, aes(x = gene_name, y = fGn))+
geom_boxplot(outlier.shape = NA)+
xlab('Mitochondrial genes')+
ylab('Guanine frequence')+
ylim(0, 0.7)
f3 = f3 +xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CYTB","ND1","ND2"))
f3 = f3 + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
f4 = ggplot(data = df_mtdna, aes(x = gene_name, y = fAn))+
geom_boxplot(outlier.shape = NA)+
xlab('Mitochondrial genes')+
ylab('Adenine frequence')+
ylim(0, 0.7)
f4 = f4 +xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CYTB","ND1","ND2"))
f4 = f4 + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
f5 = ggarrange(f1, f3, f2, f4,
ncol = 2, nrow = 2)
f5
install.packages("ggpubr")
library(ggpubr)
f5
f5 = ggarrange(f1, f3, f2, f4,
ncol = 2, nrow = 2)
f5
skew_all = ggplot(data = df_mtdna, aes(x = gene_name, y = ghahSkew))+
geom_boxplot(outlier.shape = NA, notch = T)+
xlab('Gene names')+
ylab('GhAhSkew')
skew_all = skew_all + xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CYTB","ND1","ND2"))
skew_all
remove.packages('devtools')
install.packages('devtools')
install.packages("devtools")
library(devtools)
library(devtools)
install_github("vqv/ggbiplot")
library(ggbiplot)
df_pca = df_mtdna[c('species_name','gene_name','fAn', 'fGn', 'fCn', 'fTn', 'Stg_Sac','ghahSkew', 'chthSkew', 'med_T', 'med_G')]
gene_vector = c('fAn', 'fGn', 'fCn', 'fTn', 'Stg_Sac','ghahSkew', 'chthSkew', 'med_T', 'med_G')
gene_stats = data.frame(unique(df_pca$species_name))
for ( char in gene_vector){
stats1 = aggregate(df_pca[,char], by = list(df_pca$species_name), FUN = 'sum')[2]
stats1 = stats1/12
gene_stats = cbind(gene_stats, stats1)
}
names(gene_stats) = c('species_name', gene_vector)
df_realm = df_mtdna[c('species_name', 'realm', 'Trophic_niche')]
gene_stats = merge(gene_stats, df_realm, by = 'species_name')
gene_stats = unique(gene_stats)
row.names(gene_stats) = gene_stats$species_name
#gene_stats$species_name = NA
gene_stats = gene_stats[, colSums(is.na(gene_stats)) < nrow(gene_stats)]
stats_pca = prcomp(gene_stats[c(2,3,4,5,6,7,8,9,10)], center = TRUE, scale. = TRUE)
summary(stats_pca)
bipl = ggbiplot(stats_pca, groups = gene_stats$realm, labels = gene_stats$species_name, labels.size = 2)+
scale_colour_manual(name="Origin", values= c("black", "green", "black", "black", "black", "black", "black", "red", "black"))
bipl
remove.packages('plotly')
install.packages('plotly')
library(plotly)
ggplotly(bipl)
rm(list = ls(all=TRUE))
df_mtdna = read.csv('../../Head/2Scripts/Birds_dataset_paper.csv')
rm(list = ls(all=TRUE))
library(ggplot2)
library(ggpubr)
library(plotly)
library(ggbiplot)
rm(list=ls(all=TRUE))
library(ggplot2)
library(plotly)
#four-fold mutations
df_mtdna = read.csv('../../Head/2Scripts/Birds_dataset_paper.csv')
mut_data = read.table("C:/Users/User/Desktop/Birds mutspec results from Bogdan/mutspec12.tsv", header = TRUE, fill = TRUE)
mut_data_ff = mut_data[mut_data$Label == 'ff',]
mut_data_ff = mut_data_ff[,c(1,2,3,4,5,7,8)]
ecozone_data = df_mtdna[,c('species_name', 'realm', 'Trophic_niche')]
ecozone_data = unique(ecozone_data)
ecozone_data$species_name = gsub(' ', '_', ecozone_data$species_name)
mut_data_ff = mut_data_ff[!grepl('Node', mut_data_ff$AltNode),]
names(mut_data_ff) = c('Mut', 'ObsNum', 'ExpNum', 'RawMutSpec', 'MutSpec', 'species_name', 'Label')
mut_data_ff = merge(mut_data_ff, ecozone_data, by = 'species_name')
mut_data_ff$MutSpec =  as.numeric(mut_data_ff$MutSpec)
AC = mut_data_ff[mut_data_ff$Mut == 'A>C',]
AG = mut_data_ff[mut_data_ff$Mut == 'A>G',]
AT = mut_data_ff[mut_data_ff$Mut == 'A>T',]
GC = mut_data_ff[mut_data_ff$Mut == 'G>C',]
GT = mut_data_ff[mut_data_ff$Mut == 'G>T',]
GA = mut_data_ff[mut_data_ff$Mut == 'G>A',]
CG = mut_data_ff[mut_data_ff$Mut == 'C>G',]
CT = mut_data_ff[mut_data_ff$Mut == 'C>T',]
CA = mut_data_ff[mut_data_ff$Mut == 'C>A',]
TG = mut_data_ff[mut_data_ff$Mut == 'T>G',]
TC = mut_data_ff[mut_data_ff$Mut == 'T>C',]
TA = mut_data_ff[mut_data_ff$Mut == 'T>A',]
AC = replace(AC, 'A>C', 'T>G')
AC = AC[,c(1,3,4,5,6,7,8,9,10)]
names(AC) = c('species_name', 'ObsNum', 'ExpNum', 'RawMutSpec', 'MutSpec', 'Label', 'realm', 'Trophic_niche', 'Mut')
AG = replace(AG, 'A>G', 'T>C')
AG = AG[,c(1,3,4,5,6,7,8,9,10)]
names(AG) = c('species_name', 'ObsNum', 'ExpNum', 'RawMutSpec', 'MutSpec', 'Label', 'realm', 'Trophic_niche', 'Mut')
AT = replace(AT, 'A>T', 'T>A')
AT = AT[,c(1,3,4,5,6,7,8,9,10)]
names(AT) = c('species_name', 'ObsNum', 'ExpNum', 'RawMutSpec', 'MutSpec', 'Label', 'realm', 'Trophic_niche', 'Mut')
GC = replace(GC, 'G>C', 'C>G')
GC = GC[,c(1,3,4,5,6,7,8,9,10)]
names(GC) = c('species_name', 'ObsNum', 'ExpNum', 'RawMutSpec', 'MutSpec', 'Label', 'realm', 'Trophic_niche', 'Mut')
GT = replace(GT, 'G>T', 'C>A')
GT = GT[,c(1,3,4,5,6,7,8,9,10)]
names(GT) = c('species_name', 'ObsNum', 'ExpNum', 'RawMutSpec', 'MutSpec', 'Label', 'realm', 'Trophic_niche', 'Mut')
GA = replace(GA, 'G>A', 'C>T')
GA = GA[,c(1,3,4,5,6,7,8,9,10)]
names(GA) = c('species_name', 'ObsNum', 'ExpNum', 'RawMutSpec', 'MutSpec', 'Label', 'realm', 'Trophic_niche', 'Mut')
CG = replace(CG, 'C>G', 'G>C')
CG = CG[,c(1,3,4,5,6,7,8,9,10)]
names(CG) = c('species_name', 'ObsNum', 'ExpNum', 'RawMutSpec', 'MutSpec', 'Label', 'realm', 'Trophic_niche', 'Mut')
CT = replace(CT, 'C>T', 'G>A')
CT = CT[,c(1,3,4,5,6,7,8,9,10)]
names(CT) = c('species_name', 'ObsNum', 'ExpNum', 'RawMutSpec', 'MutSpec', 'Label', 'realm', 'Trophic_niche', 'Mut')
CA = replace(CA, 'C>A', 'G>T')
CA = CA[,c(1,3,4,5,6,7,8,9,10)]
names(CA) = c('species_name', 'ObsNum', 'ExpNum', 'RawMutSpec', 'MutSpec', 'Label', 'realm', 'Trophic_niche', 'Mut')
TG = replace(TG, 'T>G', 'A>C')
TG = TG[,c(1,3,4,5,6,7,8,9,10)]
names(TG) = c('species_name', 'ObsNum', 'ExpNum', 'RawMutSpec', 'MutSpec', 'Label', 'realm', 'Trophic_niche', 'Mut')
TC = replace(TC, 'T>C', 'A>G')
TC = TC[,c(1,3,4,5,6,7,8,9,10)]
names(TC) = c('species_name', 'ObsNum', 'ExpNum', 'RawMutSpec', 'MutSpec', 'Label', 'realm', 'Trophic_niche', 'Mut')
TA = replace(TA, 'T>A', 'A>T')
TA = TA[,c(1,3,4,5,6,7,8,9,10)]
names(TA) = c('species_name', 'ObsNum', 'ExpNum', 'RawMutSpec', 'MutSpec', 'Label', 'realm', 'Trophic_niche', 'Mut')
mut_data_ff1 = rbind(AC, AG, AT, GC, GT, GA, CT, CA, CG, TA, TG, TC)
ggplot(data = mut_data_ff, aes(x = Mut, y = MutSpec, fill = Trophic_niche))+
geom_boxplot()
fig <- plot_ly(mut_data_ff1, x = ~Mut, y = ~MutSpec, color = ~realm, type = "box")
fig <- fig %>% layout(boxmode = "group")
fig
#PCA work
library(ggbiplot)
remove.packages('data.table')
install.packages('data.table')
install.packages("data.table")
library(data.table)
pca_data = mut_data_ff1[,c(1,5,7,8,9)]
pca_data_shaped = dcast.data.table(setDT(pca_data), species_name+realm+Trophic_niche~Mut,
value.var='MutSpec')
pca_data_shaped$`A>C` = as.numeric(pca_data_shaped$`A>C`)
pca_data_shaped$`A>G` = as.numeric(pca_data_shaped$`A>G`)
pca_data_shaped$`A>T` = as.numeric(pca_data_shaped$`A>T`)
pca_data_shaped$`C>A` = as.numeric(pca_data_shaped$`C>A`)
pca_data_shaped$`C>G` = as.numeric(pca_data_shaped$`C>G`)
pca_data_shaped$`C>T` = as.numeric(pca_data_shaped$`C>T`)
pca_data_shaped$`G>A` = as.numeric(pca_data_shaped$`G>A`)
pca_data_shaped$`G>C` = as.numeric(pca_data_shaped$`G>C`)
pca_data_shaped$`G>T` = as.numeric(pca_data_shaped$`G>T`)
pca_data_shaped$`T>A` = as.numeric(pca_data_shaped$`T>A`)
pca_data_shaped$`T>C` = as.numeric(pca_data_shaped$`T>C`)
pca_data_shaped$`T>G` = as.numeric(pca_data_shaped$`T>G`)
stats_pca = prcomp(pca_data_shaped[,c(4,5,6,7,8,9,10,11,12,13,14,15)], center = TRUE, scale. = TRUE)
summary(stats_pca)
bipl = ggbiplot(stats_pca, groups = pca_data_shaped$realm, labels = pca_data_shaped$species_name, labels.size = 2)
#PCA work
library(ggbiplot)
bipl = ggbiplot(stats_pca, groups = pca_data_shaped$realm, labels = pca_data_shaped$species_name, labels.size = 2)
bipl
ggplotly(bipl)
library(plotly)
ggplotly(bipl)
View(pca_data_shaped)
#A>G/T>C
pca_data_shaped$AG_TC = pca_data_shaped$`A>G`/pca_data_shaped$`T>C`
pca_data_shaped$GA_CT = pca_data_shaped$`G>A`/pca_data_shaped$`C>T`
ggplot(pca_data_shaped, aes(x = realm, y = AG_TC))+
geom_boxplot()
ggplot(pca_data_shaped, aes(x = realm, y = AG_TC))+
geom_boxplot(outlier.shape = FALSE)
ggplot(pca_data_shaped, aes(x = realm, y = AG_TC))+
geom_boxplot(outlier.size =  = FALSE)
ggplot(pca_data_shaped, aes(x = realm, y = AG_TC))+
geom_boxplot(outlier.size = FALSE)
ggplot(pca_data_shaped, aes(x = realm, y = AG_TC))+
geom_boxplot(outlier.fill = FALSE)
ggplot(pca_data_shaped, aes(x = realm, y = AG_TC))+
geom_boxplot(outlier.shape = NA)
min(pca_data_shaped$AG_TC)
#Valya's data
valya_data = read.csv('../../Head/2Scripts/valyadata_final.csv')
valya_data = na.omit(valya_data)
valya_data = valya_data[,c(1,3,4,5,6)]
valya_data["species_name"][valya_data["species_name"] == "Strigops_habroptilus"] = "Strigops_habroptila"
View(valya_data)
pca_data_shaped$far_migration = ' '
pca_data_shaped$far_migration = ' '
pca_data_shaped$wintering = ' '
pca_data_shaped$diving = ' '
pca_data_shaped$flying = ' '
View(pca_data_shaped)
pca_data_shaped$far_migration = 'U'
pca_data_shaped$wintering = 'U'
pca_data_shaped$diving = 'U'
pca_data_shaped$flying = 'U'
unique(valya_data$far_migration)
unique(valya_data$wintering)
unique(valya_data$diving)
unique(valya_data$flying)
