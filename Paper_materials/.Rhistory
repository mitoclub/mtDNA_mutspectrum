AT = AT[,c(2,3,4,5,6,7)]
names(AT) = c('ObsNum', 'ExpNum', 'MutSpec', 'gene_name', 'species_name', 'Mut')
GC = replace(GC, 'G>C', 'C>G')
GC = GC[c(2,3,4,5,6,7)]
names(GC) = c('ObsNum', 'ExpNum', 'MutSpec', 'gene_name', 'species_name', 'Mut')
GT = replace(GT, 'G>T', 'C>A')
GT = GT[,c(2,3,4,5,6,7)]
names(GT) = c('ObsNum', 'ExpNum', 'MutSpec', 'gene_name', 'species_name', 'Mut')
GA = replace(GA, 'G>A', 'C>T')
GA = GA[,c(2,3,4,5,6,7)]
names(GA) = c('ObsNum', 'ExpNum', 'MutSpec', 'gene_name', 'species_name', 'Mut')
CG = replace(CG, 'C>G', 'G>C')
CG = CG[,c(2,3,4,5,6,7)]
names(CG) = c('ObsNum', 'ExpNum', 'MutSpec', 'gene_name', 'species_name', 'Mut')
CT = replace(CT, 'C>T', 'G>A')
CT = CT[,c(2,3,4,5,6,7)]
names(CT) = c('ObsNum', 'ExpNum', 'MutSpec', 'gene_name', 'species_name', 'Mut')
CA = replace(CA, 'C>A', 'G>T')
CA = CA[,c(2,3,4,5,6,7)]
names(CA) = c('ObsNum', 'ExpNum', 'MutSpec', 'gene_name', 'species_name', 'Mut')
TG = replace(TG, 'T>G', 'A>C')
TG = TG[,c(2,3,4,5,6,7)]
names(TG) = c('ObsNum', 'ExpNum', 'MutSpec', 'gene_name', 'species_name', 'Mut')
TC = replace(TC, 'T>C', 'A>G')
TC = TC[,c(2,3,4,5,6,7)]
names(TC) = c('ObsNum', 'ExpNum', 'MutSpec', 'gene_name', 'species_name', 'Mut')
TA = replace(TA, 'T>A', 'A>T')
TA = TA[,c(2,3,4,5,6,7)]
names(TA) = c('ObsNum', 'ExpNum', 'MutSpec', 'gene_name', 'species_name', 'Mut')
mut_data_reverse = rbind(AC, AG, AT, GC, GT, GA, CT, CG, CA, TA, TC, TG)
View(mut_data_reverse)
midori_birds_extra1 = merge(mut_data_reverse, eco_data, by = 'species_name')
ggplot(midori_birds_extra1, aes(x = Mut, y = MutSpec))+
geom_boxplot()
View(midori_birds_extra1)
ggplot(midori_birds_extra1, aes(x = Mut, y = MutSpec, fill = realm))+
geom_boxplot()
ggplot(midori_birds_extra1, aes(x = Mut, y = MutSpec, fill = Trophic_niche))+
geom_boxplot()
rm(list = ls(all=TRUE))
library(ggplot2)
df_mtdna = read.csv('../Paper_materials/Birds_dataset_paper_extra.csv')
df_fly = read.csv('../Paper_materials/flying_birds.csv')
df_fly = df_fly[,c(2,3,4)]
names(df_fly) = c('species_name', 'flightless', 'diving')
df_fly_clean1 = df_fly[df_fly$flightless =='Flightless',]
df_fly_clean= df_fly[df_fly$flightless == 'Almost_flightless',]
df_fly_clean = na.omit(df_fly_clean)
df_fly_clean1 = na.omit(df_fly_clean1)
df_dive = df_fly
df_fly = df_fly[df_fly$flightless != 'Flightless',]
df_fly = df_fly[df_fly$flightless != 'Almost_flightless',]
df_fly_clean$flightless = 'Tinamiformes'
df_fly_clean1$flightless = 'Tinamiformes'
df_fly_big = rbind(df_fly, df_fly_clean, df_fly_clean1)
df_eco = df_mtdna[,c('species_name','realm','Trophic_niche')]
df_fly_big1 = merge(df_fly, df_eco)
names_v = unique(df_mtdna$species_name)
df_short = data.frame()
for (i in names_v)
{
df1 = df_mtdna[df_mtdna$species_name == i,]
a = sum(df1$ghahSkew)/12
b = sum(df1$chthSkew)/12
v = sum(df1$Mass)/12
ab = c(i, a, b, v)
df_short = rbind(df_short, ab)
}
names(df_short) = c('species_name', 'GhAhSkew', 'ThChSkew', 'Mass')
df_short$Mass = as.numeric(df_short$Mass)
df_short$GhAhSkew = as.numeric(df_short$GhAhSkew)
df_short$ThChSkew = as.numeric(df_short$ThChSkew)
df_fly_final = merge(df_fly_big1, df_short)
df_fly_final = df_fly_final[df_fly_final$flightless != 'Galliformes',]
df_fly_final = unique(df_fly_final)
ggplot(df_fly_final, aes(x = flightless, y = GhAhSkew))+
geom_boxplot(outlier.shape = NA)+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
View(df_fly_final)
df_dive_final = merge(df_dive, df_short, by = 'species_name')
df_dive_final = df_dive_final[df_dive_final$diving != 'waterbird',]
View(df_dive_final)
#Midory mutspec data
mut_data = read.table("C:/Users/User/Desktop/Birds mutspec results from Bogdan/internal_12_syn_mutspec_all.csv", header = TRUE, fill = TRUE, sep = ',')
library(stringr)
mut_data[c('gene_name', 'species_name')] = str_split_fixed(mut_data$gene_and_species, '__', 2)
mut_data = mut_data[,c(2,3,4,5,7,8)]
mut_data_no_gene = mut_data[,c(1,4,6)]
know = mut_data[mut_data$species_name == 'Adelomyia_melanogenys',]
rm(know)
ex = reshape(data = mut_data_no_gene, idvar = 'species_name',
timevar = 'Mut',
direction = 'wide')
names(ex) = c('species_name', 'A>G', 'A>T', 'C>A', 'C>G', 'C>T', 'G>A', 'G>C','G>T','T>A', 'T>C', 'T>G', 'A>C')
ex1 = ex
eco_data = unique(df_mtdna[,c('species_name', 'realm', 'Trophic_niche')])
eco_data$species_name = gsub(' ', '_', eco_data$species_name)
midori_birds = merge(ex, eco_data, by = 'species_name')
midori_birds_extra = merge(mut_data, eco_data, by = 'species_name')
names(ex1) = c('species_name', 'T>C', 'T>A', 'G>T', 'G>C', 'G>A', 'C>T', 'C>G','C>A','A>T', 'A>G', 'A>C', 'T>G')
eco_data = unique(df_mtdna[,c('species_name', 'realm', 'Trophic_niche')])
eco_data$species_name = gsub(' ', '_', eco_data$species_name)
midori_birds1 = merge(ex1, eco_data, by = 'species_name')
AC = mut_data[mut_data$Mut == 'A>C',]
AG = mut_data[mut_data$Mut == 'A>G',]
AT = mut_data[mut_data$Mut == 'A>T',]
GC = mut_data[mut_data$Mut == 'G>C',]
GT = mut_data[mut_data$Mut == 'G>T',]
GA = mut_data[mut_data$Mut == 'G>A',]
CG = mut_data[mut_data$Mut == 'C>G',]
CT = mut_data[mut_data$Mut == 'C>T',]
CA = mut_data[mut_data$Mut == 'C>A',]
TG = mut_data[mut_data$Mut == 'T>G',]
TC = mut_data[mut_data$Mut == 'T>C',]
TA = mut_data[mut_data$Mut == 'T>A',]
AC = replace(AC, 'A>C', 'T>G')
AC = AC[,c(2,3,4,5,6,7)]
names(AC) = c('ObsNum', 'ExpNum', 'MutSpec', 'gene_name', 'species_name', 'Mut')
AG = replace(AG, 'A>G', 'T>C')
AG = AG[,c(2,3,4,5,6,7)]
names(AG) = c('ObsNum', 'ExpNum', 'MutSpec', 'gene_name', 'species_name', 'Mut')
AT = replace(AT, 'A>T', 'T>A')
AT = AT[,c(2,3,4,5,6,7)]
names(AT) = c('ObsNum', 'ExpNum', 'MutSpec', 'gene_name', 'species_name', 'Mut')
GC = replace(GC, 'G>C', 'C>G')
GC = GC[c(2,3,4,5,6,7)]
names(GC) = c('ObsNum', 'ExpNum', 'MutSpec', 'gene_name', 'species_name', 'Mut')
GT = replace(GT, 'G>T', 'C>A')
GT = GT[,c(2,3,4,5,6,7)]
names(GT) = c('ObsNum', 'ExpNum', 'MutSpec', 'gene_name', 'species_name', 'Mut')
GA = replace(GA, 'G>A', 'C>T')
GA = GA[,c(2,3,4,5,6,7)]
names(GA) = c('ObsNum', 'ExpNum', 'MutSpec', 'gene_name', 'species_name', 'Mut')
CG = replace(CG, 'C>G', 'G>C')
CG = CG[,c(2,3,4,5,6,7)]
names(CG) = c('ObsNum', 'ExpNum', 'MutSpec', 'gene_name', 'species_name', 'Mut')
CT = replace(CT, 'C>T', 'G>A')
CT = CT[,c(2,3,4,5,6,7)]
names(CT) = c('ObsNum', 'ExpNum', 'MutSpec', 'gene_name', 'species_name', 'Mut')
CA = replace(CA, 'C>A', 'G>T')
CA = CA[,c(2,3,4,5,6,7)]
names(CA) = c('ObsNum', 'ExpNum', 'MutSpec', 'gene_name', 'species_name', 'Mut')
TG = replace(TG, 'T>G', 'A>C')
TG = TG[,c(2,3,4,5,6,7)]
names(TG) = c('ObsNum', 'ExpNum', 'MutSpec', 'gene_name', 'species_name', 'Mut')
TC = replace(TC, 'T>C', 'A>G')
TC = TC[,c(2,3,4,5,6,7)]
names(TC) = c('ObsNum', 'ExpNum', 'MutSpec', 'gene_name', 'species_name', 'Mut')
TA = replace(TA, 'T>A', 'A>T')
TA = TA[,c(2,3,4,5,6,7)]
names(TA) = c('ObsNum', 'ExpNum', 'MutSpec', 'gene_name', 'species_name', 'Mut')
mut_data_reverse = rbind(AC, AG, AT, GC, GT, GA, CT, CG, CA, TA, TC, TG)
midori_birds_extra1 = merge(mut_data_reverse, eco_data, by = 'species_name')
View(midori_birds_extra1)
View(midori_birds_extra)
df_dive_ms = df_dive_final[,c(1,3)]
df_dive_ms_big = merge(midori_birds_extra1, df_dive_ms)
df_dive_ms$species_name = gsub(' ', '_', df_dive_ms$species_name)
df_dive_ms_big = merge(midori_birds_extra1, df_dive_ms, by = 'species_name')
View(midori_birds_extra)
View(midori_birds)
length(unique(midori_birds_extra1$species_name))
View(df_dive_ms_big)
df_fly_ms = df_fly_final[,c(1,2)]
df_fly_ms$species_name = gsub(' ', '_', df_fly_ms$species_name)
df_fly_ms_big = merge(midori_birds_extra1, df_fly_ms, by = 'species_name')
ggplot(df_dive_ms_big, aes(x = Mut, y = MutSpec, fill = diving))+
geom_boxplot()
ggplot(df_fly_ms_big, aes(x = Mut, y = MutSpec, fill = flying))+
geom_boxplot()
ggplot(df_fly_ms_big, aes(x = Mut, y = MutSpec, fill = flyghtless))+
geom_boxplot()
ggplot(df_fly_ms_big, aes(x = Mut, y = MutSpec, fill = flightless))+
geom_boxplot()
ggplot(df_dive_ms_big, aes(x = Mut, y = MutSpec, fill = diving))+
geom_dotplot()
ggplot(df_dive_ms_big, aes(x = Mut, y = MutSpec, fill = diving))+
geom_point()
ggplot(df_dive_ms_big, aes(x = Mut, y = MutSpec, color = diving))+
geom_point()
View(df_fly_ms_big)
View(df_dive_ms_big)
rm(list = ls(all=TRUE))
library(ggplot2)
df_mtdna = read.csv('../Paper_materials/Birds_dataset_paper_extra.csv')
View(df_mtdna)
View(df_mtdna)
View(df_mtdna)
names(df_mtdna)
library(ggplot2)
#new phenotypes from AVONET
ggplot(df_mtdna, aes(x = ghahSkew, y = Habitat))+
geom_boxplot()
#new phenotypes from AVONET
ggplot(df_mtdna, aes(x = Habitat, y = ghahSkew))+
geom_boxplot()
#new phenotypes from AVONET
ggplot(df_mtdna, aes(x = Habitat, y = ghahSkew))+
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(df_mtdna, aes(x = Habitat, y = chthSkew))+
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
#new phenotypes from AVONET
ggplot(df_mtdna, aes(x = Habitat, y = ghahSkew))+
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(df_mtdna, aes(x = Habitat, y = chthSkew))+
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(df_mtdna, aes(x = Primary_lifestyle, y = ghahSkew))+
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(df_mtdna, aes(x = Primary_lifestyle, y = chthSkew))+
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
View(df_mtdna)
df_int = read.csv('../Body/1Raw/Avonet_data.csv')
View(df_int)
View(df_int)
df_migr = df_int[,c('Species3', 'Migration')]
names(df_migr) = c('species_name', 'migration')
View(df_migr)
View(df_mtdna)
df_migr_mtdna = merge(df_mtdna, df_migr, by = 'species_name')
ggplot(df_migr_mtdna, aes(x = migration, y = ghahSkew))+
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
df_migr_mtdna$migration = as.character(df_migr_mtdna$migration)
ggplot(df_migr_mtdna, aes(x = migration, y = ghahSkew))+
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(df_migr_mtdna, aes(x = migration, y = chthSkew))+
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
rm(list = ls(all=TRUE))
library(ggplot2)
df_mtdna = read.csv('../Paper_materials/Birds_dataset_paper_extra.csv')
#Скосы
skew_all = ggplot(data = df_mtdna, aes(x = gene_name, y = ghahSkew))+
geom_boxplot(outlier.shape = NA, notch = T)+
xlab('Митохондриальные гены')+
ylab('Метрика окислительного стресса (GhAhSkew)')
skew_all = skew_all + xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CYTB","ND1","ND2"))
skew_all
#Млеки и птицы
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip", exdir = "../../Body/3Results/")
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")) file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")
#Млеки и птицы
unzip("../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip", exdir = "../Body/3Results/")
SynNuc = read.table("../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")) file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")
if (file.exists("../Body/3Results/AllGenesCodonUsageNoOverlap.txt")) file.remove("../Body/3Results/AllGenesCodonUsageNoOverlap.txt")
SynNuc$ghahSkew = ((SynNuc$NeutralC - SynNuc$NeutralT))/((SynNuc$NeutralC + SynNuc$NeutralT))
SynNuc$chthSkew = ((SynNuc$NeutralA - SynNuc$NeutralG))/((SynNuc$NeutralA + SynNuc$NeutralG))
new_mam = SynNuc[, c(1, 2, 79, 80)]
new_mam = new_mam[new_mam$Gene != 'ND6',]
new_mam$class = 'Mammalia'
new_bird = df_mtdna[, c('species_name', 'gene_name', 'ghahSkew','chthSkew')]
new_bird$class = 'Aves'
new_bird$species_name = gsub(' ', '_', new_bird$species_name)
new_bird$gene_name[new_bird$gene_name == 'CYTB'] = 'CytB'
names(new_mam) = c('species_name', 'gene_name', 'ghahSkew', 'chthSkew', 'class')
new_big = rbind(new_mam, new_bird)
new_b_and_m = ggplot(new_big, aes(x = gene_name, y = ghahSkew, fill = class))+
geom_boxplot(notch = TRUE, outlier.alpha = FALSE)+
xlab('Митохондриальные гены')+
ylab('Метрика окислительного стресса (GhAhSkew)')+
scale_fill_hue(labels = c("Птицы", "Млекопитающие"))
new_b_and_m = new_b_and_m + xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CytB","ND1","ND2"))
new_b_and_m = new_b_and_m + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
new_b_and_m
skew_all
#Экология
df_for_diploma = df_mtdna
df_for_diploma$russian_eco = ''
df_for_diploma$russian_tn = ''
dfr1 = df_for_diploma[df_for_diploma$realm == 'Antarctic',]
dfr2 = df_for_diploma[df_for_diploma$realm == 'Nearctic',]
dfr3 = df_for_diploma[df_for_diploma$realm == 'Palearctic',]
dfr4 = df_for_diploma[df_for_diploma$realm == 'Indo_Malay',]
dfr5 = df_for_diploma[df_for_diploma$realm == 'Afrotropic',]
dfr6 = df_for_diploma[df_for_diploma$realm == 'Neotropic',]
dfr7 = df_for_diploma[df_for_diploma$realm == 'Madagascar',]
dfr8 = df_for_diploma[df_for_diploma$realm == 'Australian',]
dfr9 = df_for_diploma[df_for_diploma$realm == 'Oceania',]
dfr1$russian_eco = 'Антарктика'
dfr2$russian_eco = 'Неарктика'
dfr3$russian_eco = 'Палеарктика'
dfr4$russian_eco = 'Индо-Малайзия'
dfr5$russian_eco = 'Афротропики'
dfr6$russian_eco = 'Неотропики'
dfr7$russian_eco = 'Мадагаскар'
dfr8$russian_eco = 'Австралия'
dfr9$russian_eco = 'Океания'
df_for_diploma = rbind(dfr1, dfr2, dfr3, dfr4, dfr5, dfr6, dfr7, dfr8, dfr9)
dfr1 = df_for_diploma[df_for_diploma$Trophic_niche == 'Herbivore aquatic',]
dfr2 = df_for_diploma[df_for_diploma$Trophic_niche == 'Scavenger',]
dfr3 = df_for_diploma[df_for_diploma$Trophic_niche == 'Vertivore',]
dfr4 = df_for_diploma[df_for_diploma$Trophic_niche == 'Granivore',]
dfr5 = df_for_diploma[df_for_diploma$Trophic_niche == 'Herbivore terrestrial',]
dfr6 = df_for_diploma[df_for_diploma$Trophic_niche == 'Invertivore',]
dfr7 = df_for_diploma[df_for_diploma$Trophic_niche == 'Aquatic predator',]
dfr8 = df_for_diploma[df_for_diploma$Trophic_niche == 'Nectarivore',]
dfr9 = df_for_diploma[df_for_diploma$Trophic_niche == 'Omnivore',]
dfr10 = df_for_diploma[df_for_diploma$Trophic_niche == 'Frugivore',]
dfr1$russian_tn = 'Водные травоядные'
dfr2$russian_tn = 'Падальщики'
dfr3$russian_tn = 'Позвоночные'
dfr4$russian_tn = 'Зерноядные'
dfr5$russian_tn = 'Наземные травоядные'
dfr6$russian_tn = 'Беспозвоночные'
dfr7$russian_tn = 'Водные хищники'
dfr8$russian_tn = 'Нектароядные'
dfr9$russian_tn = 'Всеядные'
dfr10$russian_tn = 'Плодоядные'
df_for_diploma = rbind(dfr1, dfr2, dfr3, dfr4, dfr5, dfr6, dfr7, dfr8, dfr9, dfr10)
skew_eco = ggplot(data = df_for_diploma, aes(x = russian_eco, y = ghahSkew))+
geom_boxplot(outlier.shape = NA)+
xlab('Экозоны')+
ylab('GhAhSkew')
skew_eco = skew_eco + xlim(c('Антарктика', 'Неарктика', 'Палеарктика', 'Индо-Малайзия', 'Афротропики', 'Мадагаскар', 'Неотропики', 'Австралия', 'Океания'))
skew_eco = skew_eco + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
skew_eco
skew_eco12 = ggplot(data = df_for_diploma, aes(x = russian_tn, y = ghahSkew))+
geom_boxplot(outlier.shape = NA)+
xlab('Трофические ниши')+
ylab('Метрика окислительного стресса (GhAhSkew)')
skew_eco12 = skew_eco12 + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
skew_eco12 = skew_eco12 + xlim(c('Водные травоядные', 'Падальщики', 'Позвоночные', 'Зерноядные', 'Наземные травоядные', 'Беспозвоночные', 'Водные хищники', 'Нектароядные', 'Всеядные', 'Плодоядные'))
skew_eco12
skew_eco
skew_eco = ggplot(data = df_for_diploma, aes(x = russian_eco, y = ghahSkew))+
geom_boxplot(outlier.shape = NA)+
xlab('Экозоны')+
ylab('Метрика окислительного стресса (GhAhSkew)')
skew_eco = skew_eco + xlim(c('Антарктика', 'Неарктика', 'Палеарктика', 'Индо-Малайзия', 'Афротропики', 'Мадагаскар', 'Неотропики', 'Австралия', 'Океания'))
skew_eco = skew_eco + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
skew_eco
skew_eco = ggplot(data = df_for_diploma, aes(x = russian_eco, y = ghahSkew))+
geom_boxplot(outlier.shape = NA, notch = TRUE)+
xlab('Экозоны')+
ylab('Метрика окислительного стресса (GhAhSkew)')
skew_eco = skew_eco + xlim(c('Антарктика', 'Неарктика', 'Палеарктика', 'Индо-Малайзия', 'Афротропики', 'Мадагаскар', 'Неотропики', 'Австралия', 'Океания'))
skew_eco = skew_eco + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
skew_eco
skew_eco12 = ggplot(data = df_for_diploma, aes(x = russian_tn, y = ghahSkew))+
geom_boxplot(outlier.shape = NA, notch = TRUE)+
xlab('Трофические ниши')+
ylab('Метрика окислительного стресса (GhAhSkew)')
skew_eco12 = skew_eco12 + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
skew_eco12 = skew_eco12 + xlim(c('Водные травоядные', 'Падальщики', 'Позвоночные', 'Зерноядные', 'Наземные травоядные', 'Беспозвоночные', 'Водные хищники', 'Нектароядные', 'Всеядные', 'Плодоядные'))
skew_eco12
skew_eco = ggplot(data = df_for_diploma, aes(x = russian_eco, y = ghahSkew))+
geom_boxplot(outlier.shape = NA, notch = TRUE)+
xlab('Экозоны')+
ylab('Метрика окислительного стресса (GhAhSkew)')
skew_eco = skew_eco + xlim(c('Антарктика', 'Неарктика', 'Палеарктика', 'Индо-Малайзия', 'Афротропики', 'Мадагаскар', 'Неотропики', 'Австралия', 'Океания'))
skew_eco = skew_eco + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
skew_eco
ggplot(df_mtdna, aes(x = ghahSkew, y = Mass, color = gene_name))+
geom_point()
names_v = unique(df_mtdna$species_name)
df_short = data.frame()
for (i in names_v)
{
df1 = df_mtdna[df_mtdna$species_name == i,]
a = sum(df1$ghahSkew)/12
b = sum(df1$chthSkew)/12
v = sum(df1$Mass)/12
ab = c(i, a, b, v)
df_short = rbind(df_short, ab)
}
names(df_short) = c('species_name', 'GhAhSkew', 'ThChSkew', 'Mass')
df_short$Mass = as.numeric(df_short$Mass)
df_short$GhAhSkew = as.numeric(df_short$GhAhSkew)
df_short$ThChSkew = as.numeric(df_short$ThChSkew)
ggplot(df_short, aes(x = Mass, y = GhAhSkew))+
geom_point()+
geom_smooth(method = lm)
df_short$log_mass = log10(df_short$Mass)
ggplot(df_short, aes(x = GhAhSkew, y = log_mass))+
geom_point()+
geom_smooth(method=lm)
ggplot(df_short, aes(x = log_mass, y = GhAhSkew))+
geom_point()+
geom_smooth(method=lm)+
xlab('Десятичный логарифм массы (измерялась в граммах)')
ggplot(df_short, aes(x = log_mass, y = GhAhSkew))+
geom_point()+
geom_smooth(method=lm)+
xlab('Десятичный логарифм массы (измерялась в граммах)')+
ylab('Метрика окислительного стресса (GhAhSkew)')
df_fly = read.csv('../Paper_materials/flying_birds.csv')
df_fly = df_fly[,c(2,3,4)]
names(df_fly) = c('species_name', 'flightless', 'diving')
df_fly_clean1 = df_fly[df_fly$flightless =='Flightless',]
df_fly_clean= df_fly[df_fly$flightless == 'Almost_flightless',]
df_fly_clean = na.omit(df_fly_clean)
df_fly_clean1 = na.omit(df_fly_clean1)
df_dive = df_fly
df_fly = df_fly[df_fly$flightless != 'Flightless',]
df_fly = df_fly[df_fly$flightless != 'Almost_flightless',]
df_fly_clean$flightless = 'Tinamiformes'
df_fly_clean1$flightless = 'Tinamiformes'
df_fly_big = rbind(df_fly, df_fly_clean, df_fly_clean1)
df_eco = df_mtdna[,c('species_name','realm','Trophic_niche')]
df_fly_big1 = merge(df_fly, df_eco)
names_v = unique(df_mtdna$species_name)
df_short = data.frame()
for (i in names_v)
{
df1 = df_mtdna[df_mtdna$species_name == i,]
a = sum(df1$ghahSkew)/12
b = sum(df1$chthSkew)/12
v = sum(df1$Mass)/12
ab = c(i, a, b, v)
df_short = rbind(df_short, ab)
}
names(df_short) = c('species_name', 'GhAhSkew', 'ThChSkew', 'Mass')
df_short$Mass = as.numeric(df_short$Mass)
df_short$GhAhSkew = as.numeric(df_short$GhAhSkew)
df_short$ThChSkew = as.numeric(df_short$ThChSkew)
df_fly_final = merge(df_fly_big1, df_short)
df_fly_final = df_fly_final[df_fly_final$flightless != 'Galliformes',]
df_fly_final = unique(df_fly_final)
df_fly_final$russian_fly = ''
df_fly_final$russian_dive = ''
unique(df_fly_final$flightless)
df1 = df_fly_final[df_fly_final$flightless == "0",]
df2 = df_fly_final[df_fly_final$flightless == "Sphenisciformes",]
df3 = df_fly_final[df_fly_final$flightless == "Apterygiformes",]
df4 = df_fly_final[df_fly_final$flightless == "Gruiformes",]
df5 = df_fly_final[df_fly_final$flightless == "Casuariiformes",]
df6 = df_fly_final[df_fly_final$flightless == "Tinamiformes",]
df7 = df_fly_final[df_fly_final$flightless == "Columbiformes",]
df8 = df_fly_final[df_fly_final$flightless == "Rheiformes",]
df9 = df_fly_final[df_fly_final$flightless == "Eurypygiformes",]
df10 = df_fly_final[df_fly_final$flightless == "Psittaciformes",]
df11 = df_fly_final[df_fly_final$flightless == "Struthioniformes",]
df1$russian_fly = 'Летающие птицы'
df2$russian_fly = 'Пингвинообразные'
df3$russian_fly = 'Кивиобразные'
df4$russian_fly = 'Журавлеобразные'
df5$russian_fly = 'Казуарообразные'
df6$russian_fly = 'Тинамуобразные'
df7$russian_fly = 'Голубеобразные'
df8$russian_fly = 'Нандуобразные'
df9$russian_fly = 'Отряд Кагу и солнечной цапли'
df10$russian_fly = 'Попугаеобразные'
df11$russian_fly = 'Страусообразные'
rm(df_russian_fly)
df_russian_fly = rbind(df1, df2, df3, df4, df5, df6, df7, df8, df9, df10, df11)
ggplot(df_russian_fly, aes(x = russian_fly, y = GhAhSkew))+
geom_point()+
xlim(c('Летающие птицы', "Тинамуобразные", "Кивиобразные", "Казуарообразные", "Страусообразные", "Нандуобразные",
"Попугаеобразные", "Голубеобразные", "Отряд Кагу и солнечной цапли", "Журавлеобразные", "Пингвинообразные"))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
xlab("Летающие птицы и отряды нелетающих птиц")
ggplot(df_russian_fly, aes(x = russian_fly, y = GhAhSkew))+
geom_point()+
xlim(c('Летающие птицы', "Тинамуобразные", "Кивиобразные", "Казуарообразные", "Страусообразные", "Нандуобразные",
"Попугаеобразные", "Голубеобразные", "Отряд Кагу и солнечной цапли", "Журавлеобразные", "Пингвинообразные"))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
xlab("Летающие птицы и отряды нелетающих птиц")+
ylab('Метрика окислительного стресса (GhAhSkew)')
df_dive_final = merge(df_dive, df_short, by = 'species_name')
df_dive_final = df_dive_final[df_dive_final$diving != 'waterbird',]
ggplot(df_dive_final, aes(x = diving, y = GhAhSkew))+
geom_boxplot(outlier.shape = NA)+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
df_dive_final$russian_dive = ''
unique(df_dive_final$diving)
df1 = df_dive_final[df_dive_final$diving == "0",]
df2 = df_dive_final[df_dive_final$diving == "Charadriiformes",]
df3 = df_dive_final[df_dive_final$diving == "Anseriformes",]
df4 = df_dive_final[df_dive_final$diving == "Coraciiformes",]
df5 = df_dive_final[df_dive_final$diving == "Suliformes",]
df6 = df_dive_final[df_dive_final$diving == "Sphenisciformes",]
df7 = df_dive_final[df_dive_final$diving == "Passeriformes",]
df8 = df_dive_final[df_dive_final$diving == "Procellariiformes",]
df9 = df_dive_final[df_dive_final$diving == "Gruiformes",]
df10 = df_dive_final[df_dive_final$diving == "Gaviiformes",]
df11 = df_dive_final[df_dive_final$diving == "Podicipediformes",]
df1$russian_dive = 'Птицы, не способные к дайвингу'
df2$russian_dive = 'Ржанкообразные'
df3$russian_dive = 'Гусеобразные'
df4$russian_dive = 'Ракшеобразные'
df5$russian_dive = 'Олушеобразные'
df6$russian_dive = 'Пингвинообразные'
df7$russian_dive = 'Воробьинообразные'
df8$russian_dive = 'Буревестникообразные'
df9$russian_dive = 'Журавлеобразные'
df10$russian_dive = 'Гагарообразные'
df11$russian_dive = 'Поганкообразные'
rm(df_russian_dive)
df_russian_dive = rbind(df1, df2, df3, df4, df5, df6, df7, df8, df9, df10, df11)
ggplot(df_russian_dive, aes(x = russian_dive, y = GhAhSkew))+
geom_point()+
xlim(c('Птицы, не способные к дайвингу', "Гусеобразные", "Пингвинообразные", "Поганкообразные", "Гагарообразные", "Олушеобразные",
"Ракшеобразные", "Воробьинообразные", "Журавлеобразные", "Ржанкообразные", "Буревестникообразные"))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
xlab("Птицы, не способные к дайвингу, и отряды птиц - дайверов")
ggplot(df_russian_dive, aes(x = russian_dive, y = GhAhSkew))+
geom_point()+
xlim(c('Птицы, не способные к дайвингу', "Гусеобразные", "Пингвинообразные", "Поганкообразные", "Гагарообразные", "Олушеобразные",
"Ракшеобразные", "Воробьинообразные", "Журавлеобразные", "Ржанкообразные", "Буревестникообразные"))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
xlab("Птицы, не способные к дайвингу, и отряды птиц - дайверов")+
ylab('Метрика окислительного стресса (GhAhSkew)')
rm(list = ls(all=TRUE))
